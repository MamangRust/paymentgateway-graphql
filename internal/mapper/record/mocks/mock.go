// Code generated by MockGen. DO NOT EDIT.
// Source: internal/mapper/record/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/mapper/record/interfaces.go -destination=internal/mapper/record/mocks/mock.go
//

// Package mock_recordmapper is a generated GoMock package.
package mock_recordmapper

import (
	reflect "reflect"

	record "github.com/MamangRust/paymentgatewaygraphql/internal/domain/record"
	db "github.com/MamangRust/paymentgatewaygraphql/pkg/database/schema"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRecordMapping is a mock of UserRecordMapping interface.
type MockUserRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockUserRecordMappingMockRecorder
	isgomock struct{}
}

// MockUserRecordMappingMockRecorder is the mock recorder for MockUserRecordMapping.
type MockUserRecordMappingMockRecorder struct {
	mock *MockUserRecordMapping
}

// NewMockUserRecordMapping creates a new mock instance.
func NewMockUserRecordMapping(ctrl *gomock.Controller) *MockUserRecordMapping {
	mock := &MockUserRecordMapping{ctrl: ctrl}
	mock.recorder = &MockUserRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRecordMapping) EXPECT() *MockUserRecordMappingMockRecorder {
	return m.recorder
}

// ToUserRecord mocks base method.
func (m *MockUserRecordMapping) ToUserRecord(user *db.User) *record.UserRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserRecord", user)
	ret0, _ := ret[0].(*record.UserRecord)
	return ret0
}

// ToUserRecord indicates an expected call of ToUserRecord.
func (mr *MockUserRecordMappingMockRecorder) ToUserRecord(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserRecord", reflect.TypeOf((*MockUserRecordMapping)(nil).ToUserRecord), user)
}

// ToUserRecordActivePagination mocks base method.
func (m *MockUserRecordMapping) ToUserRecordActivePagination(user *db.GetActiveUsersWithPaginationRow) *record.UserRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserRecordActivePagination", user)
	ret0, _ := ret[0].(*record.UserRecord)
	return ret0
}

// ToUserRecordActivePagination indicates an expected call of ToUserRecordActivePagination.
func (mr *MockUserRecordMappingMockRecorder) ToUserRecordActivePagination(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserRecordActivePagination", reflect.TypeOf((*MockUserRecordMapping)(nil).ToUserRecordActivePagination), user)
}

// ToUserRecordPagination mocks base method.
func (m *MockUserRecordMapping) ToUserRecordPagination(user *db.GetUsersWithPaginationRow) *record.UserRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserRecordPagination", user)
	ret0, _ := ret[0].(*record.UserRecord)
	return ret0
}

// ToUserRecordPagination indicates an expected call of ToUserRecordPagination.
func (mr *MockUserRecordMappingMockRecorder) ToUserRecordPagination(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserRecordPagination", reflect.TypeOf((*MockUserRecordMapping)(nil).ToUserRecordPagination), user)
}

// ToUserRecordTrashedPagination mocks base method.
func (m *MockUserRecordMapping) ToUserRecordTrashedPagination(user *db.GetTrashedUsersWithPaginationRow) *record.UserRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserRecordTrashedPagination", user)
	ret0, _ := ret[0].(*record.UserRecord)
	return ret0
}

// ToUserRecordTrashedPagination indicates an expected call of ToUserRecordTrashedPagination.
func (mr *MockUserRecordMappingMockRecorder) ToUserRecordTrashedPagination(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserRecordTrashedPagination", reflect.TypeOf((*MockUserRecordMapping)(nil).ToUserRecordTrashedPagination), user)
}

// ToUsersRecordActivePagination mocks base method.
func (m *MockUserRecordMapping) ToUsersRecordActivePagination(users []*db.GetActiveUsersWithPaginationRow) []*record.UserRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUsersRecordActivePagination", users)
	ret0, _ := ret[0].([]*record.UserRecord)
	return ret0
}

// ToUsersRecordActivePagination indicates an expected call of ToUsersRecordActivePagination.
func (mr *MockUserRecordMappingMockRecorder) ToUsersRecordActivePagination(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUsersRecordActivePagination", reflect.TypeOf((*MockUserRecordMapping)(nil).ToUsersRecordActivePagination), users)
}

// ToUsersRecordPagination mocks base method.
func (m *MockUserRecordMapping) ToUsersRecordPagination(users []*db.GetUsersWithPaginationRow) []*record.UserRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUsersRecordPagination", users)
	ret0, _ := ret[0].([]*record.UserRecord)
	return ret0
}

// ToUsersRecordPagination indicates an expected call of ToUsersRecordPagination.
func (mr *MockUserRecordMappingMockRecorder) ToUsersRecordPagination(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUsersRecordPagination", reflect.TypeOf((*MockUserRecordMapping)(nil).ToUsersRecordPagination), users)
}

// ToUsersRecordTrashedPagination mocks base method.
func (m *MockUserRecordMapping) ToUsersRecordTrashedPagination(users []*db.GetTrashedUsersWithPaginationRow) []*record.UserRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUsersRecordTrashedPagination", users)
	ret0, _ := ret[0].([]*record.UserRecord)
	return ret0
}

// ToUsersRecordTrashedPagination indicates an expected call of ToUsersRecordTrashedPagination.
func (mr *MockUserRecordMappingMockRecorder) ToUsersRecordTrashedPagination(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUsersRecordTrashedPagination", reflect.TypeOf((*MockUserRecordMapping)(nil).ToUsersRecordTrashedPagination), users)
}

// MockRoleRecordMapping is a mock of RoleRecordMapping interface.
type MockRoleRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRecordMappingMockRecorder
	isgomock struct{}
}

// MockRoleRecordMappingMockRecorder is the mock recorder for MockRoleRecordMapping.
type MockRoleRecordMappingMockRecorder struct {
	mock *MockRoleRecordMapping
}

// NewMockRoleRecordMapping creates a new mock instance.
func NewMockRoleRecordMapping(ctrl *gomock.Controller) *MockRoleRecordMapping {
	mock := &MockRoleRecordMapping{ctrl: ctrl}
	mock.recorder = &MockRoleRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRecordMapping) EXPECT() *MockRoleRecordMappingMockRecorder {
	return m.recorder
}

// ToRoleRecord mocks base method.
func (m *MockRoleRecordMapping) ToRoleRecord(role *db.Role) *record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRoleRecord", role)
	ret0, _ := ret[0].(*record.RoleRecord)
	return ret0
}

// ToRoleRecord indicates an expected call of ToRoleRecord.
func (mr *MockRoleRecordMappingMockRecorder) ToRoleRecord(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRoleRecord", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRoleRecord), role)
}

// ToRoleRecordActive mocks base method.
func (m *MockRoleRecordMapping) ToRoleRecordActive(role *db.GetActiveRolesRow) *record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRoleRecordActive", role)
	ret0, _ := ret[0].(*record.RoleRecord)
	return ret0
}

// ToRoleRecordActive indicates an expected call of ToRoleRecordActive.
func (mr *MockRoleRecordMappingMockRecorder) ToRoleRecordActive(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRoleRecordActive", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRoleRecordActive), role)
}

// ToRoleRecordAll mocks base method.
func (m *MockRoleRecordMapping) ToRoleRecordAll(role *db.GetRolesRow) *record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRoleRecordAll", role)
	ret0, _ := ret[0].(*record.RoleRecord)
	return ret0
}

// ToRoleRecordAll indicates an expected call of ToRoleRecordAll.
func (mr *MockRoleRecordMappingMockRecorder) ToRoleRecordAll(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRoleRecordAll", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRoleRecordAll), role)
}

// ToRoleRecordTrashed mocks base method.
func (m *MockRoleRecordMapping) ToRoleRecordTrashed(role *db.GetTrashedRolesRow) *record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRoleRecordTrashed", role)
	ret0, _ := ret[0].(*record.RoleRecord)
	return ret0
}

// ToRoleRecordTrashed indicates an expected call of ToRoleRecordTrashed.
func (mr *MockRoleRecordMappingMockRecorder) ToRoleRecordTrashed(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRoleRecordTrashed", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRoleRecordTrashed), role)
}

// ToRolesRecord mocks base method.
func (m *MockRoleRecordMapping) ToRolesRecord(roles []*db.Role) []*record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRolesRecord", roles)
	ret0, _ := ret[0].([]*record.RoleRecord)
	return ret0
}

// ToRolesRecord indicates an expected call of ToRolesRecord.
func (mr *MockRoleRecordMappingMockRecorder) ToRolesRecord(roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRolesRecord", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRolesRecord), roles)
}

// ToRolesRecordActive mocks base method.
func (m *MockRoleRecordMapping) ToRolesRecordActive(roles []*db.GetActiveRolesRow) []*record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRolesRecordActive", roles)
	ret0, _ := ret[0].([]*record.RoleRecord)
	return ret0
}

// ToRolesRecordActive indicates an expected call of ToRolesRecordActive.
func (mr *MockRoleRecordMappingMockRecorder) ToRolesRecordActive(roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRolesRecordActive", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRolesRecordActive), roles)
}

// ToRolesRecordAll mocks base method.
func (m *MockRoleRecordMapping) ToRolesRecordAll(roles []*db.GetRolesRow) []*record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRolesRecordAll", roles)
	ret0, _ := ret[0].([]*record.RoleRecord)
	return ret0
}

// ToRolesRecordAll indicates an expected call of ToRolesRecordAll.
func (mr *MockRoleRecordMappingMockRecorder) ToRolesRecordAll(roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRolesRecordAll", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRolesRecordAll), roles)
}

// ToRolesRecordTrashed mocks base method.
func (m *MockRoleRecordMapping) ToRolesRecordTrashed(roles []*db.GetTrashedRolesRow) []*record.RoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRolesRecordTrashed", roles)
	ret0, _ := ret[0].([]*record.RoleRecord)
	return ret0
}

// ToRolesRecordTrashed indicates an expected call of ToRolesRecordTrashed.
func (mr *MockRoleRecordMappingMockRecorder) ToRolesRecordTrashed(roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRolesRecordTrashed", reflect.TypeOf((*MockRoleRecordMapping)(nil).ToRolesRecordTrashed), roles)
}

// MockUserRoleRecordMapping is a mock of UserRoleRecordMapping interface.
type MockUserRoleRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockUserRoleRecordMappingMockRecorder
	isgomock struct{}
}

// MockUserRoleRecordMappingMockRecorder is the mock recorder for MockUserRoleRecordMapping.
type MockUserRoleRecordMappingMockRecorder struct {
	mock *MockUserRoleRecordMapping
}

// NewMockUserRoleRecordMapping creates a new mock instance.
func NewMockUserRoleRecordMapping(ctrl *gomock.Controller) *MockUserRoleRecordMapping {
	mock := &MockUserRoleRecordMapping{ctrl: ctrl}
	mock.recorder = &MockUserRoleRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRoleRecordMapping) EXPECT() *MockUserRoleRecordMappingMockRecorder {
	return m.recorder
}

// ToUserRoleRecord mocks base method.
func (m *MockUserRoleRecordMapping) ToUserRoleRecord(userRole *db.UserRole) *record.UserRoleRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserRoleRecord", userRole)
	ret0, _ := ret[0].(*record.UserRoleRecord)
	return ret0
}

// ToUserRoleRecord indicates an expected call of ToUserRoleRecord.
func (mr *MockUserRoleRecordMappingMockRecorder) ToUserRoleRecord(userRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserRoleRecord", reflect.TypeOf((*MockUserRoleRecordMapping)(nil).ToUserRoleRecord), userRole)
}

// MockRefreshTokenRecordMapping is a mock of RefreshTokenRecordMapping interface.
type MockRefreshTokenRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenRecordMappingMockRecorder
	isgomock struct{}
}

// MockRefreshTokenRecordMappingMockRecorder is the mock recorder for MockRefreshTokenRecordMapping.
type MockRefreshTokenRecordMappingMockRecorder struct {
	mock *MockRefreshTokenRecordMapping
}

// NewMockRefreshTokenRecordMapping creates a new mock instance.
func NewMockRefreshTokenRecordMapping(ctrl *gomock.Controller) *MockRefreshTokenRecordMapping {
	mock := &MockRefreshTokenRecordMapping{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenRecordMapping) EXPECT() *MockRefreshTokenRecordMappingMockRecorder {
	return m.recorder
}

// ToRefreshTokenRecord mocks base method.
func (m *MockRefreshTokenRecordMapping) ToRefreshTokenRecord(refreshToken *db.RefreshToken) *record.RefreshTokenRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRefreshTokenRecord", refreshToken)
	ret0, _ := ret[0].(*record.RefreshTokenRecord)
	return ret0
}

// ToRefreshTokenRecord indicates an expected call of ToRefreshTokenRecord.
func (mr *MockRefreshTokenRecordMappingMockRecorder) ToRefreshTokenRecord(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRefreshTokenRecord", reflect.TypeOf((*MockRefreshTokenRecordMapping)(nil).ToRefreshTokenRecord), refreshToken)
}

// ToRefreshTokensRecord mocks base method.
func (m *MockRefreshTokenRecordMapping) ToRefreshTokensRecord(refreshTokens []*db.RefreshToken) []*record.RefreshTokenRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRefreshTokensRecord", refreshTokens)
	ret0, _ := ret[0].([]*record.RefreshTokenRecord)
	return ret0
}

// ToRefreshTokensRecord indicates an expected call of ToRefreshTokensRecord.
func (mr *MockRefreshTokenRecordMappingMockRecorder) ToRefreshTokensRecord(refreshTokens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRefreshTokensRecord", reflect.TypeOf((*MockRefreshTokenRecordMapping)(nil).ToRefreshTokensRecord), refreshTokens)
}

// MockSaldoRecordMapping is a mock of SaldoRecordMapping interface.
type MockSaldoRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockSaldoRecordMappingMockRecorder
	isgomock struct{}
}

// MockSaldoRecordMappingMockRecorder is the mock recorder for MockSaldoRecordMapping.
type MockSaldoRecordMappingMockRecorder struct {
	mock *MockSaldoRecordMapping
}

// NewMockSaldoRecordMapping creates a new mock instance.
func NewMockSaldoRecordMapping(ctrl *gomock.Controller) *MockSaldoRecordMapping {
	mock := &MockSaldoRecordMapping{ctrl: ctrl}
	mock.recorder = &MockSaldoRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaldoRecordMapping) EXPECT() *MockSaldoRecordMappingMockRecorder {
	return m.recorder
}

// ToSaldoMonthBalance mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoMonthBalance(ss *db.GetMonthlySaldoBalancesRow) *record.SaldoMonthSaldoBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoMonthBalance", ss)
	ret0, _ := ret[0].(*record.SaldoMonthSaldoBalance)
	return ret0
}

// ToSaldoMonthBalance indicates an expected call of ToSaldoMonthBalance.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoMonthBalance(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoMonthBalance", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoMonthBalance), ss)
}

// ToSaldoMonthBalances mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoMonthBalances(ss []*db.GetMonthlySaldoBalancesRow) []*record.SaldoMonthSaldoBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoMonthBalances", ss)
	ret0, _ := ret[0].([]*record.SaldoMonthSaldoBalance)
	return ret0
}

// ToSaldoMonthBalances indicates an expected call of ToSaldoMonthBalances.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoMonthBalances(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoMonthBalances", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoMonthBalances), ss)
}

// ToSaldoMonthTotalBalance mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoMonthTotalBalance(ss *db.GetMonthlyTotalSaldoBalanceRow) *record.SaldoMonthTotalBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoMonthTotalBalance", ss)
	ret0, _ := ret[0].(*record.SaldoMonthTotalBalance)
	return ret0
}

// ToSaldoMonthTotalBalance indicates an expected call of ToSaldoMonthTotalBalance.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoMonthTotalBalance(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoMonthTotalBalance", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoMonthTotalBalance), ss)
}

// ToSaldoMonthTotalBalances mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoMonthTotalBalances(ss []*db.GetMonthlyTotalSaldoBalanceRow) []*record.SaldoMonthTotalBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoMonthTotalBalances", ss)
	ret0, _ := ret[0].([]*record.SaldoMonthTotalBalance)
	return ret0
}

// ToSaldoMonthTotalBalances indicates an expected call of ToSaldoMonthTotalBalances.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoMonthTotalBalances(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoMonthTotalBalances", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoMonthTotalBalances), ss)
}

// ToSaldoRecord mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoRecord(saldo *db.Saldo) *record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoRecord", saldo)
	ret0, _ := ret[0].(*record.SaldoRecord)
	return ret0
}

// ToSaldoRecord indicates an expected call of ToSaldoRecord.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoRecord(saldo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoRecord", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoRecord), saldo)
}

// ToSaldoRecordActive mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoRecordActive(saldo *db.GetActiveSaldosRow) *record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoRecordActive", saldo)
	ret0, _ := ret[0].(*record.SaldoRecord)
	return ret0
}

// ToSaldoRecordActive indicates an expected call of ToSaldoRecordActive.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoRecordActive(saldo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoRecordActive", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoRecordActive), saldo)
}

// ToSaldoRecordAll mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoRecordAll(saldo *db.GetSaldosRow) *record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoRecordAll", saldo)
	ret0, _ := ret[0].(*record.SaldoRecord)
	return ret0
}

// ToSaldoRecordAll indicates an expected call of ToSaldoRecordAll.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoRecordAll(saldo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoRecordAll", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoRecordAll), saldo)
}

// ToSaldoRecordTrashed mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoRecordTrashed(saldo *db.GetTrashedSaldosRow) *record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoRecordTrashed", saldo)
	ret0, _ := ret[0].(*record.SaldoRecord)
	return ret0
}

// ToSaldoRecordTrashed indicates an expected call of ToSaldoRecordTrashed.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoRecordTrashed(saldo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoRecordTrashed", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoRecordTrashed), saldo)
}

// ToSaldoYearSaldoBalance mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoYearSaldoBalance(ss *db.GetYearlySaldoBalancesRow) *record.SaldoYearSaldoBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoYearSaldoBalance", ss)
	ret0, _ := ret[0].(*record.SaldoYearSaldoBalance)
	return ret0
}

// ToSaldoYearSaldoBalance indicates an expected call of ToSaldoYearSaldoBalance.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoYearSaldoBalance(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoYearSaldoBalance", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoYearSaldoBalance), ss)
}

// ToSaldoYearSaldoBalances mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoYearSaldoBalances(ss []*db.GetYearlySaldoBalancesRow) []*record.SaldoYearSaldoBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoYearSaldoBalances", ss)
	ret0, _ := ret[0].([]*record.SaldoYearSaldoBalance)
	return ret0
}

// ToSaldoYearSaldoBalances indicates an expected call of ToSaldoYearSaldoBalances.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoYearSaldoBalances(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoYearSaldoBalances", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoYearSaldoBalances), ss)
}

// ToSaldoYearTotalBalance mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoYearTotalBalance(ss *db.GetYearlyTotalSaldoBalancesRow) *record.SaldoYearTotalBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoYearTotalBalance", ss)
	ret0, _ := ret[0].(*record.SaldoYearTotalBalance)
	return ret0
}

// ToSaldoYearTotalBalance indicates an expected call of ToSaldoYearTotalBalance.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoYearTotalBalance(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoYearTotalBalance", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoYearTotalBalance), ss)
}

// ToSaldoYearTotalBalances mocks base method.
func (m *MockSaldoRecordMapping) ToSaldoYearTotalBalances(ss []*db.GetYearlyTotalSaldoBalancesRow) []*record.SaldoYearTotalBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldoYearTotalBalances", ss)
	ret0, _ := ret[0].([]*record.SaldoYearTotalBalance)
	return ret0
}

// ToSaldoYearTotalBalances indicates an expected call of ToSaldoYearTotalBalances.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldoYearTotalBalances(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldoYearTotalBalances", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldoYearTotalBalances), ss)
}

// ToSaldosRecord mocks base method.
func (m *MockSaldoRecordMapping) ToSaldosRecord(saldos []*db.Saldo) []*record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldosRecord", saldos)
	ret0, _ := ret[0].([]*record.SaldoRecord)
	return ret0
}

// ToSaldosRecord indicates an expected call of ToSaldosRecord.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldosRecord(saldos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldosRecord", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldosRecord), saldos)
}

// ToSaldosRecordActive mocks base method.
func (m *MockSaldoRecordMapping) ToSaldosRecordActive(saldos []*db.GetActiveSaldosRow) []*record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldosRecordActive", saldos)
	ret0, _ := ret[0].([]*record.SaldoRecord)
	return ret0
}

// ToSaldosRecordActive indicates an expected call of ToSaldosRecordActive.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldosRecordActive(saldos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldosRecordActive", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldosRecordActive), saldos)
}

// ToSaldosRecordAll mocks base method.
func (m *MockSaldoRecordMapping) ToSaldosRecordAll(saldos []*db.GetSaldosRow) []*record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldosRecordAll", saldos)
	ret0, _ := ret[0].([]*record.SaldoRecord)
	return ret0
}

// ToSaldosRecordAll indicates an expected call of ToSaldosRecordAll.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldosRecordAll(saldos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldosRecordAll", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldosRecordAll), saldos)
}

// ToSaldosRecordTrashed mocks base method.
func (m *MockSaldoRecordMapping) ToSaldosRecordTrashed(saldos []*db.GetTrashedSaldosRow) []*record.SaldoRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSaldosRecordTrashed", saldos)
	ret0, _ := ret[0].([]*record.SaldoRecord)
	return ret0
}

// ToSaldosRecordTrashed indicates an expected call of ToSaldosRecordTrashed.
func (mr *MockSaldoRecordMappingMockRecorder) ToSaldosRecordTrashed(saldos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSaldosRecordTrashed", reflect.TypeOf((*MockSaldoRecordMapping)(nil).ToSaldosRecordTrashed), saldos)
}

// MockTopupRecordMapping is a mock of TopupRecordMapping interface.
type MockTopupRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockTopupRecordMappingMockRecorder
	isgomock struct{}
}

// MockTopupRecordMappingMockRecorder is the mock recorder for MockTopupRecordMapping.
type MockTopupRecordMappingMockRecorder struct {
	mock *MockTopupRecordMapping
}

// NewMockTopupRecordMapping creates a new mock instance.
func NewMockTopupRecordMapping(ctrl *gomock.Controller) *MockTopupRecordMapping {
	mock := &MockTopupRecordMapping{ctrl: ctrl}
	mock.recorder = &MockTopupRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopupRecordMapping) EXPECT() *MockTopupRecordMappingMockRecorder {
	return m.recorder
}

// ToTopupByCardNumberRecord mocks base method.
func (m *MockTopupRecordMapping) ToTopupByCardNumberRecord(topup *db.GetTopupsByCardNumberRow) *record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupByCardNumberRecord", topup)
	ret0, _ := ret[0].(*record.TopupRecord)
	return ret0
}

// ToTopupByCardNumberRecord indicates an expected call of ToTopupByCardNumberRecord.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupByCardNumberRecord(topup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupByCardNumberRecord", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupByCardNumberRecord), topup)
}

// ToTopupByCardNumberRecords mocks base method.
func (m *MockTopupRecordMapping) ToTopupByCardNumberRecords(topups []*db.GetTopupsByCardNumberRow) []*record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupByCardNumberRecords", topups)
	ret0, _ := ret[0].([]*record.TopupRecord)
	return ret0
}

// ToTopupByCardNumberRecords indicates an expected call of ToTopupByCardNumberRecords.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupByCardNumberRecords(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupByCardNumberRecords", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupByCardNumberRecords), topups)
}

// ToTopupMonthlyAmount mocks base method.
func (m *MockTopupRecordMapping) ToTopupMonthlyAmount(s *db.GetMonthlyTopupAmountsRow) *record.TopupMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupMonthlyAmount", s)
	ret0, _ := ret[0].(*record.TopupMonthAmount)
	return ret0
}

// ToTopupMonthlyAmount indicates an expected call of ToTopupMonthlyAmount.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupMonthlyAmount(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupMonthlyAmount", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupMonthlyAmount), s)
}

// ToTopupMonthlyAmountByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupMonthlyAmountByCardNumber(s *db.GetMonthlyTopupAmountsByCardNumberRow) *record.TopupMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupMonthlyAmountByCardNumber", s)
	ret0, _ := ret[0].(*record.TopupMonthAmount)
	return ret0
}

// ToTopupMonthlyAmountByCardNumber indicates an expected call of ToTopupMonthlyAmountByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupMonthlyAmountByCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupMonthlyAmountByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupMonthlyAmountByCardNumber), s)
}

// ToTopupMonthlyAmounts mocks base method.
func (m *MockTopupRecordMapping) ToTopupMonthlyAmounts(s []*db.GetMonthlyTopupAmountsRow) []*record.TopupMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupMonthlyAmounts", s)
	ret0, _ := ret[0].([]*record.TopupMonthAmount)
	return ret0
}

// ToTopupMonthlyAmounts indicates an expected call of ToTopupMonthlyAmounts.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupMonthlyAmounts(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupMonthlyAmounts", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupMonthlyAmounts), s)
}

// ToTopupMonthlyAmountsByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupMonthlyAmountsByCardNumber(s []*db.GetMonthlyTopupAmountsByCardNumberRow) []*record.TopupMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupMonthlyAmountsByCardNumber", s)
	ret0, _ := ret[0].([]*record.TopupMonthAmount)
	return ret0
}

// ToTopupMonthlyAmountsByCardNumber indicates an expected call of ToTopupMonthlyAmountsByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupMonthlyAmountsByCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupMonthlyAmountsByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupMonthlyAmountsByCardNumber), s)
}

// ToTopupMonthlyMethod mocks base method.
func (m *MockTopupRecordMapping) ToTopupMonthlyMethod(s *db.GetMonthlyTopupMethodsRow) *record.TopupMonthMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupMonthlyMethod", s)
	ret0, _ := ret[0].(*record.TopupMonthMethod)
	return ret0
}

// ToTopupMonthlyMethod indicates an expected call of ToTopupMonthlyMethod.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupMonthlyMethod(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupMonthlyMethod", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupMonthlyMethod), s)
}

// ToTopupMonthlyMethodByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupMonthlyMethodByCardNumber(s *db.GetMonthlyTopupMethodsByCardNumberRow) *record.TopupMonthMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupMonthlyMethodByCardNumber", s)
	ret0, _ := ret[0].(*record.TopupMonthMethod)
	return ret0
}

// ToTopupMonthlyMethodByCardNumber indicates an expected call of ToTopupMonthlyMethodByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupMonthlyMethodByCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupMonthlyMethodByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupMonthlyMethodByCardNumber), s)
}

// ToTopupMonthlyMethods mocks base method.
func (m *MockTopupRecordMapping) ToTopupMonthlyMethods(s []*db.GetMonthlyTopupMethodsRow) []*record.TopupMonthMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupMonthlyMethods", s)
	ret0, _ := ret[0].([]*record.TopupMonthMethod)
	return ret0
}

// ToTopupMonthlyMethods indicates an expected call of ToTopupMonthlyMethods.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupMonthlyMethods(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupMonthlyMethods", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupMonthlyMethods), s)
}

// ToTopupMonthlyMethodsByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupMonthlyMethodsByCardNumber(s []*db.GetMonthlyTopupMethodsByCardNumberRow) []*record.TopupMonthMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupMonthlyMethodsByCardNumber", s)
	ret0, _ := ret[0].([]*record.TopupMonthMethod)
	return ret0
}

// ToTopupMonthlyMethodsByCardNumber indicates an expected call of ToTopupMonthlyMethodsByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupMonthlyMethodsByCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupMonthlyMethodsByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupMonthlyMethodsByCardNumber), s)
}

// ToTopupRecord mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecord(topup *db.Topup) *record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecord", topup)
	ret0, _ := ret[0].(*record.TopupRecord)
	return ret0
}

// ToTopupRecord indicates an expected call of ToTopupRecord.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecord(topup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecord", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecord), topup)
}

// ToTopupRecordActive mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordActive(topup *db.GetActiveTopupsRow) *record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordActive", topup)
	ret0, _ := ret[0].(*record.TopupRecord)
	return ret0
}

// ToTopupRecordActive indicates an expected call of ToTopupRecordActive.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordActive(topup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordActive", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordActive), topup)
}

// ToTopupRecordAll mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordAll(topup *db.GetTopupsRow) *record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordAll", topup)
	ret0, _ := ret[0].(*record.TopupRecord)
	return ret0
}

// ToTopupRecordAll indicates an expected call of ToTopupRecordAll.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordAll(topup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordAll", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordAll), topup)
}

// ToTopupRecordMonthStatusFailed mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordMonthStatusFailed(s *db.GetMonthTopupStatusFailedRow) *record.TopupRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordMonthStatusFailed", s)
	ret0, _ := ret[0].(*record.TopupRecordMonthStatusFailed)
	return ret0
}

// ToTopupRecordMonthStatusFailed indicates an expected call of ToTopupRecordMonthStatusFailed.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordMonthStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordMonthStatusFailed", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordMonthStatusFailed), s)
}

// ToTopupRecordMonthStatusFailedByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordMonthStatusFailedByCardNumber(s *db.GetMonthTopupStatusFailedCardNumberRow) *record.TopupRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordMonthStatusFailedByCardNumber", s)
	ret0, _ := ret[0].(*record.TopupRecordMonthStatusFailed)
	return ret0
}

// ToTopupRecordMonthStatusFailedByCardNumber indicates an expected call of ToTopupRecordMonthStatusFailedByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordMonthStatusFailedByCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordMonthStatusFailedByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordMonthStatusFailedByCardNumber), s)
}

// ToTopupRecordMonthStatusSuccess mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordMonthStatusSuccess(s *db.GetMonthTopupStatusSuccessRow) *record.TopupRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordMonthStatusSuccess", s)
	ret0, _ := ret[0].(*record.TopupRecordMonthStatusSuccess)
	return ret0
}

// ToTopupRecordMonthStatusSuccess indicates an expected call of ToTopupRecordMonthStatusSuccess.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordMonthStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordMonthStatusSuccess", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordMonthStatusSuccess), s)
}

// ToTopupRecordMonthStatusSuccessByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordMonthStatusSuccessByCardNumber(s *db.GetMonthTopupStatusSuccessCardNumberRow) *record.TopupRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordMonthStatusSuccessByCardNumber", s)
	ret0, _ := ret[0].(*record.TopupRecordMonthStatusSuccess)
	return ret0
}

// ToTopupRecordMonthStatusSuccessByCardNumber indicates an expected call of ToTopupRecordMonthStatusSuccessByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordMonthStatusSuccessByCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordMonthStatusSuccessByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordMonthStatusSuccessByCardNumber), s)
}

// ToTopupRecordTrashed mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordTrashed(topup *db.GetTrashedTopupsRow) *record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordTrashed", topup)
	ret0, _ := ret[0].(*record.TopupRecord)
	return ret0
}

// ToTopupRecordTrashed indicates an expected call of ToTopupRecordTrashed.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordTrashed(topup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordTrashed", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordTrashed), topup)
}

// ToTopupRecordYearStatusFailed mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordYearStatusFailed(s *db.GetYearlyTopupStatusFailedRow) *record.TopupRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordYearStatusFailed", s)
	ret0, _ := ret[0].(*record.TopupRecordYearStatusFailed)
	return ret0
}

// ToTopupRecordYearStatusFailed indicates an expected call of ToTopupRecordYearStatusFailed.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordYearStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordYearStatusFailed", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordYearStatusFailed), s)
}

// ToTopupRecordYearStatusFailedByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordYearStatusFailedByCardNumber(s *db.GetYearlyTopupStatusFailedCardNumberRow) *record.TopupRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordYearStatusFailedByCardNumber", s)
	ret0, _ := ret[0].(*record.TopupRecordYearStatusFailed)
	return ret0
}

// ToTopupRecordYearStatusFailedByCardNumber indicates an expected call of ToTopupRecordYearStatusFailedByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordYearStatusFailedByCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordYearStatusFailedByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordYearStatusFailedByCardNumber), s)
}

// ToTopupRecordYearStatusSuccess mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordYearStatusSuccess(s *db.GetYearlyTopupStatusSuccessRow) *record.TopupRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordYearStatusSuccess", s)
	ret0, _ := ret[0].(*record.TopupRecordYearStatusSuccess)
	return ret0
}

// ToTopupRecordYearStatusSuccess indicates an expected call of ToTopupRecordYearStatusSuccess.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordYearStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordYearStatusSuccess", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordYearStatusSuccess), s)
}

// ToTopupRecordYearStatusSuccessByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordYearStatusSuccessByCardNumber(s *db.GetYearlyTopupStatusSuccessCardNumberRow) *record.TopupRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordYearStatusSuccessByCardNumber", s)
	ret0, _ := ret[0].(*record.TopupRecordYearStatusSuccess)
	return ret0
}

// ToTopupRecordYearStatusSuccessByCardNumber indicates an expected call of ToTopupRecordYearStatusSuccessByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordYearStatusSuccessByCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordYearStatusSuccessByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordYearStatusSuccessByCardNumber), s)
}

// ToTopupRecords mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecords(topups []*db.Topup) []*record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecords", topups)
	ret0, _ := ret[0].([]*record.TopupRecord)
	return ret0
}

// ToTopupRecords indicates an expected call of ToTopupRecords.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecords(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecords", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecords), topups)
}

// ToTopupRecordsActive mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordsActive(topups []*db.GetActiveTopupsRow) []*record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordsActive", topups)
	ret0, _ := ret[0].([]*record.TopupRecord)
	return ret0
}

// ToTopupRecordsActive indicates an expected call of ToTopupRecordsActive.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordsActive(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordsActive", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordsActive), topups)
}

// ToTopupRecordsAll mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordsAll(topups []*db.GetTopupsRow) []*record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordsAll", topups)
	ret0, _ := ret[0].([]*record.TopupRecord)
	return ret0
}

// ToTopupRecordsAll indicates an expected call of ToTopupRecordsAll.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordsAll(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordsAll", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordsAll), topups)
}

// ToTopupRecordsMonthStatusFailed mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordsMonthStatusFailed(topups []*db.GetMonthTopupStatusFailedRow) []*record.TopupRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordsMonthStatusFailed", topups)
	ret0, _ := ret[0].([]*record.TopupRecordMonthStatusFailed)
	return ret0
}

// ToTopupRecordsMonthStatusFailed indicates an expected call of ToTopupRecordsMonthStatusFailed.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordsMonthStatusFailed(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordsMonthStatusFailed", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordsMonthStatusFailed), topups)
}

// ToTopupRecordsMonthStatusFailedByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordsMonthStatusFailedByCardNumber(topups []*db.GetMonthTopupStatusFailedCardNumberRow) []*record.TopupRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordsMonthStatusFailedByCardNumber", topups)
	ret0, _ := ret[0].([]*record.TopupRecordMonthStatusFailed)
	return ret0
}

// ToTopupRecordsMonthStatusFailedByCardNumber indicates an expected call of ToTopupRecordsMonthStatusFailedByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordsMonthStatusFailedByCardNumber(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordsMonthStatusFailedByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordsMonthStatusFailedByCardNumber), topups)
}

// ToTopupRecordsMonthStatusSuccess mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordsMonthStatusSuccess(topups []*db.GetMonthTopupStatusSuccessRow) []*record.TopupRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordsMonthStatusSuccess", topups)
	ret0, _ := ret[0].([]*record.TopupRecordMonthStatusSuccess)
	return ret0
}

// ToTopupRecordsMonthStatusSuccess indicates an expected call of ToTopupRecordsMonthStatusSuccess.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordsMonthStatusSuccess(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordsMonthStatusSuccess", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordsMonthStatusSuccess), topups)
}

// ToTopupRecordsMonthStatusSuccessByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordsMonthStatusSuccessByCardNumber(topups []*db.GetMonthTopupStatusSuccessCardNumberRow) []*record.TopupRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordsMonthStatusSuccessByCardNumber", topups)
	ret0, _ := ret[0].([]*record.TopupRecordMonthStatusSuccess)
	return ret0
}

// ToTopupRecordsMonthStatusSuccessByCardNumber indicates an expected call of ToTopupRecordsMonthStatusSuccessByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordsMonthStatusSuccessByCardNumber(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordsMonthStatusSuccessByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordsMonthStatusSuccessByCardNumber), topups)
}

// ToTopupRecordsTrashed mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordsTrashed(topups []*db.GetTrashedTopupsRow) []*record.TopupRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordsTrashed", topups)
	ret0, _ := ret[0].([]*record.TopupRecord)
	return ret0
}

// ToTopupRecordsTrashed indicates an expected call of ToTopupRecordsTrashed.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordsTrashed(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordsTrashed", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordsTrashed), topups)
}

// ToTopupRecordsYearStatusFailed mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordsYearStatusFailed(topups []*db.GetYearlyTopupStatusFailedRow) []*record.TopupRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordsYearStatusFailed", topups)
	ret0, _ := ret[0].([]*record.TopupRecordYearStatusFailed)
	return ret0
}

// ToTopupRecordsYearStatusFailed indicates an expected call of ToTopupRecordsYearStatusFailed.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordsYearStatusFailed(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordsYearStatusFailed", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordsYearStatusFailed), topups)
}

// ToTopupRecordsYearStatusFailedByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordsYearStatusFailedByCardNumber(topups []*db.GetYearlyTopupStatusFailedCardNumberRow) []*record.TopupRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordsYearStatusFailedByCardNumber", topups)
	ret0, _ := ret[0].([]*record.TopupRecordYearStatusFailed)
	return ret0
}

// ToTopupRecordsYearStatusFailedByCardNumber indicates an expected call of ToTopupRecordsYearStatusFailedByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordsYearStatusFailedByCardNumber(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordsYearStatusFailedByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordsYearStatusFailedByCardNumber), topups)
}

// ToTopupRecordsYearStatusSuccess mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordsYearStatusSuccess(topups []*db.GetYearlyTopupStatusSuccessRow) []*record.TopupRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordsYearStatusSuccess", topups)
	ret0, _ := ret[0].([]*record.TopupRecordYearStatusSuccess)
	return ret0
}

// ToTopupRecordsYearStatusSuccess indicates an expected call of ToTopupRecordsYearStatusSuccess.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordsYearStatusSuccess(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordsYearStatusSuccess", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordsYearStatusSuccess), topups)
}

// ToTopupRecordsYearStatusSuccessByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupRecordsYearStatusSuccessByCardNumber(topups []*db.GetYearlyTopupStatusSuccessCardNumberRow) []*record.TopupRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupRecordsYearStatusSuccessByCardNumber", topups)
	ret0, _ := ret[0].([]*record.TopupRecordYearStatusSuccess)
	return ret0
}

// ToTopupRecordsYearStatusSuccessByCardNumber indicates an expected call of ToTopupRecordsYearStatusSuccessByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupRecordsYearStatusSuccessByCardNumber(topups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupRecordsYearStatusSuccessByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupRecordsYearStatusSuccessByCardNumber), topups)
}

// ToTopupYearlyAmount mocks base method.
func (m *MockTopupRecordMapping) ToTopupYearlyAmount(s *db.GetYearlyTopupAmountsRow) *record.TopupYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupYearlyAmount", s)
	ret0, _ := ret[0].(*record.TopupYearlyAmount)
	return ret0
}

// ToTopupYearlyAmount indicates an expected call of ToTopupYearlyAmount.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupYearlyAmount(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupYearlyAmount", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupYearlyAmount), s)
}

// ToTopupYearlyAmountByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupYearlyAmountByCardNumber(s *db.GetYearlyTopupAmountsByCardNumberRow) *record.TopupYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupYearlyAmountByCardNumber", s)
	ret0, _ := ret[0].(*record.TopupYearlyAmount)
	return ret0
}

// ToTopupYearlyAmountByCardNumber indicates an expected call of ToTopupYearlyAmountByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupYearlyAmountByCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupYearlyAmountByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupYearlyAmountByCardNumber), s)
}

// ToTopupYearlyAmounts mocks base method.
func (m *MockTopupRecordMapping) ToTopupYearlyAmounts(s []*db.GetYearlyTopupAmountsRow) []*record.TopupYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupYearlyAmounts", s)
	ret0, _ := ret[0].([]*record.TopupYearlyAmount)
	return ret0
}

// ToTopupYearlyAmounts indicates an expected call of ToTopupYearlyAmounts.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupYearlyAmounts(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupYearlyAmounts", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupYearlyAmounts), s)
}

// ToTopupYearlyAmountsByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupYearlyAmountsByCardNumber(s []*db.GetYearlyTopupAmountsByCardNumberRow) []*record.TopupYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupYearlyAmountsByCardNumber", s)
	ret0, _ := ret[0].([]*record.TopupYearlyAmount)
	return ret0
}

// ToTopupYearlyAmountsByCardNumber indicates an expected call of ToTopupYearlyAmountsByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupYearlyAmountsByCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupYearlyAmountsByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupYearlyAmountsByCardNumber), s)
}

// ToTopupYearlyMethod mocks base method.
func (m *MockTopupRecordMapping) ToTopupYearlyMethod(s *db.GetYearlyTopupMethodsRow) *record.TopupYearlyMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupYearlyMethod", s)
	ret0, _ := ret[0].(*record.TopupYearlyMethod)
	return ret0
}

// ToTopupYearlyMethod indicates an expected call of ToTopupYearlyMethod.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupYearlyMethod(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupYearlyMethod", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupYearlyMethod), s)
}

// ToTopupYearlyMethodByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupYearlyMethodByCardNumber(s *db.GetYearlyTopupMethodsByCardNumberRow) *record.TopupYearlyMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupYearlyMethodByCardNumber", s)
	ret0, _ := ret[0].(*record.TopupYearlyMethod)
	return ret0
}

// ToTopupYearlyMethodByCardNumber indicates an expected call of ToTopupYearlyMethodByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupYearlyMethodByCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupYearlyMethodByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupYearlyMethodByCardNumber), s)
}

// ToTopupYearlyMethods mocks base method.
func (m *MockTopupRecordMapping) ToTopupYearlyMethods(s []*db.GetYearlyTopupMethodsRow) []*record.TopupYearlyMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupYearlyMethods", s)
	ret0, _ := ret[0].([]*record.TopupYearlyMethod)
	return ret0
}

// ToTopupYearlyMethods indicates an expected call of ToTopupYearlyMethods.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupYearlyMethods(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupYearlyMethods", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupYearlyMethods), s)
}

// ToTopupYearlyMethodsByCardNumber mocks base method.
func (m *MockTopupRecordMapping) ToTopupYearlyMethodsByCardNumber(s []*db.GetYearlyTopupMethodsByCardNumberRow) []*record.TopupYearlyMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTopupYearlyMethodsByCardNumber", s)
	ret0, _ := ret[0].([]*record.TopupYearlyMethod)
	return ret0
}

// ToTopupYearlyMethodsByCardNumber indicates an expected call of ToTopupYearlyMethodsByCardNumber.
func (mr *MockTopupRecordMappingMockRecorder) ToTopupYearlyMethodsByCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTopupYearlyMethodsByCardNumber", reflect.TypeOf((*MockTopupRecordMapping)(nil).ToTopupYearlyMethodsByCardNumber), s)
}

// MockTransferRecordMapping is a mock of TransferRecordMapping interface.
type MockTransferRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockTransferRecordMappingMockRecorder
	isgomock struct{}
}

// MockTransferRecordMappingMockRecorder is the mock recorder for MockTransferRecordMapping.
type MockTransferRecordMappingMockRecorder struct {
	mock *MockTransferRecordMapping
}

// NewMockTransferRecordMapping creates a new mock instance.
func NewMockTransferRecordMapping(ctrl *gomock.Controller) *MockTransferRecordMapping {
	mock := &MockTransferRecordMapping{ctrl: ctrl}
	mock.recorder = &MockTransferRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferRecordMapping) EXPECT() *MockTransferRecordMappingMockRecorder {
	return m.recorder
}

// ToTransferMonthAmount mocks base method.
func (m *MockTransferRecordMapping) ToTransferMonthAmount(ss *db.GetMonthlyTransferAmountsRow) *record.TransferMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferMonthAmount", ss)
	ret0, _ := ret[0].(*record.TransferMonthAmount)
	return ret0
}

// ToTransferMonthAmount indicates an expected call of ToTransferMonthAmount.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferMonthAmount(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferMonthAmount", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferMonthAmount), ss)
}

// ToTransferMonthAmountReceiver mocks base method.
func (m *MockTransferRecordMapping) ToTransferMonthAmountReceiver(ss *db.GetMonthlyTransferAmountsByReceiverCardNumberRow) *record.TransferMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferMonthAmountReceiver", ss)
	ret0, _ := ret[0].(*record.TransferMonthAmount)
	return ret0
}

// ToTransferMonthAmountReceiver indicates an expected call of ToTransferMonthAmountReceiver.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferMonthAmountReceiver(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferMonthAmountReceiver", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferMonthAmountReceiver), ss)
}

// ToTransferMonthAmountSender mocks base method.
func (m *MockTransferRecordMapping) ToTransferMonthAmountSender(ss *db.GetMonthlyTransferAmountsBySenderCardNumberRow) *record.TransferMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferMonthAmountSender", ss)
	ret0, _ := ret[0].(*record.TransferMonthAmount)
	return ret0
}

// ToTransferMonthAmountSender indicates an expected call of ToTransferMonthAmountSender.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferMonthAmountSender(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferMonthAmountSender", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferMonthAmountSender), ss)
}

// ToTransferMonthAmounts mocks base method.
func (m *MockTransferRecordMapping) ToTransferMonthAmounts(ss []*db.GetMonthlyTransferAmountsRow) []*record.TransferMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferMonthAmounts", ss)
	ret0, _ := ret[0].([]*record.TransferMonthAmount)
	return ret0
}

// ToTransferMonthAmounts indicates an expected call of ToTransferMonthAmounts.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferMonthAmounts(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferMonthAmounts", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferMonthAmounts), ss)
}

// ToTransferMonthAmountsReceiver mocks base method.
func (m *MockTransferRecordMapping) ToTransferMonthAmountsReceiver(ss []*db.GetMonthlyTransferAmountsByReceiverCardNumberRow) []*record.TransferMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferMonthAmountsReceiver", ss)
	ret0, _ := ret[0].([]*record.TransferMonthAmount)
	return ret0
}

// ToTransferMonthAmountsReceiver indicates an expected call of ToTransferMonthAmountsReceiver.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferMonthAmountsReceiver(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferMonthAmountsReceiver", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferMonthAmountsReceiver), ss)
}

// ToTransferMonthAmountsSender mocks base method.
func (m *MockTransferRecordMapping) ToTransferMonthAmountsSender(ss []*db.GetMonthlyTransferAmountsBySenderCardNumberRow) []*record.TransferMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferMonthAmountsSender", ss)
	ret0, _ := ret[0].([]*record.TransferMonthAmount)
	return ret0
}

// ToTransferMonthAmountsSender indicates an expected call of ToTransferMonthAmountsSender.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferMonthAmountsSender(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferMonthAmountsSender", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferMonthAmountsSender), ss)
}

// ToTransferRecord mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecord(transfer *db.Transfer) *record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecord", transfer)
	ret0, _ := ret[0].(*record.TransferRecord)
	return ret0
}

// ToTransferRecord indicates an expected call of ToTransferRecord.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecord(transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecord", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecord), transfer)
}

// ToTransferRecordActive mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordActive(transfer *db.GetActiveTransfersRow) *record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordActive", transfer)
	ret0, _ := ret[0].(*record.TransferRecord)
	return ret0
}

// ToTransferRecordActive indicates an expected call of ToTransferRecordActive.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordActive(transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordActive", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordActive), transfer)
}

// ToTransferRecordAll mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordAll(transfer *db.GetTransfersRow) *record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordAll", transfer)
	ret0, _ := ret[0].(*record.TransferRecord)
	return ret0
}

// ToTransferRecordAll indicates an expected call of ToTransferRecordAll.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordAll(transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordAll", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordAll), transfer)
}

// ToTransferRecordMonthStatusFailed mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordMonthStatusFailed(s *db.GetMonthTransferStatusFailedRow) *record.TransferRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordMonthStatusFailed", s)
	ret0, _ := ret[0].(*record.TransferRecordMonthStatusFailed)
	return ret0
}

// ToTransferRecordMonthStatusFailed indicates an expected call of ToTransferRecordMonthStatusFailed.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordMonthStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordMonthStatusFailed", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordMonthStatusFailed), s)
}

// ToTransferRecordMonthStatusFailedCardNumber mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordMonthStatusFailedCardNumber(s *db.GetMonthTransferStatusFailedCardNumberRow) *record.TransferRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordMonthStatusFailedCardNumber", s)
	ret0, _ := ret[0].(*record.TransferRecordMonthStatusFailed)
	return ret0
}

// ToTransferRecordMonthStatusFailedCardNumber indicates an expected call of ToTransferRecordMonthStatusFailedCardNumber.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordMonthStatusFailedCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordMonthStatusFailedCardNumber", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordMonthStatusFailedCardNumber), s)
}

// ToTransferRecordMonthStatusSuccess mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordMonthStatusSuccess(s *db.GetMonthTransferStatusSuccessRow) *record.TransferRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordMonthStatusSuccess", s)
	ret0, _ := ret[0].(*record.TransferRecordMonthStatusSuccess)
	return ret0
}

// ToTransferRecordMonthStatusSuccess indicates an expected call of ToTransferRecordMonthStatusSuccess.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordMonthStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordMonthStatusSuccess", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordMonthStatusSuccess), s)
}

// ToTransferRecordMonthStatusSuccessCardNumber mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordMonthStatusSuccessCardNumber(s *db.GetMonthTransferStatusSuccessCardNumberRow) *record.TransferRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordMonthStatusSuccessCardNumber", s)
	ret0, _ := ret[0].(*record.TransferRecordMonthStatusSuccess)
	return ret0
}

// ToTransferRecordMonthStatusSuccessCardNumber indicates an expected call of ToTransferRecordMonthStatusSuccessCardNumber.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordMonthStatusSuccessCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordMonthStatusSuccessCardNumber", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordMonthStatusSuccessCardNumber), s)
}

// ToTransferRecordTrashed mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordTrashed(transfer *db.GetTrashedTransfersRow) *record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordTrashed", transfer)
	ret0, _ := ret[0].(*record.TransferRecord)
	return ret0
}

// ToTransferRecordTrashed indicates an expected call of ToTransferRecordTrashed.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordTrashed(transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordTrashed", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordTrashed), transfer)
}

// ToTransferRecordYearStatusFailed mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordYearStatusFailed(s *db.GetYearlyTransferStatusFailedRow) *record.TransferRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordYearStatusFailed", s)
	ret0, _ := ret[0].(*record.TransferRecordYearStatusFailed)
	return ret0
}

// ToTransferRecordYearStatusFailed indicates an expected call of ToTransferRecordYearStatusFailed.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordYearStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordYearStatusFailed", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordYearStatusFailed), s)
}

// ToTransferRecordYearStatusFailedCardNumber mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordYearStatusFailedCardNumber(s *db.GetYearlyTransferStatusFailedCardNumberRow) *record.TransferRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordYearStatusFailedCardNumber", s)
	ret0, _ := ret[0].(*record.TransferRecordYearStatusFailed)
	return ret0
}

// ToTransferRecordYearStatusFailedCardNumber indicates an expected call of ToTransferRecordYearStatusFailedCardNumber.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordYearStatusFailedCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordYearStatusFailedCardNumber", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordYearStatusFailedCardNumber), s)
}

// ToTransferRecordYearStatusSuccess mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordYearStatusSuccess(s *db.GetYearlyTransferStatusSuccessRow) *record.TransferRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordYearStatusSuccess", s)
	ret0, _ := ret[0].(*record.TransferRecordYearStatusSuccess)
	return ret0
}

// ToTransferRecordYearStatusSuccess indicates an expected call of ToTransferRecordYearStatusSuccess.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordYearStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordYearStatusSuccess", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordYearStatusSuccess), s)
}

// ToTransferRecordYearStatusSuccessCardNumber mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordYearStatusSuccessCardNumber(s *db.GetYearlyTransferStatusSuccessCardNumberRow) *record.TransferRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordYearStatusSuccessCardNumber", s)
	ret0, _ := ret[0].(*record.TransferRecordYearStatusSuccess)
	return ret0
}

// ToTransferRecordYearStatusSuccessCardNumber indicates an expected call of ToTransferRecordYearStatusSuccessCardNumber.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordYearStatusSuccessCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordYearStatusSuccessCardNumber", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordYearStatusSuccessCardNumber), s)
}

// ToTransferRecordsMonthStatusFailed mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordsMonthStatusFailed(Transfers []*db.GetMonthTransferStatusFailedRow) []*record.TransferRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordsMonthStatusFailed", Transfers)
	ret0, _ := ret[0].([]*record.TransferRecordMonthStatusFailed)
	return ret0
}

// ToTransferRecordsMonthStatusFailed indicates an expected call of ToTransferRecordsMonthStatusFailed.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordsMonthStatusFailed(Transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordsMonthStatusFailed", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordsMonthStatusFailed), Transfers)
}

// ToTransferRecordsMonthStatusFailedCardNumber mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordsMonthStatusFailedCardNumber(Transfers []*db.GetMonthTransferStatusFailedCardNumberRow) []*record.TransferRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordsMonthStatusFailedCardNumber", Transfers)
	ret0, _ := ret[0].([]*record.TransferRecordMonthStatusFailed)
	return ret0
}

// ToTransferRecordsMonthStatusFailedCardNumber indicates an expected call of ToTransferRecordsMonthStatusFailedCardNumber.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordsMonthStatusFailedCardNumber(Transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordsMonthStatusFailedCardNumber", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordsMonthStatusFailedCardNumber), Transfers)
}

// ToTransferRecordsMonthStatusSuccess mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordsMonthStatusSuccess(Transfers []*db.GetMonthTransferStatusSuccessRow) []*record.TransferRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordsMonthStatusSuccess", Transfers)
	ret0, _ := ret[0].([]*record.TransferRecordMonthStatusSuccess)
	return ret0
}

// ToTransferRecordsMonthStatusSuccess indicates an expected call of ToTransferRecordsMonthStatusSuccess.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordsMonthStatusSuccess(Transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordsMonthStatusSuccess", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordsMonthStatusSuccess), Transfers)
}

// ToTransferRecordsMonthStatusSuccessCardNumber mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordsMonthStatusSuccessCardNumber(Transfers []*db.GetMonthTransferStatusSuccessCardNumberRow) []*record.TransferRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordsMonthStatusSuccessCardNumber", Transfers)
	ret0, _ := ret[0].([]*record.TransferRecordMonthStatusSuccess)
	return ret0
}

// ToTransferRecordsMonthStatusSuccessCardNumber indicates an expected call of ToTransferRecordsMonthStatusSuccessCardNumber.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordsMonthStatusSuccessCardNumber(Transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordsMonthStatusSuccessCardNumber", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordsMonthStatusSuccessCardNumber), Transfers)
}

// ToTransferRecordsYearStatusFailed mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordsYearStatusFailed(Transfers []*db.GetYearlyTransferStatusFailedRow) []*record.TransferRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordsYearStatusFailed", Transfers)
	ret0, _ := ret[0].([]*record.TransferRecordYearStatusFailed)
	return ret0
}

// ToTransferRecordsYearStatusFailed indicates an expected call of ToTransferRecordsYearStatusFailed.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordsYearStatusFailed(Transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordsYearStatusFailed", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordsYearStatusFailed), Transfers)
}

// ToTransferRecordsYearStatusFailedCardNumber mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordsYearStatusFailedCardNumber(Transfers []*db.GetYearlyTransferStatusFailedCardNumberRow) []*record.TransferRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordsYearStatusFailedCardNumber", Transfers)
	ret0, _ := ret[0].([]*record.TransferRecordYearStatusFailed)
	return ret0
}

// ToTransferRecordsYearStatusFailedCardNumber indicates an expected call of ToTransferRecordsYearStatusFailedCardNumber.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordsYearStatusFailedCardNumber(Transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordsYearStatusFailedCardNumber", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordsYearStatusFailedCardNumber), Transfers)
}

// ToTransferRecordsYearStatusSuccess mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordsYearStatusSuccess(Transfers []*db.GetYearlyTransferStatusSuccessRow) []*record.TransferRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordsYearStatusSuccess", Transfers)
	ret0, _ := ret[0].([]*record.TransferRecordYearStatusSuccess)
	return ret0
}

// ToTransferRecordsYearStatusSuccess indicates an expected call of ToTransferRecordsYearStatusSuccess.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordsYearStatusSuccess(Transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordsYearStatusSuccess", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordsYearStatusSuccess), Transfers)
}

// ToTransferRecordsYearStatusSuccessCardNumber mocks base method.
func (m *MockTransferRecordMapping) ToTransferRecordsYearStatusSuccessCardNumber(Transfers []*db.GetYearlyTransferStatusSuccessCardNumberRow) []*record.TransferRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferRecordsYearStatusSuccessCardNumber", Transfers)
	ret0, _ := ret[0].([]*record.TransferRecordYearStatusSuccess)
	return ret0
}

// ToTransferRecordsYearStatusSuccessCardNumber indicates an expected call of ToTransferRecordsYearStatusSuccessCardNumber.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferRecordsYearStatusSuccessCardNumber(Transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferRecordsYearStatusSuccessCardNumber", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferRecordsYearStatusSuccessCardNumber), Transfers)
}

// ToTransferYearAmount mocks base method.
func (m *MockTransferRecordMapping) ToTransferYearAmount(ss *db.GetYearlyTransferAmountsRow) *record.TransferYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferYearAmount", ss)
	ret0, _ := ret[0].(*record.TransferYearAmount)
	return ret0
}

// ToTransferYearAmount indicates an expected call of ToTransferYearAmount.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferYearAmount(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferYearAmount", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferYearAmount), ss)
}

// ToTransferYearAmountReceiver mocks base method.
func (m *MockTransferRecordMapping) ToTransferYearAmountReceiver(ss *db.GetYearlyTransferAmountsByReceiverCardNumberRow) *record.TransferYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferYearAmountReceiver", ss)
	ret0, _ := ret[0].(*record.TransferYearAmount)
	return ret0
}

// ToTransferYearAmountReceiver indicates an expected call of ToTransferYearAmountReceiver.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferYearAmountReceiver(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferYearAmountReceiver", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferYearAmountReceiver), ss)
}

// ToTransferYearAmountSender mocks base method.
func (m *MockTransferRecordMapping) ToTransferYearAmountSender(ss *db.GetYearlyTransferAmountsBySenderCardNumberRow) *record.TransferYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferYearAmountSender", ss)
	ret0, _ := ret[0].(*record.TransferYearAmount)
	return ret0
}

// ToTransferYearAmountSender indicates an expected call of ToTransferYearAmountSender.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferYearAmountSender(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferYearAmountSender", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferYearAmountSender), ss)
}

// ToTransferYearAmounts mocks base method.
func (m *MockTransferRecordMapping) ToTransferYearAmounts(ss []*db.GetYearlyTransferAmountsRow) []*record.TransferYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferYearAmounts", ss)
	ret0, _ := ret[0].([]*record.TransferYearAmount)
	return ret0
}

// ToTransferYearAmounts indicates an expected call of ToTransferYearAmounts.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferYearAmounts(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferYearAmounts", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferYearAmounts), ss)
}

// ToTransferYearAmountsReceiver mocks base method.
func (m *MockTransferRecordMapping) ToTransferYearAmountsReceiver(ss []*db.GetYearlyTransferAmountsByReceiverCardNumberRow) []*record.TransferYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferYearAmountsReceiver", ss)
	ret0, _ := ret[0].([]*record.TransferYearAmount)
	return ret0
}

// ToTransferYearAmountsReceiver indicates an expected call of ToTransferYearAmountsReceiver.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferYearAmountsReceiver(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferYearAmountsReceiver", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferYearAmountsReceiver), ss)
}

// ToTransferYearAmountsSender mocks base method.
func (m *MockTransferRecordMapping) ToTransferYearAmountsSender(ss []*db.GetYearlyTransferAmountsBySenderCardNumberRow) []*record.TransferYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransferYearAmountsSender", ss)
	ret0, _ := ret[0].([]*record.TransferYearAmount)
	return ret0
}

// ToTransferYearAmountsSender indicates an expected call of ToTransferYearAmountsSender.
func (mr *MockTransferRecordMappingMockRecorder) ToTransferYearAmountsSender(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransferYearAmountsSender", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransferYearAmountsSender), ss)
}

// ToTransfersRecord mocks base method.
func (m *MockTransferRecordMapping) ToTransfersRecord(transfers []*db.Transfer) []*record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransfersRecord", transfers)
	ret0, _ := ret[0].([]*record.TransferRecord)
	return ret0
}

// ToTransfersRecord indicates an expected call of ToTransfersRecord.
func (mr *MockTransferRecordMappingMockRecorder) ToTransfersRecord(transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransfersRecord", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransfersRecord), transfers)
}

// ToTransfersRecordActive mocks base method.
func (m *MockTransferRecordMapping) ToTransfersRecordActive(transfers []*db.GetActiveTransfersRow) []*record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransfersRecordActive", transfers)
	ret0, _ := ret[0].([]*record.TransferRecord)
	return ret0
}

// ToTransfersRecordActive indicates an expected call of ToTransfersRecordActive.
func (mr *MockTransferRecordMappingMockRecorder) ToTransfersRecordActive(transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransfersRecordActive", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransfersRecordActive), transfers)
}

// ToTransfersRecordAll mocks base method.
func (m *MockTransferRecordMapping) ToTransfersRecordAll(transfers []*db.GetTransfersRow) []*record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransfersRecordAll", transfers)
	ret0, _ := ret[0].([]*record.TransferRecord)
	return ret0
}

// ToTransfersRecordAll indicates an expected call of ToTransfersRecordAll.
func (mr *MockTransferRecordMappingMockRecorder) ToTransfersRecordAll(transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransfersRecordAll", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransfersRecordAll), transfers)
}

// ToTransfersRecordTrashed mocks base method.
func (m *MockTransferRecordMapping) ToTransfersRecordTrashed(transfers []*db.GetTrashedTransfersRow) []*record.TransferRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransfersRecordTrashed", transfers)
	ret0, _ := ret[0].([]*record.TransferRecord)
	return ret0
}

// ToTransfersRecordTrashed indicates an expected call of ToTransfersRecordTrashed.
func (mr *MockTransferRecordMappingMockRecorder) ToTransfersRecordTrashed(transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransfersRecordTrashed", reflect.TypeOf((*MockTransferRecordMapping)(nil).ToTransfersRecordTrashed), transfers)
}

// MockWithdrawRecordMapping is a mock of WithdrawRecordMapping interface.
type MockWithdrawRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawRecordMappingMockRecorder
	isgomock struct{}
}

// MockWithdrawRecordMappingMockRecorder is the mock recorder for MockWithdrawRecordMapping.
type MockWithdrawRecordMappingMockRecorder struct {
	mock *MockWithdrawRecordMapping
}

// NewMockWithdrawRecordMapping creates a new mock instance.
func NewMockWithdrawRecordMapping(ctrl *gomock.Controller) *MockWithdrawRecordMapping {
	mock := &MockWithdrawRecordMapping{ctrl: ctrl}
	mock.recorder = &MockWithdrawRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawRecordMapping) EXPECT() *MockWithdrawRecordMappingMockRecorder {
	return m.recorder
}

// ToWithdrawAmountMonthly mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawAmountMonthly(ss *db.GetMonthlyWithdrawsRow) *record.WithdrawMonthlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawAmountMonthly", ss)
	ret0, _ := ret[0].(*record.WithdrawMonthlyAmount)
	return ret0
}

// ToWithdrawAmountMonthly indicates an expected call of ToWithdrawAmountMonthly.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawAmountMonthly(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawAmountMonthly", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawAmountMonthly), ss)
}

// ToWithdrawAmountMonthlyByCardNumber mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawAmountMonthlyByCardNumber(ss *db.GetMonthlyWithdrawsByCardNumberRow) *record.WithdrawMonthlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawAmountMonthlyByCardNumber", ss)
	ret0, _ := ret[0].(*record.WithdrawMonthlyAmount)
	return ret0
}

// ToWithdrawAmountMonthlyByCardNumber indicates an expected call of ToWithdrawAmountMonthlyByCardNumber.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawAmountMonthlyByCardNumber(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawAmountMonthlyByCardNumber", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawAmountMonthlyByCardNumber), ss)
}

// ToWithdrawAmountYearly mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawAmountYearly(ss *db.GetYearlyWithdrawsRow) *record.WithdrawYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawAmountYearly", ss)
	ret0, _ := ret[0].(*record.WithdrawYearlyAmount)
	return ret0
}

// ToWithdrawAmountYearly indicates an expected call of ToWithdrawAmountYearly.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawAmountYearly(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawAmountYearly", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawAmountYearly), ss)
}

// ToWithdrawAmountYearlyByCardNumber mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawAmountYearlyByCardNumber(ss *db.GetYearlyWithdrawsByCardNumberRow) *record.WithdrawYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawAmountYearlyByCardNumber", ss)
	ret0, _ := ret[0].(*record.WithdrawYearlyAmount)
	return ret0
}

// ToWithdrawAmountYearlyByCardNumber indicates an expected call of ToWithdrawAmountYearlyByCardNumber.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawAmountYearlyByCardNumber(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawAmountYearlyByCardNumber", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawAmountYearlyByCardNumber), ss)
}

// ToWithdrawByCardNumberRecord mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawByCardNumberRecord(withdraw *db.GetWithdrawsByCardNumberRow) *record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawByCardNumberRecord", withdraw)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	return ret0
}

// ToWithdrawByCardNumberRecord indicates an expected call of ToWithdrawByCardNumberRecord.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawByCardNumberRecord(withdraw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawByCardNumberRecord", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawByCardNumberRecord), withdraw)
}

// ToWithdrawRecord mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecord(withdraw *db.Withdraw) *record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecord", withdraw)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	return ret0
}

// ToWithdrawRecord indicates an expected call of ToWithdrawRecord.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecord(withdraw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecord", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecord), withdraw)
}

// ToWithdrawRecordActive mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordActive(withdraw *db.GetActiveWithdrawsRow) *record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordActive", withdraw)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	return ret0
}

// ToWithdrawRecordActive indicates an expected call of ToWithdrawRecordActive.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordActive(withdraw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordActive", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordActive), withdraw)
}

// ToWithdrawRecordAll mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordAll(withdraw *db.GetWithdrawsRow) *record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordAll", withdraw)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	return ret0
}

// ToWithdrawRecordAll indicates an expected call of ToWithdrawRecordAll.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordAll(withdraw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordAll", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordAll), withdraw)
}

// ToWithdrawRecordMonthStatusFailed mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordMonthStatusFailed(s *db.GetMonthWithdrawStatusFailedRow) *record.WithdrawRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordMonthStatusFailed", s)
	ret0, _ := ret[0].(*record.WithdrawRecordMonthStatusFailed)
	return ret0
}

// ToWithdrawRecordMonthStatusFailed indicates an expected call of ToWithdrawRecordMonthStatusFailed.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordMonthStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordMonthStatusFailed", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordMonthStatusFailed), s)
}

// ToWithdrawRecordMonthStatusFailedCardNumber mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordMonthStatusFailedCardNumber(s *db.GetMonthWithdrawStatusFailedCardNumberRow) *record.WithdrawRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordMonthStatusFailedCardNumber", s)
	ret0, _ := ret[0].(*record.WithdrawRecordMonthStatusFailed)
	return ret0
}

// ToWithdrawRecordMonthStatusFailedCardNumber indicates an expected call of ToWithdrawRecordMonthStatusFailedCardNumber.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordMonthStatusFailedCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordMonthStatusFailedCardNumber", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordMonthStatusFailedCardNumber), s)
}

// ToWithdrawRecordMonthStatusSuccess mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordMonthStatusSuccess(s *db.GetMonthWithdrawStatusSuccessRow) *record.WithdrawRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordMonthStatusSuccess", s)
	ret0, _ := ret[0].(*record.WithdrawRecordMonthStatusSuccess)
	return ret0
}

// ToWithdrawRecordMonthStatusSuccess indicates an expected call of ToWithdrawRecordMonthStatusSuccess.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordMonthStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordMonthStatusSuccess", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordMonthStatusSuccess), s)
}

// ToWithdrawRecordMonthStatusSuccessCardNumber mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordMonthStatusSuccessCardNumber(s *db.GetMonthWithdrawStatusSuccessCardNumberRow) *record.WithdrawRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordMonthStatusSuccessCardNumber", s)
	ret0, _ := ret[0].(*record.WithdrawRecordMonthStatusSuccess)
	return ret0
}

// ToWithdrawRecordMonthStatusSuccessCardNumber indicates an expected call of ToWithdrawRecordMonthStatusSuccessCardNumber.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordMonthStatusSuccessCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordMonthStatusSuccessCardNumber", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordMonthStatusSuccessCardNumber), s)
}

// ToWithdrawRecordTrashed mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordTrashed(withdraw *db.GetTrashedWithdrawsRow) *record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordTrashed", withdraw)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	return ret0
}

// ToWithdrawRecordTrashed indicates an expected call of ToWithdrawRecordTrashed.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordTrashed(withdraw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordTrashed", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordTrashed), withdraw)
}

// ToWithdrawRecordYearStatusFailed mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordYearStatusFailed(s *db.GetYearlyWithdrawStatusFailedRow) *record.WithdrawRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordYearStatusFailed", s)
	ret0, _ := ret[0].(*record.WithdrawRecordYearStatusFailed)
	return ret0
}

// ToWithdrawRecordYearStatusFailed indicates an expected call of ToWithdrawRecordYearStatusFailed.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordYearStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordYearStatusFailed", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordYearStatusFailed), s)
}

// ToWithdrawRecordYearStatusFailedCardNumber mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordYearStatusFailedCardNumber(s *db.GetYearlyWithdrawStatusFailedCardNumberRow) *record.WithdrawRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordYearStatusFailedCardNumber", s)
	ret0, _ := ret[0].(*record.WithdrawRecordYearStatusFailed)
	return ret0
}

// ToWithdrawRecordYearStatusFailedCardNumber indicates an expected call of ToWithdrawRecordYearStatusFailedCardNumber.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordYearStatusFailedCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordYearStatusFailedCardNumber", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordYearStatusFailedCardNumber), s)
}

// ToWithdrawRecordYearStatusSuccess mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordYearStatusSuccess(s *db.GetYearlyWithdrawStatusSuccessRow) *record.WithdrawRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordYearStatusSuccess", s)
	ret0, _ := ret[0].(*record.WithdrawRecordYearStatusSuccess)
	return ret0
}

// ToWithdrawRecordYearStatusSuccess indicates an expected call of ToWithdrawRecordYearStatusSuccess.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordYearStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordYearStatusSuccess", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordYearStatusSuccess), s)
}

// ToWithdrawRecordYearStatusSuccessCardNumber mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordYearStatusSuccessCardNumber(s *db.GetYearlyWithdrawStatusSuccessCardNumberRow) *record.WithdrawRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordYearStatusSuccessCardNumber", s)
	ret0, _ := ret[0].(*record.WithdrawRecordYearStatusSuccess)
	return ret0
}

// ToWithdrawRecordYearStatusSuccessCardNumber indicates an expected call of ToWithdrawRecordYearStatusSuccessCardNumber.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordYearStatusSuccessCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordYearStatusSuccessCardNumber", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordYearStatusSuccessCardNumber), s)
}

// ToWithdrawRecordsMonthStatusFailed mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordsMonthStatusFailed(Withdraws []*db.GetMonthWithdrawStatusFailedRow) []*record.WithdrawRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordsMonthStatusFailed", Withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecordMonthStatusFailed)
	return ret0
}

// ToWithdrawRecordsMonthStatusFailed indicates an expected call of ToWithdrawRecordsMonthStatusFailed.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordsMonthStatusFailed(Withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordsMonthStatusFailed", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordsMonthStatusFailed), Withdraws)
}

// ToWithdrawRecordsMonthStatusFailedCardNumber mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordsMonthStatusFailedCardNumber(Withdraws []*db.GetMonthWithdrawStatusFailedCardNumberRow) []*record.WithdrawRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordsMonthStatusFailedCardNumber", Withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecordMonthStatusFailed)
	return ret0
}

// ToWithdrawRecordsMonthStatusFailedCardNumber indicates an expected call of ToWithdrawRecordsMonthStatusFailedCardNumber.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordsMonthStatusFailedCardNumber(Withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordsMonthStatusFailedCardNumber", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordsMonthStatusFailedCardNumber), Withdraws)
}

// ToWithdrawRecordsMonthStatusSuccess mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordsMonthStatusSuccess(Withdraws []*db.GetMonthWithdrawStatusSuccessRow) []*record.WithdrawRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordsMonthStatusSuccess", Withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecordMonthStatusSuccess)
	return ret0
}

// ToWithdrawRecordsMonthStatusSuccess indicates an expected call of ToWithdrawRecordsMonthStatusSuccess.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordsMonthStatusSuccess(Withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordsMonthStatusSuccess", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordsMonthStatusSuccess), Withdraws)
}

// ToWithdrawRecordsMonthStatusSuccessCardNumber mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordsMonthStatusSuccessCardNumber(Withdraws []*db.GetMonthWithdrawStatusSuccessCardNumberRow) []*record.WithdrawRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordsMonthStatusSuccessCardNumber", Withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecordMonthStatusSuccess)
	return ret0
}

// ToWithdrawRecordsMonthStatusSuccessCardNumber indicates an expected call of ToWithdrawRecordsMonthStatusSuccessCardNumber.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordsMonthStatusSuccessCardNumber(Withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordsMonthStatusSuccessCardNumber", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordsMonthStatusSuccessCardNumber), Withdraws)
}

// ToWithdrawRecordsYearStatusFailed mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordsYearStatusFailed(Withdraws []*db.GetYearlyWithdrawStatusFailedRow) []*record.WithdrawRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordsYearStatusFailed", Withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecordYearStatusFailed)
	return ret0
}

// ToWithdrawRecordsYearStatusFailed indicates an expected call of ToWithdrawRecordsYearStatusFailed.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordsYearStatusFailed(Withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordsYearStatusFailed", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordsYearStatusFailed), Withdraws)
}

// ToWithdrawRecordsYearStatusFailedCardNumber mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordsYearStatusFailedCardNumber(Withdraws []*db.GetYearlyWithdrawStatusFailedCardNumberRow) []*record.WithdrawRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordsYearStatusFailedCardNumber", Withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecordYearStatusFailed)
	return ret0
}

// ToWithdrawRecordsYearStatusFailedCardNumber indicates an expected call of ToWithdrawRecordsYearStatusFailedCardNumber.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordsYearStatusFailedCardNumber(Withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordsYearStatusFailedCardNumber", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordsYearStatusFailedCardNumber), Withdraws)
}

// ToWithdrawRecordsYearStatusSuccess mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordsYearStatusSuccess(Withdraws []*db.GetYearlyWithdrawStatusSuccessRow) []*record.WithdrawRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordsYearStatusSuccess", Withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecordYearStatusSuccess)
	return ret0
}

// ToWithdrawRecordsYearStatusSuccess indicates an expected call of ToWithdrawRecordsYearStatusSuccess.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordsYearStatusSuccess(Withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordsYearStatusSuccess", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordsYearStatusSuccess), Withdraws)
}

// ToWithdrawRecordsYearStatusSuccessCardNumber mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawRecordsYearStatusSuccessCardNumber(Withdraws []*db.GetYearlyWithdrawStatusSuccessCardNumberRow) []*record.WithdrawRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawRecordsYearStatusSuccessCardNumber", Withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecordYearStatusSuccess)
	return ret0
}

// ToWithdrawRecordsYearStatusSuccessCardNumber indicates an expected call of ToWithdrawRecordsYearStatusSuccessCardNumber.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawRecordsYearStatusSuccessCardNumber(Withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawRecordsYearStatusSuccessCardNumber", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawRecordsYearStatusSuccessCardNumber), Withdraws)
}

// ToWithdrawsAmountMonthly mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawsAmountMonthly(ss []*db.GetMonthlyWithdrawsRow) []*record.WithdrawMonthlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsAmountMonthly", ss)
	ret0, _ := ret[0].([]*record.WithdrawMonthlyAmount)
	return ret0
}

// ToWithdrawsAmountMonthly indicates an expected call of ToWithdrawsAmountMonthly.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawsAmountMonthly(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsAmountMonthly", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawsAmountMonthly), ss)
}

// ToWithdrawsAmountMonthlyByCardNumber mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawsAmountMonthlyByCardNumber(ss []*db.GetMonthlyWithdrawsByCardNumberRow) []*record.WithdrawMonthlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsAmountMonthlyByCardNumber", ss)
	ret0, _ := ret[0].([]*record.WithdrawMonthlyAmount)
	return ret0
}

// ToWithdrawsAmountMonthlyByCardNumber indicates an expected call of ToWithdrawsAmountMonthlyByCardNumber.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawsAmountMonthlyByCardNumber(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsAmountMonthlyByCardNumber", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawsAmountMonthlyByCardNumber), ss)
}

// ToWithdrawsAmountYearly mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawsAmountYearly(ss []*db.GetYearlyWithdrawsRow) []*record.WithdrawYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsAmountYearly", ss)
	ret0, _ := ret[0].([]*record.WithdrawYearlyAmount)
	return ret0
}

// ToWithdrawsAmountYearly indicates an expected call of ToWithdrawsAmountYearly.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawsAmountYearly(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsAmountYearly", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawsAmountYearly), ss)
}

// ToWithdrawsAmountYearlyByCardNumber mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawsAmountYearlyByCardNumber(ss []*db.GetYearlyWithdrawsByCardNumberRow) []*record.WithdrawYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsAmountYearlyByCardNumber", ss)
	ret0, _ := ret[0].([]*record.WithdrawYearlyAmount)
	return ret0
}

// ToWithdrawsAmountYearlyByCardNumber indicates an expected call of ToWithdrawsAmountYearlyByCardNumber.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawsAmountYearlyByCardNumber(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsAmountYearlyByCardNumber", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawsAmountYearlyByCardNumber), ss)
}

// ToWithdrawsByCardNumberRecord mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawsByCardNumberRecord(withdraws []*db.GetWithdrawsByCardNumberRow) []*record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsByCardNumberRecord", withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	return ret0
}

// ToWithdrawsByCardNumberRecord indicates an expected call of ToWithdrawsByCardNumberRecord.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawsByCardNumberRecord(withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsByCardNumberRecord", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawsByCardNumberRecord), withdraws)
}

// ToWithdrawsRecord mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawsRecord(withdraws []*db.Withdraw) []*record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsRecord", withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	return ret0
}

// ToWithdrawsRecord indicates an expected call of ToWithdrawsRecord.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawsRecord(withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsRecord", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawsRecord), withdraws)
}

// ToWithdrawsRecordALl mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawsRecordALl(withdraws []*db.GetWithdrawsRow) []*record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsRecordALl", withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	return ret0
}

// ToWithdrawsRecordALl indicates an expected call of ToWithdrawsRecordALl.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawsRecordALl(withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsRecordALl", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawsRecordALl), withdraws)
}

// ToWithdrawsRecordActive mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawsRecordActive(withdraws []*db.GetActiveWithdrawsRow) []*record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsRecordActive", withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	return ret0
}

// ToWithdrawsRecordActive indicates an expected call of ToWithdrawsRecordActive.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawsRecordActive(withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsRecordActive", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawsRecordActive), withdraws)
}

// ToWithdrawsRecordTrashed mocks base method.
func (m *MockWithdrawRecordMapping) ToWithdrawsRecordTrashed(withdraws []*db.GetTrashedWithdrawsRow) []*record.WithdrawRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToWithdrawsRecordTrashed", withdraws)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	return ret0
}

// ToWithdrawsRecordTrashed indicates an expected call of ToWithdrawsRecordTrashed.
func (mr *MockWithdrawRecordMappingMockRecorder) ToWithdrawsRecordTrashed(withdraws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToWithdrawsRecordTrashed", reflect.TypeOf((*MockWithdrawRecordMapping)(nil).ToWithdrawsRecordTrashed), withdraws)
}

// MockCardRecordMapping is a mock of CardRecordMapping interface.
type MockCardRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockCardRecordMappingMockRecorder
	isgomock struct{}
}

// MockCardRecordMappingMockRecorder is the mock recorder for MockCardRecordMapping.
type MockCardRecordMappingMockRecorder struct {
	mock *MockCardRecordMapping
}

// NewMockCardRecordMapping creates a new mock instance.
func NewMockCardRecordMapping(ctrl *gomock.Controller) *MockCardRecordMapping {
	mock := &MockCardRecordMapping{ctrl: ctrl}
	mock.recorder = &MockCardRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardRecordMapping) EXPECT() *MockCardRecordMappingMockRecorder {
	return m.recorder
}

// ToCardRecord mocks base method.
func (m *MockCardRecordMapping) ToCardRecord(card *db.Card) *record.CardRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardRecord", card)
	ret0, _ := ret[0].(*record.CardRecord)
	return ret0
}

// ToCardRecord indicates an expected call of ToCardRecord.
func (mr *MockCardRecordMappingMockRecorder) ToCardRecord(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardRecord", reflect.TypeOf((*MockCardRecordMapping)(nil).ToCardRecord), card)
}

// ToCardRecordActive mocks base method.
func (m *MockCardRecordMapping) ToCardRecordActive(card *db.GetActiveCardsWithCountRow) *record.CardRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardRecordActive", card)
	ret0, _ := ret[0].(*record.CardRecord)
	return ret0
}

// ToCardRecordActive indicates an expected call of ToCardRecordActive.
func (mr *MockCardRecordMappingMockRecorder) ToCardRecordActive(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardRecordActive", reflect.TypeOf((*MockCardRecordMapping)(nil).ToCardRecordActive), card)
}

// ToCardRecordTrashed mocks base method.
func (m *MockCardRecordMapping) ToCardRecordTrashed(card *db.GetTrashedCardsWithCountRow) *record.CardRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardRecordTrashed", card)
	ret0, _ := ret[0].(*record.CardRecord)
	return ret0
}

// ToCardRecordTrashed indicates an expected call of ToCardRecordTrashed.
func (mr *MockCardRecordMappingMockRecorder) ToCardRecordTrashed(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardRecordTrashed", reflect.TypeOf((*MockCardRecordMapping)(nil).ToCardRecordTrashed), card)
}

// ToCardRecordsActive mocks base method.
func (m *MockCardRecordMapping) ToCardRecordsActive(cards []*db.GetActiveCardsWithCountRow) []*record.CardRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardRecordsActive", cards)
	ret0, _ := ret[0].([]*record.CardRecord)
	return ret0
}

// ToCardRecordsActive indicates an expected call of ToCardRecordsActive.
func (mr *MockCardRecordMappingMockRecorder) ToCardRecordsActive(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardRecordsActive", reflect.TypeOf((*MockCardRecordMapping)(nil).ToCardRecordsActive), cards)
}

// ToCardRecordsTrashed mocks base method.
func (m *MockCardRecordMapping) ToCardRecordsTrashed(cards []*db.GetTrashedCardsWithCountRow) []*record.CardRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardRecordsTrashed", cards)
	ret0, _ := ret[0].([]*record.CardRecord)
	return ret0
}

// ToCardRecordsTrashed indicates an expected call of ToCardRecordsTrashed.
func (mr *MockCardRecordMappingMockRecorder) ToCardRecordsTrashed(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardRecordsTrashed", reflect.TypeOf((*MockCardRecordMapping)(nil).ToCardRecordsTrashed), cards)
}

// ToCardsRecord mocks base method.
func (m *MockCardRecordMapping) ToCardsRecord(cards []*db.GetCardsRow) []*record.CardRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToCardsRecord", cards)
	ret0, _ := ret[0].([]*record.CardRecord)
	return ret0
}

// ToCardsRecord indicates an expected call of ToCardsRecord.
func (mr *MockCardRecordMappingMockRecorder) ToCardsRecord(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCardsRecord", reflect.TypeOf((*MockCardRecordMapping)(nil).ToCardsRecord), cards)
}

// ToMonthlyBalance mocks base method.
func (m *MockCardRecordMapping) ToMonthlyBalance(card *db.GetMonthlyBalancesRow) *record.CardMonthBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyBalance", card)
	ret0, _ := ret[0].(*record.CardMonthBalance)
	return ret0
}

// ToMonthlyBalance indicates an expected call of ToMonthlyBalance.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyBalance(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyBalance", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyBalance), card)
}

// ToMonthlyBalanceCardNumber mocks base method.
func (m *MockCardRecordMapping) ToMonthlyBalanceCardNumber(card *db.GetMonthlyBalancesByCardNumberRow) *record.CardMonthBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyBalanceCardNumber", card)
	ret0, _ := ret[0].(*record.CardMonthBalance)
	return ret0
}

// ToMonthlyBalanceCardNumber indicates an expected call of ToMonthlyBalanceCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyBalanceCardNumber(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyBalanceCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyBalanceCardNumber), card)
}

// ToMonthlyBalances mocks base method.
func (m *MockCardRecordMapping) ToMonthlyBalances(cards []*db.GetMonthlyBalancesRow) []*record.CardMonthBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyBalances", cards)
	ret0, _ := ret[0].([]*record.CardMonthBalance)
	return ret0
}

// ToMonthlyBalances indicates an expected call of ToMonthlyBalances.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyBalances(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyBalances", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyBalances), cards)
}

// ToMonthlyBalancesCardNumber mocks base method.
func (m *MockCardRecordMapping) ToMonthlyBalancesCardNumber(cards []*db.GetMonthlyBalancesByCardNumberRow) []*record.CardMonthBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyBalancesCardNumber", cards)
	ret0, _ := ret[0].([]*record.CardMonthBalance)
	return ret0
}

// ToMonthlyBalancesCardNumber indicates an expected call of ToMonthlyBalancesCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyBalancesCardNumber(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyBalancesCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyBalancesCardNumber), cards)
}

// ToMonthlyTopupAmount mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTopupAmount(card *db.GetMonthlyTopupAmountRow) *record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTopupAmount", card)
	ret0, _ := ret[0].(*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTopupAmount indicates an expected call of ToMonthlyTopupAmount.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTopupAmount(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTopupAmount", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTopupAmount), card)
}

// ToMonthlyTopupAmountByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTopupAmountByCardNumber(card *db.GetMonthlyTopupAmountByCardNumberRow) *record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTopupAmountByCardNumber", card)
	ret0, _ := ret[0].(*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTopupAmountByCardNumber indicates an expected call of ToMonthlyTopupAmountByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTopupAmountByCardNumber(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTopupAmountByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTopupAmountByCardNumber), card)
}

// ToMonthlyTopupAmounts mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTopupAmounts(cards []*db.GetMonthlyTopupAmountRow) []*record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTopupAmounts", cards)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTopupAmounts indicates an expected call of ToMonthlyTopupAmounts.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTopupAmounts(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTopupAmounts", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTopupAmounts), cards)
}

// ToMonthlyTopupAmountsByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTopupAmountsByCardNumber(cards []*db.GetMonthlyTopupAmountByCardNumberRow) []*record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTopupAmountsByCardNumber", cards)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTopupAmountsByCardNumber indicates an expected call of ToMonthlyTopupAmountsByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTopupAmountsByCardNumber(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTopupAmountsByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTopupAmountsByCardNumber), cards)
}

// ToMonthlyTransactionAmount mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTransactionAmount(card *db.GetMonthlyTransactionAmountRow) *record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTransactionAmount", card)
	ret0, _ := ret[0].(*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTransactionAmount indicates an expected call of ToMonthlyTransactionAmount.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTransactionAmount(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTransactionAmount", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTransactionAmount), card)
}

// ToMonthlyTransactionAmountByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTransactionAmountByCardNumber(card *db.GetMonthlyTransactionAmountByCardNumberRow) *record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTransactionAmountByCardNumber", card)
	ret0, _ := ret[0].(*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTransactionAmountByCardNumber indicates an expected call of ToMonthlyTransactionAmountByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTransactionAmountByCardNumber(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTransactionAmountByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTransactionAmountByCardNumber), card)
}

// ToMonthlyTransactionAmounts mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTransactionAmounts(cards []*db.GetMonthlyTransactionAmountRow) []*record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTransactionAmounts", cards)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTransactionAmounts indicates an expected call of ToMonthlyTransactionAmounts.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTransactionAmounts(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTransactionAmounts", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTransactionAmounts), cards)
}

// ToMonthlyTransactionAmountsByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTransactionAmountsByCardNumber(cards []*db.GetMonthlyTransactionAmountByCardNumberRow) []*record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTransactionAmountsByCardNumber", cards)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTransactionAmountsByCardNumber indicates an expected call of ToMonthlyTransactionAmountsByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTransactionAmountsByCardNumber(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTransactionAmountsByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTransactionAmountsByCardNumber), cards)
}

// ToMonthlyTransferReceiverAmount mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTransferReceiverAmount(card *db.GetMonthlyTransferAmountReceiverRow) *record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTransferReceiverAmount", card)
	ret0, _ := ret[0].(*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTransferReceiverAmount indicates an expected call of ToMonthlyTransferReceiverAmount.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTransferReceiverAmount(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTransferReceiverAmount", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTransferReceiverAmount), card)
}

// ToMonthlyTransferReceiverAmountByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTransferReceiverAmountByCardNumber(card *db.GetMonthlyTransferAmountByReceiverRow) *record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTransferReceiverAmountByCardNumber", card)
	ret0, _ := ret[0].(*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTransferReceiverAmountByCardNumber indicates an expected call of ToMonthlyTransferReceiverAmountByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTransferReceiverAmountByCardNumber(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTransferReceiverAmountByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTransferReceiverAmountByCardNumber), card)
}

// ToMonthlyTransferReceiverAmounts mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTransferReceiverAmounts(cards []*db.GetMonthlyTransferAmountReceiverRow) []*record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTransferReceiverAmounts", cards)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTransferReceiverAmounts indicates an expected call of ToMonthlyTransferReceiverAmounts.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTransferReceiverAmounts(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTransferReceiverAmounts", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTransferReceiverAmounts), cards)
}

// ToMonthlyTransferReceiverAmountsByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTransferReceiverAmountsByCardNumber(cards []*db.GetMonthlyTransferAmountByReceiverRow) []*record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTransferReceiverAmountsByCardNumber", cards)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTransferReceiverAmountsByCardNumber indicates an expected call of ToMonthlyTransferReceiverAmountsByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTransferReceiverAmountsByCardNumber(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTransferReceiverAmountsByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTransferReceiverAmountsByCardNumber), cards)
}

// ToMonthlyTransferSenderAmount mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTransferSenderAmount(card *db.GetMonthlyTransferAmountSenderRow) *record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTransferSenderAmount", card)
	ret0, _ := ret[0].(*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTransferSenderAmount indicates an expected call of ToMonthlyTransferSenderAmount.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTransferSenderAmount(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTransferSenderAmount", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTransferSenderAmount), card)
}

// ToMonthlyTransferSenderAmountByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTransferSenderAmountByCardNumber(card *db.GetMonthlyTransferAmountBySenderRow) *record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTransferSenderAmountByCardNumber", card)
	ret0, _ := ret[0].(*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTransferSenderAmountByCardNumber indicates an expected call of ToMonthlyTransferSenderAmountByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTransferSenderAmountByCardNumber(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTransferSenderAmountByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTransferSenderAmountByCardNumber), card)
}

// ToMonthlyTransferSenderAmounts mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTransferSenderAmounts(cards []*db.GetMonthlyTransferAmountSenderRow) []*record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTransferSenderAmounts", cards)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTransferSenderAmounts indicates an expected call of ToMonthlyTransferSenderAmounts.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTransferSenderAmounts(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTransferSenderAmounts", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTransferSenderAmounts), cards)
}

// ToMonthlyTransferSenderAmountsByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToMonthlyTransferSenderAmountsByCardNumber(cards []*db.GetMonthlyTransferAmountBySenderRow) []*record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyTransferSenderAmountsByCardNumber", cards)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	return ret0
}

// ToMonthlyTransferSenderAmountsByCardNumber indicates an expected call of ToMonthlyTransferSenderAmountsByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyTransferSenderAmountsByCardNumber(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyTransferSenderAmountsByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyTransferSenderAmountsByCardNumber), cards)
}

// ToMonthlyWithdrawAmount mocks base method.
func (m *MockCardRecordMapping) ToMonthlyWithdrawAmount(card *db.GetMonthlyWithdrawAmountRow) *record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyWithdrawAmount", card)
	ret0, _ := ret[0].(*record.CardMonthAmount)
	return ret0
}

// ToMonthlyWithdrawAmount indicates an expected call of ToMonthlyWithdrawAmount.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyWithdrawAmount(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyWithdrawAmount", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyWithdrawAmount), card)
}

// ToMonthlyWithdrawAmountByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToMonthlyWithdrawAmountByCardNumber(card *db.GetMonthlyWithdrawAmountByCardNumberRow) *record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyWithdrawAmountByCardNumber", card)
	ret0, _ := ret[0].(*record.CardMonthAmount)
	return ret0
}

// ToMonthlyWithdrawAmountByCardNumber indicates an expected call of ToMonthlyWithdrawAmountByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyWithdrawAmountByCardNumber(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyWithdrawAmountByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyWithdrawAmountByCardNumber), card)
}

// ToMonthlyWithdrawAmounts mocks base method.
func (m *MockCardRecordMapping) ToMonthlyWithdrawAmounts(cards []*db.GetMonthlyWithdrawAmountRow) []*record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyWithdrawAmounts", cards)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	return ret0
}

// ToMonthlyWithdrawAmounts indicates an expected call of ToMonthlyWithdrawAmounts.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyWithdrawAmounts(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyWithdrawAmounts", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyWithdrawAmounts), cards)
}

// ToMonthlyWithdrawAmountsByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToMonthlyWithdrawAmountsByCardNumber(cards []*db.GetMonthlyWithdrawAmountByCardNumberRow) []*record.CardMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMonthlyWithdrawAmountsByCardNumber", cards)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	return ret0
}

// ToMonthlyWithdrawAmountsByCardNumber indicates an expected call of ToMonthlyWithdrawAmountsByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToMonthlyWithdrawAmountsByCardNumber(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMonthlyWithdrawAmountsByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToMonthlyWithdrawAmountsByCardNumber), cards)
}

// ToYearlyBalance mocks base method.
func (m *MockCardRecordMapping) ToYearlyBalance(card *db.GetYearlyBalancesRow) *record.CardYearlyBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyBalance", card)
	ret0, _ := ret[0].(*record.CardYearlyBalance)
	return ret0
}

// ToYearlyBalance indicates an expected call of ToYearlyBalance.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyBalance(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyBalance", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyBalance), card)
}

// ToYearlyBalanceCardNumber mocks base method.
func (m *MockCardRecordMapping) ToYearlyBalanceCardNumber(card *db.GetYearlyBalancesByCardNumberRow) *record.CardYearlyBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyBalanceCardNumber", card)
	ret0, _ := ret[0].(*record.CardYearlyBalance)
	return ret0
}

// ToYearlyBalanceCardNumber indicates an expected call of ToYearlyBalanceCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyBalanceCardNumber(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyBalanceCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyBalanceCardNumber), card)
}

// ToYearlyBalances mocks base method.
func (m *MockCardRecordMapping) ToYearlyBalances(cards []*db.GetYearlyBalancesRow) []*record.CardYearlyBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyBalances", cards)
	ret0, _ := ret[0].([]*record.CardYearlyBalance)
	return ret0
}

// ToYearlyBalances indicates an expected call of ToYearlyBalances.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyBalances(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyBalances", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyBalances), cards)
}

// ToYearlyBalancesCardNumber mocks base method.
func (m *MockCardRecordMapping) ToYearlyBalancesCardNumber(cards []*db.GetYearlyBalancesByCardNumberRow) []*record.CardYearlyBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyBalancesCardNumber", cards)
	ret0, _ := ret[0].([]*record.CardYearlyBalance)
	return ret0
}

// ToYearlyBalancesCardNumber indicates an expected call of ToYearlyBalancesCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyBalancesCardNumber(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyBalancesCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyBalancesCardNumber), cards)
}

// ToYearlyTopupAmount mocks base method.
func (m *MockCardRecordMapping) ToYearlyTopupAmount(card *db.GetYearlyTopupAmountRow) *record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTopupAmount", card)
	ret0, _ := ret[0].(*record.CardYearAmount)
	return ret0
}

// ToYearlyTopupAmount indicates an expected call of ToYearlyTopupAmount.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTopupAmount(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTopupAmount", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTopupAmount), card)
}

// ToYearlyTopupAmountByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToYearlyTopupAmountByCardNumber(card *db.GetYearlyTopupAmountByCardNumberRow) *record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTopupAmountByCardNumber", card)
	ret0, _ := ret[0].(*record.CardYearAmount)
	return ret0
}

// ToYearlyTopupAmountByCardNumber indicates an expected call of ToYearlyTopupAmountByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTopupAmountByCardNumber(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTopupAmountByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTopupAmountByCardNumber), card)
}

// ToYearlyTopupAmounts mocks base method.
func (m *MockCardRecordMapping) ToYearlyTopupAmounts(cards []*db.GetYearlyTopupAmountRow) []*record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTopupAmounts", cards)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	return ret0
}

// ToYearlyTopupAmounts indicates an expected call of ToYearlyTopupAmounts.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTopupAmounts(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTopupAmounts", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTopupAmounts), cards)
}

// ToYearlyTopupAmountsByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToYearlyTopupAmountsByCardNumber(cards []*db.GetYearlyTopupAmountByCardNumberRow) []*record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTopupAmountsByCardNumber", cards)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	return ret0
}

// ToYearlyTopupAmountsByCardNumber indicates an expected call of ToYearlyTopupAmountsByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTopupAmountsByCardNumber(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTopupAmountsByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTopupAmountsByCardNumber), cards)
}

// ToYearlyTransactionAmount mocks base method.
func (m *MockCardRecordMapping) ToYearlyTransactionAmount(card *db.GetYearlyTransactionAmountRow) *record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTransactionAmount", card)
	ret0, _ := ret[0].(*record.CardYearAmount)
	return ret0
}

// ToYearlyTransactionAmount indicates an expected call of ToYearlyTransactionAmount.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTransactionAmount(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTransactionAmount", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTransactionAmount), card)
}

// ToYearlyTransactionAmountByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToYearlyTransactionAmountByCardNumber(card *db.GetYearlyTransactionAmountByCardNumberRow) *record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTransactionAmountByCardNumber", card)
	ret0, _ := ret[0].(*record.CardYearAmount)
	return ret0
}

// ToYearlyTransactionAmountByCardNumber indicates an expected call of ToYearlyTransactionAmountByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTransactionAmountByCardNumber(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTransactionAmountByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTransactionAmountByCardNumber), card)
}

// ToYearlyTransactionAmounts mocks base method.
func (m *MockCardRecordMapping) ToYearlyTransactionAmounts(cards []*db.GetYearlyTransactionAmountRow) []*record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTransactionAmounts", cards)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	return ret0
}

// ToYearlyTransactionAmounts indicates an expected call of ToYearlyTransactionAmounts.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTransactionAmounts(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTransactionAmounts", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTransactionAmounts), cards)
}

// ToYearlyTransactionAmountsByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToYearlyTransactionAmountsByCardNumber(cards []*db.GetYearlyTransactionAmountByCardNumberRow) []*record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTransactionAmountsByCardNumber", cards)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	return ret0
}

// ToYearlyTransactionAmountsByCardNumber indicates an expected call of ToYearlyTransactionAmountsByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTransactionAmountsByCardNumber(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTransactionAmountsByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTransactionAmountsByCardNumber), cards)
}

// ToYearlyTransferReceiverAmount mocks base method.
func (m *MockCardRecordMapping) ToYearlyTransferReceiverAmount(card *db.GetYearlyTransferAmountReceiverRow) *record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTransferReceiverAmount", card)
	ret0, _ := ret[0].(*record.CardYearAmount)
	return ret0
}

// ToYearlyTransferReceiverAmount indicates an expected call of ToYearlyTransferReceiverAmount.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTransferReceiverAmount(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTransferReceiverAmount", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTransferReceiverAmount), card)
}

// ToYearlyTransferReceiverAmountByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToYearlyTransferReceiverAmountByCardNumber(card *db.GetYearlyTransferAmountByReceiverRow) *record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTransferReceiverAmountByCardNumber", card)
	ret0, _ := ret[0].(*record.CardYearAmount)
	return ret0
}

// ToYearlyTransferReceiverAmountByCardNumber indicates an expected call of ToYearlyTransferReceiverAmountByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTransferReceiverAmountByCardNumber(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTransferReceiverAmountByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTransferReceiverAmountByCardNumber), card)
}

// ToYearlyTransferReceiverAmounts mocks base method.
func (m *MockCardRecordMapping) ToYearlyTransferReceiverAmounts(cards []*db.GetYearlyTransferAmountReceiverRow) []*record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTransferReceiverAmounts", cards)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	return ret0
}

// ToYearlyTransferReceiverAmounts indicates an expected call of ToYearlyTransferReceiverAmounts.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTransferReceiverAmounts(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTransferReceiverAmounts", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTransferReceiverAmounts), cards)
}

// ToYearlyTransferReceiverAmountsByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToYearlyTransferReceiverAmountsByCardNumber(cards []*db.GetYearlyTransferAmountByReceiverRow) []*record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTransferReceiverAmountsByCardNumber", cards)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	return ret0
}

// ToYearlyTransferReceiverAmountsByCardNumber indicates an expected call of ToYearlyTransferReceiverAmountsByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTransferReceiverAmountsByCardNumber(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTransferReceiverAmountsByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTransferReceiverAmountsByCardNumber), cards)
}

// ToYearlyTransferSenderAmount mocks base method.
func (m *MockCardRecordMapping) ToYearlyTransferSenderAmount(card *db.GetYearlyTransferAmountSenderRow) *record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTransferSenderAmount", card)
	ret0, _ := ret[0].(*record.CardYearAmount)
	return ret0
}

// ToYearlyTransferSenderAmount indicates an expected call of ToYearlyTransferSenderAmount.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTransferSenderAmount(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTransferSenderAmount", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTransferSenderAmount), card)
}

// ToYearlyTransferSenderAmountByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToYearlyTransferSenderAmountByCardNumber(card *db.GetYearlyTransferAmountBySenderRow) *record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTransferSenderAmountByCardNumber", card)
	ret0, _ := ret[0].(*record.CardYearAmount)
	return ret0
}

// ToYearlyTransferSenderAmountByCardNumber indicates an expected call of ToYearlyTransferSenderAmountByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTransferSenderAmountByCardNumber(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTransferSenderAmountByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTransferSenderAmountByCardNumber), card)
}

// ToYearlyTransferSenderAmounts mocks base method.
func (m *MockCardRecordMapping) ToYearlyTransferSenderAmounts(cards []*db.GetYearlyTransferAmountSenderRow) []*record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTransferSenderAmounts", cards)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	return ret0
}

// ToYearlyTransferSenderAmounts indicates an expected call of ToYearlyTransferSenderAmounts.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTransferSenderAmounts(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTransferSenderAmounts", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTransferSenderAmounts), cards)
}

// ToYearlyTransferSenderAmountsByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToYearlyTransferSenderAmountsByCardNumber(cards []*db.GetYearlyTransferAmountBySenderRow) []*record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyTransferSenderAmountsByCardNumber", cards)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	return ret0
}

// ToYearlyTransferSenderAmountsByCardNumber indicates an expected call of ToYearlyTransferSenderAmountsByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyTransferSenderAmountsByCardNumber(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyTransferSenderAmountsByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyTransferSenderAmountsByCardNumber), cards)
}

// ToYearlyWithdrawAmount mocks base method.
func (m *MockCardRecordMapping) ToYearlyWithdrawAmount(card *db.GetYearlyWithdrawAmountRow) *record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyWithdrawAmount", card)
	ret0, _ := ret[0].(*record.CardYearAmount)
	return ret0
}

// ToYearlyWithdrawAmount indicates an expected call of ToYearlyWithdrawAmount.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyWithdrawAmount(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyWithdrawAmount", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyWithdrawAmount), card)
}

// ToYearlyWithdrawAmountByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToYearlyWithdrawAmountByCardNumber(card *db.GetYearlyWithdrawAmountByCardNumberRow) *record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyWithdrawAmountByCardNumber", card)
	ret0, _ := ret[0].(*record.CardYearAmount)
	return ret0
}

// ToYearlyWithdrawAmountByCardNumber indicates an expected call of ToYearlyWithdrawAmountByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyWithdrawAmountByCardNumber(card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyWithdrawAmountByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyWithdrawAmountByCardNumber), card)
}

// ToYearlyWithdrawAmounts mocks base method.
func (m *MockCardRecordMapping) ToYearlyWithdrawAmounts(cards []*db.GetYearlyWithdrawAmountRow) []*record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyWithdrawAmounts", cards)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	return ret0
}

// ToYearlyWithdrawAmounts indicates an expected call of ToYearlyWithdrawAmounts.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyWithdrawAmounts(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyWithdrawAmounts", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyWithdrawAmounts), cards)
}

// ToYearlyWithdrawAmountsByCardNumber mocks base method.
func (m *MockCardRecordMapping) ToYearlyWithdrawAmountsByCardNumber(cards []*db.GetYearlyWithdrawAmountByCardNumberRow) []*record.CardYearAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYearlyWithdrawAmountsByCardNumber", cards)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	return ret0
}

// ToYearlyWithdrawAmountsByCardNumber indicates an expected call of ToYearlyWithdrawAmountsByCardNumber.
func (mr *MockCardRecordMappingMockRecorder) ToYearlyWithdrawAmountsByCardNumber(cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYearlyWithdrawAmountsByCardNumber", reflect.TypeOf((*MockCardRecordMapping)(nil).ToYearlyWithdrawAmountsByCardNumber), cards)
}

// MockTransactionRecordMapping is a mock of TransactionRecordMapping interface.
type MockTransactionRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRecordMappingMockRecorder
	isgomock struct{}
}

// MockTransactionRecordMappingMockRecorder is the mock recorder for MockTransactionRecordMapping.
type MockTransactionRecordMappingMockRecorder struct {
	mock *MockTransactionRecordMapping
}

// NewMockTransactionRecordMapping creates a new mock instance.
func NewMockTransactionRecordMapping(ctrl *gomock.Controller) *MockTransactionRecordMapping {
	mock := &MockTransactionRecordMapping{ctrl: ctrl}
	mock.recorder = &MockTransactionRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRecordMapping) EXPECT() *MockTransactionRecordMappingMockRecorder {
	return m.recorder
}

// ToTransactionByCardNumberRecord mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionByCardNumberRecord(transaction *db.GetTransactionsByCardNumberRow) *record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionByCardNumberRecord", transaction)
	ret0, _ := ret[0].(*record.TransactionRecord)
	return ret0
}

// ToTransactionByCardNumberRecord indicates an expected call of ToTransactionByCardNumberRecord.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionByCardNumberRecord(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionByCardNumberRecord", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionByCardNumberRecord), transaction)
}

// ToTransactionMonthlyAmount mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionMonthlyAmount(ss *db.GetMonthlyAmountsRow) *record.TransactionMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionMonthlyAmount", ss)
	ret0, _ := ret[0].(*record.TransactionMonthAmount)
	return ret0
}

// ToTransactionMonthlyAmount indicates an expected call of ToTransactionMonthlyAmount.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionMonthlyAmount(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionMonthlyAmount", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionMonthlyAmount), ss)
}

// ToTransactionMonthlyAmountByCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionMonthlyAmountByCardNumber(ss *db.GetMonthlyAmountsByCardNumberRow) *record.TransactionMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionMonthlyAmountByCardNumber", ss)
	ret0, _ := ret[0].(*record.TransactionMonthAmount)
	return ret0
}

// ToTransactionMonthlyAmountByCardNumber indicates an expected call of ToTransactionMonthlyAmountByCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionMonthlyAmountByCardNumber(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionMonthlyAmountByCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionMonthlyAmountByCardNumber), ss)
}

// ToTransactionMonthlyAmounts mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionMonthlyAmounts(ss []*db.GetMonthlyAmountsRow) []*record.TransactionMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionMonthlyAmounts", ss)
	ret0, _ := ret[0].([]*record.TransactionMonthAmount)
	return ret0
}

// ToTransactionMonthlyAmounts indicates an expected call of ToTransactionMonthlyAmounts.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionMonthlyAmounts(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionMonthlyAmounts", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionMonthlyAmounts), ss)
}

// ToTransactionMonthlyAmountsByCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionMonthlyAmountsByCardNumber(ss []*db.GetMonthlyAmountsByCardNumberRow) []*record.TransactionMonthAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionMonthlyAmountsByCardNumber", ss)
	ret0, _ := ret[0].([]*record.TransactionMonthAmount)
	return ret0
}

// ToTransactionMonthlyAmountsByCardNumber indicates an expected call of ToTransactionMonthlyAmountsByCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionMonthlyAmountsByCardNumber(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionMonthlyAmountsByCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionMonthlyAmountsByCardNumber), ss)
}

// ToTransactionMonthlyMethod mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionMonthlyMethod(ss *db.GetMonthlyPaymentMethodsRow) *record.TransactionMonthMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionMonthlyMethod", ss)
	ret0, _ := ret[0].(*record.TransactionMonthMethod)
	return ret0
}

// ToTransactionMonthlyMethod indicates an expected call of ToTransactionMonthlyMethod.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionMonthlyMethod(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionMonthlyMethod", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionMonthlyMethod), ss)
}

// ToTransactionMonthlyMethodByCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionMonthlyMethodByCardNumber(ss *db.GetMonthlyPaymentMethodsByCardNumberRow) *record.TransactionMonthMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionMonthlyMethodByCardNumber", ss)
	ret0, _ := ret[0].(*record.TransactionMonthMethod)
	return ret0
}

// ToTransactionMonthlyMethodByCardNumber indicates an expected call of ToTransactionMonthlyMethodByCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionMonthlyMethodByCardNumber(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionMonthlyMethodByCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionMonthlyMethodByCardNumber), ss)
}

// ToTransactionMonthlyMethods mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionMonthlyMethods(ss []*db.GetMonthlyPaymentMethodsRow) []*record.TransactionMonthMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionMonthlyMethods", ss)
	ret0, _ := ret[0].([]*record.TransactionMonthMethod)
	return ret0
}

// ToTransactionMonthlyMethods indicates an expected call of ToTransactionMonthlyMethods.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionMonthlyMethods(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionMonthlyMethods", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionMonthlyMethods), ss)
}

// ToTransactionMonthlyMethodsByCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionMonthlyMethodsByCardNumber(ss []*db.GetMonthlyPaymentMethodsByCardNumberRow) []*record.TransactionMonthMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionMonthlyMethodsByCardNumber", ss)
	ret0, _ := ret[0].([]*record.TransactionMonthMethod)
	return ret0
}

// ToTransactionMonthlyMethodsByCardNumber indicates an expected call of ToTransactionMonthlyMethodsByCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionMonthlyMethodsByCardNumber(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionMonthlyMethodsByCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionMonthlyMethodsByCardNumber), ss)
}

// ToTransactionRecord mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecord(transaction *db.Transaction) *record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecord", transaction)
	ret0, _ := ret[0].(*record.TransactionRecord)
	return ret0
}

// ToTransactionRecord indicates an expected call of ToTransactionRecord.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecord(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecord", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecord), transaction)
}

// ToTransactionRecordActive mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordActive(transaction *db.GetActiveTransactionsRow) *record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordActive", transaction)
	ret0, _ := ret[0].(*record.TransactionRecord)
	return ret0
}

// ToTransactionRecordActive indicates an expected call of ToTransactionRecordActive.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordActive(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordActive", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordActive), transaction)
}

// ToTransactionRecordAll mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordAll(transaction *db.GetTransactionsRow) *record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordAll", transaction)
	ret0, _ := ret[0].(*record.TransactionRecord)
	return ret0
}

// ToTransactionRecordAll indicates an expected call of ToTransactionRecordAll.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordAll(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordAll", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordAll), transaction)
}

// ToTransactionRecordMonthStatusFailed mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordMonthStatusFailed(s *db.GetMonthTransactionStatusFailedRow) *record.TransactionRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordMonthStatusFailed", s)
	ret0, _ := ret[0].(*record.TransactionRecordMonthStatusFailed)
	return ret0
}

// ToTransactionRecordMonthStatusFailed indicates an expected call of ToTransactionRecordMonthStatusFailed.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordMonthStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordMonthStatusFailed", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordMonthStatusFailed), s)
}

// ToTransactionRecordMonthStatusFailedCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordMonthStatusFailedCardNumber(s *db.GetMonthTransactionStatusFailedCardNumberRow) *record.TransactionRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordMonthStatusFailedCardNumber", s)
	ret0, _ := ret[0].(*record.TransactionRecordMonthStatusFailed)
	return ret0
}

// ToTransactionRecordMonthStatusFailedCardNumber indicates an expected call of ToTransactionRecordMonthStatusFailedCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordMonthStatusFailedCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordMonthStatusFailedCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordMonthStatusFailedCardNumber), s)
}

// ToTransactionRecordMonthStatusSuccess mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordMonthStatusSuccess(s *db.GetMonthTransactionStatusSuccessRow) *record.TransactionRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordMonthStatusSuccess", s)
	ret0, _ := ret[0].(*record.TransactionRecordMonthStatusSuccess)
	return ret0
}

// ToTransactionRecordMonthStatusSuccess indicates an expected call of ToTransactionRecordMonthStatusSuccess.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordMonthStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordMonthStatusSuccess", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordMonthStatusSuccess), s)
}

// ToTransactionRecordMonthStatusSuccessCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordMonthStatusSuccessCardNumber(s *db.GetMonthTransactionStatusSuccessCardNumberRow) *record.TransactionRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordMonthStatusSuccessCardNumber", s)
	ret0, _ := ret[0].(*record.TransactionRecordMonthStatusSuccess)
	return ret0
}

// ToTransactionRecordMonthStatusSuccessCardNumber indicates an expected call of ToTransactionRecordMonthStatusSuccessCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordMonthStatusSuccessCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordMonthStatusSuccessCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordMonthStatusSuccessCardNumber), s)
}

// ToTransactionRecordTrashed mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordTrashed(transaction *db.GetTrashedTransactionsRow) *record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordTrashed", transaction)
	ret0, _ := ret[0].(*record.TransactionRecord)
	return ret0
}

// ToTransactionRecordTrashed indicates an expected call of ToTransactionRecordTrashed.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordTrashed(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordTrashed", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordTrashed), transaction)
}

// ToTransactionRecordYearStatusFailed mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordYearStatusFailed(s *db.GetYearlyTransactionStatusFailedRow) *record.TransactionRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordYearStatusFailed", s)
	ret0, _ := ret[0].(*record.TransactionRecordYearStatusFailed)
	return ret0
}

// ToTransactionRecordYearStatusFailed indicates an expected call of ToTransactionRecordYearStatusFailed.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordYearStatusFailed(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordYearStatusFailed", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordYearStatusFailed), s)
}

// ToTransactionRecordYearStatusFailedCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordYearStatusFailedCardNumber(s *db.GetYearlyTransactionStatusFailedCardNumberRow) *record.TransactionRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordYearStatusFailedCardNumber", s)
	ret0, _ := ret[0].(*record.TransactionRecordYearStatusFailed)
	return ret0
}

// ToTransactionRecordYearStatusFailedCardNumber indicates an expected call of ToTransactionRecordYearStatusFailedCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordYearStatusFailedCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordYearStatusFailedCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordYearStatusFailedCardNumber), s)
}

// ToTransactionRecordYearStatusSuccess mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordYearStatusSuccess(s *db.GetYearlyTransactionStatusSuccessRow) *record.TransactionRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordYearStatusSuccess", s)
	ret0, _ := ret[0].(*record.TransactionRecordYearStatusSuccess)
	return ret0
}

// ToTransactionRecordYearStatusSuccess indicates an expected call of ToTransactionRecordYearStatusSuccess.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordYearStatusSuccess(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordYearStatusSuccess", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordYearStatusSuccess), s)
}

// ToTransactionRecordYearStatusSuccessCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordYearStatusSuccessCardNumber(s *db.GetYearlyTransactionStatusSuccessCardNumberRow) *record.TransactionRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordYearStatusSuccessCardNumber", s)
	ret0, _ := ret[0].(*record.TransactionRecordYearStatusSuccess)
	return ret0
}

// ToTransactionRecordYearStatusSuccessCardNumber indicates an expected call of ToTransactionRecordYearStatusSuccessCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordYearStatusSuccessCardNumber(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordYearStatusSuccessCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordYearStatusSuccessCardNumber), s)
}

// ToTransactionRecordsMonthStatusFailed mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordsMonthStatusFailed(Transactions []*db.GetMonthTransactionStatusFailedRow) []*record.TransactionRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordsMonthStatusFailed", Transactions)
	ret0, _ := ret[0].([]*record.TransactionRecordMonthStatusFailed)
	return ret0
}

// ToTransactionRecordsMonthStatusFailed indicates an expected call of ToTransactionRecordsMonthStatusFailed.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordsMonthStatusFailed(Transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordsMonthStatusFailed", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordsMonthStatusFailed), Transactions)
}

// ToTransactionRecordsMonthStatusFailedCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordsMonthStatusFailedCardNumber(Transactions []*db.GetMonthTransactionStatusFailedCardNumberRow) []*record.TransactionRecordMonthStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordsMonthStatusFailedCardNumber", Transactions)
	ret0, _ := ret[0].([]*record.TransactionRecordMonthStatusFailed)
	return ret0
}

// ToTransactionRecordsMonthStatusFailedCardNumber indicates an expected call of ToTransactionRecordsMonthStatusFailedCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordsMonthStatusFailedCardNumber(Transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordsMonthStatusFailedCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordsMonthStatusFailedCardNumber), Transactions)
}

// ToTransactionRecordsMonthStatusSuccess mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordsMonthStatusSuccess(Transactions []*db.GetMonthTransactionStatusSuccessRow) []*record.TransactionRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordsMonthStatusSuccess", Transactions)
	ret0, _ := ret[0].([]*record.TransactionRecordMonthStatusSuccess)
	return ret0
}

// ToTransactionRecordsMonthStatusSuccess indicates an expected call of ToTransactionRecordsMonthStatusSuccess.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordsMonthStatusSuccess(Transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordsMonthStatusSuccess", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordsMonthStatusSuccess), Transactions)
}

// ToTransactionRecordsMonthStatusSuccessCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordsMonthStatusSuccessCardNumber(Transactions []*db.GetMonthTransactionStatusSuccessCardNumberRow) []*record.TransactionRecordMonthStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordsMonthStatusSuccessCardNumber", Transactions)
	ret0, _ := ret[0].([]*record.TransactionRecordMonthStatusSuccess)
	return ret0
}

// ToTransactionRecordsMonthStatusSuccessCardNumber indicates an expected call of ToTransactionRecordsMonthStatusSuccessCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordsMonthStatusSuccessCardNumber(Transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordsMonthStatusSuccessCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordsMonthStatusSuccessCardNumber), Transactions)
}

// ToTransactionRecordsYearStatusFailed mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordsYearStatusFailed(Transactions []*db.GetYearlyTransactionStatusFailedRow) []*record.TransactionRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordsYearStatusFailed", Transactions)
	ret0, _ := ret[0].([]*record.TransactionRecordYearStatusFailed)
	return ret0
}

// ToTransactionRecordsYearStatusFailed indicates an expected call of ToTransactionRecordsYearStatusFailed.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordsYearStatusFailed(Transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordsYearStatusFailed", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordsYearStatusFailed), Transactions)
}

// ToTransactionRecordsYearStatusFailedCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordsYearStatusFailedCardNumber(Transactions []*db.GetYearlyTransactionStatusFailedCardNumberRow) []*record.TransactionRecordYearStatusFailed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordsYearStatusFailedCardNumber", Transactions)
	ret0, _ := ret[0].([]*record.TransactionRecordYearStatusFailed)
	return ret0
}

// ToTransactionRecordsYearStatusFailedCardNumber indicates an expected call of ToTransactionRecordsYearStatusFailedCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordsYearStatusFailedCardNumber(Transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordsYearStatusFailedCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordsYearStatusFailedCardNumber), Transactions)
}

// ToTransactionRecordsYearStatusSuccess mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordsYearStatusSuccess(Transactions []*db.GetYearlyTransactionStatusSuccessRow) []*record.TransactionRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordsYearStatusSuccess", Transactions)
	ret0, _ := ret[0].([]*record.TransactionRecordYearStatusSuccess)
	return ret0
}

// ToTransactionRecordsYearStatusSuccess indicates an expected call of ToTransactionRecordsYearStatusSuccess.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordsYearStatusSuccess(Transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordsYearStatusSuccess", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordsYearStatusSuccess), Transactions)
}

// ToTransactionRecordsYearStatusSuccessCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionRecordsYearStatusSuccessCardNumber(Transactions []*db.GetYearlyTransactionStatusSuccessCardNumberRow) []*record.TransactionRecordYearStatusSuccess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionRecordsYearStatusSuccessCardNumber", Transactions)
	ret0, _ := ret[0].([]*record.TransactionRecordYearStatusSuccess)
	return ret0
}

// ToTransactionRecordsYearStatusSuccessCardNumber indicates an expected call of ToTransactionRecordsYearStatusSuccessCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionRecordsYearStatusSuccessCardNumber(Transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionRecordsYearStatusSuccessCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionRecordsYearStatusSuccessCardNumber), Transactions)
}

// ToTransactionYearlyAmount mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionYearlyAmount(ss *db.GetYearlyAmountsRow) *record.TransactionYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionYearlyAmount", ss)
	ret0, _ := ret[0].(*record.TransactionYearlyAmount)
	return ret0
}

// ToTransactionYearlyAmount indicates an expected call of ToTransactionYearlyAmount.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionYearlyAmount(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionYearlyAmount", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionYearlyAmount), ss)
}

// ToTransactionYearlyAmountByCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionYearlyAmountByCardNumber(ss *db.GetYearlyAmountsByCardNumberRow) *record.TransactionYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionYearlyAmountByCardNumber", ss)
	ret0, _ := ret[0].(*record.TransactionYearlyAmount)
	return ret0
}

// ToTransactionYearlyAmountByCardNumber indicates an expected call of ToTransactionYearlyAmountByCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionYearlyAmountByCardNumber(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionYearlyAmountByCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionYearlyAmountByCardNumber), ss)
}

// ToTransactionYearlyAmounts mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionYearlyAmounts(ss []*db.GetYearlyAmountsRow) []*record.TransactionYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionYearlyAmounts", ss)
	ret0, _ := ret[0].([]*record.TransactionYearlyAmount)
	return ret0
}

// ToTransactionYearlyAmounts indicates an expected call of ToTransactionYearlyAmounts.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionYearlyAmounts(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionYearlyAmounts", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionYearlyAmounts), ss)
}

// ToTransactionYearlyAmountsByCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionYearlyAmountsByCardNumber(ss []*db.GetYearlyAmountsByCardNumberRow) []*record.TransactionYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionYearlyAmountsByCardNumber", ss)
	ret0, _ := ret[0].([]*record.TransactionYearlyAmount)
	return ret0
}

// ToTransactionYearlyAmountsByCardNumber indicates an expected call of ToTransactionYearlyAmountsByCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionYearlyAmountsByCardNumber(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionYearlyAmountsByCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionYearlyAmountsByCardNumber), ss)
}

// ToTransactionYearlyMethod mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionYearlyMethod(ss *db.GetYearlyPaymentMethodsRow) *record.TransactionYearMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionYearlyMethod", ss)
	ret0, _ := ret[0].(*record.TransactionYearMethod)
	return ret0
}

// ToTransactionYearlyMethod indicates an expected call of ToTransactionYearlyMethod.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionYearlyMethod(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionYearlyMethod", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionYearlyMethod), ss)
}

// ToTransactionYearlyMethodByCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionYearlyMethodByCardNumber(ss *db.GetYearlyPaymentMethodsByCardNumberRow) *record.TransactionYearMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionYearlyMethodByCardNumber", ss)
	ret0, _ := ret[0].(*record.TransactionYearMethod)
	return ret0
}

// ToTransactionYearlyMethodByCardNumber indicates an expected call of ToTransactionYearlyMethodByCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionYearlyMethodByCardNumber(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionYearlyMethodByCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionYearlyMethodByCardNumber), ss)
}

// ToTransactionYearlyMethods mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionYearlyMethods(ss []*db.GetYearlyPaymentMethodsRow) []*record.TransactionYearMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionYearlyMethods", ss)
	ret0, _ := ret[0].([]*record.TransactionYearMethod)
	return ret0
}

// ToTransactionYearlyMethods indicates an expected call of ToTransactionYearlyMethods.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionYearlyMethods(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionYearlyMethods", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionYearlyMethods), ss)
}

// ToTransactionYearlyMethodsByCardNumber mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionYearlyMethodsByCardNumber(ss []*db.GetYearlyPaymentMethodsByCardNumberRow) []*record.TransactionYearMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionYearlyMethodsByCardNumber", ss)
	ret0, _ := ret[0].([]*record.TransactionYearMethod)
	return ret0
}

// ToTransactionYearlyMethodsByCardNumber indicates an expected call of ToTransactionYearlyMethodsByCardNumber.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionYearlyMethodsByCardNumber(ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionYearlyMethodsByCardNumber", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionYearlyMethodsByCardNumber), ss)
}

// ToTransactionsByCardNumberRecord mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionsByCardNumberRecord(transactions []*db.GetTransactionsByCardNumberRow) []*record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionsByCardNumberRecord", transactions)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	return ret0
}

// ToTransactionsByCardNumberRecord indicates an expected call of ToTransactionsByCardNumberRecord.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionsByCardNumberRecord(transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionsByCardNumberRecord", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionsByCardNumberRecord), transactions)
}

// ToTransactionsRecord mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionsRecord(transactions []*db.Transaction) []*record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionsRecord", transactions)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	return ret0
}

// ToTransactionsRecord indicates an expected call of ToTransactionsRecord.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionsRecord(transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionsRecord", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionsRecord), transactions)
}

// ToTransactionsRecordActive mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionsRecordActive(transactions []*db.GetActiveTransactionsRow) []*record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionsRecordActive", transactions)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	return ret0
}

// ToTransactionsRecordActive indicates an expected call of ToTransactionsRecordActive.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionsRecordActive(transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionsRecordActive", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionsRecordActive), transactions)
}

// ToTransactionsRecordAll mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionsRecordAll(transactions []*db.GetTransactionsRow) []*record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionsRecordAll", transactions)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	return ret0
}

// ToTransactionsRecordAll indicates an expected call of ToTransactionsRecordAll.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionsRecordAll(transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionsRecordAll", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionsRecordAll), transactions)
}

// ToTransactionsRecordTrashed mocks base method.
func (m *MockTransactionRecordMapping) ToTransactionsRecordTrashed(transactions []*db.GetTrashedTransactionsRow) []*record.TransactionRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransactionsRecordTrashed", transactions)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	return ret0
}

// ToTransactionsRecordTrashed indicates an expected call of ToTransactionsRecordTrashed.
func (mr *MockTransactionRecordMappingMockRecorder) ToTransactionsRecordTrashed(transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransactionsRecordTrashed", reflect.TypeOf((*MockTransactionRecordMapping)(nil).ToTransactionsRecordTrashed), transactions)
}

// MockMerchantRecordMapping is a mock of MerchantRecordMapping interface.
type MockMerchantRecordMapping struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantRecordMappingMockRecorder
	isgomock struct{}
}

// MockMerchantRecordMappingMockRecorder is the mock recorder for MockMerchantRecordMapping.
type MockMerchantRecordMappingMockRecorder struct {
	mock *MockMerchantRecordMapping
}

// NewMockMerchantRecordMapping creates a new mock instance.
func NewMockMerchantRecordMapping(ctrl *gomock.Controller) *MockMerchantRecordMapping {
	mock := &MockMerchantRecordMapping{ctrl: ctrl}
	mock.recorder = &MockMerchantRecordMappingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchantRecordMapping) EXPECT() *MockMerchantRecordMappingMockRecorder {
	return m.recorder
}

// ToMerchantActiveRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantActiveRecord(merchant *db.GetActiveMerchantsRow) *record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantActiveRecord", merchant)
	ret0, _ := ret[0].(*record.MerchantRecord)
	return ret0
}

// ToMerchantActiveRecord indicates an expected call of ToMerchantActiveRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantActiveRecord(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantActiveRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantActiveRecord), merchant)
}

// ToMerchantGetAllRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantGetAllRecord(merchant *db.GetMerchantsRow) *record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantGetAllRecord", merchant)
	ret0, _ := ret[0].(*record.MerchantRecord)
	return ret0
}

// ToMerchantGetAllRecord indicates an expected call of ToMerchantGetAllRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantGetAllRecord(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantGetAllRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantGetAllRecord), merchant)
}

// ToMerchantMonthlyAmount mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyAmount(ms *db.GetMonthlyAmountMerchantRow) *record.MerchantMonthlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyAmount", ms)
	ret0, _ := ret[0].(*record.MerchantMonthlyAmount)
	return ret0
}

// ToMerchantMonthlyAmount indicates an expected call of ToMerchantMonthlyAmount.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyAmount(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyAmount", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyAmount), ms)
}

// ToMerchantMonthlyAmountByApikey mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyAmountByApikey(ms *db.GetMonthlyAmountByApikeyRow) *record.MerchantMonthlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyAmountByApikey", ms)
	ret0, _ := ret[0].(*record.MerchantMonthlyAmount)
	return ret0
}

// ToMerchantMonthlyAmountByApikey indicates an expected call of ToMerchantMonthlyAmountByApikey.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyAmountByApikey(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyAmountByApikey", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyAmountByApikey), ms)
}

// ToMerchantMonthlyAmountByMerchant mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyAmountByMerchant(ms *db.GetMonthlyAmountByMerchantsRow) *record.MerchantMonthlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyAmountByMerchant", ms)
	ret0, _ := ret[0].(*record.MerchantMonthlyAmount)
	return ret0
}

// ToMerchantMonthlyAmountByMerchant indicates an expected call of ToMerchantMonthlyAmountByMerchant.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyAmountByMerchant(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyAmountByMerchant", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyAmountByMerchant), ms)
}

// ToMerchantMonthlyAmounts mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyAmounts(ms []*db.GetMonthlyAmountMerchantRow) []*record.MerchantMonthlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyAmounts", ms)
	ret0, _ := ret[0].([]*record.MerchantMonthlyAmount)
	return ret0
}

// ToMerchantMonthlyAmounts indicates an expected call of ToMerchantMonthlyAmounts.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyAmounts(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyAmounts", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyAmounts), ms)
}

// ToMerchantMonthlyAmountsByApikey mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyAmountsByApikey(ms []*db.GetMonthlyAmountByApikeyRow) []*record.MerchantMonthlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyAmountsByApikey", ms)
	ret0, _ := ret[0].([]*record.MerchantMonthlyAmount)
	return ret0
}

// ToMerchantMonthlyAmountsByApikey indicates an expected call of ToMerchantMonthlyAmountsByApikey.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyAmountsByApikey(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyAmountsByApikey", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyAmountsByApikey), ms)
}

// ToMerchantMonthlyAmountsByMerchant mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyAmountsByMerchant(ms []*db.GetMonthlyAmountByMerchantsRow) []*record.MerchantMonthlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyAmountsByMerchant", ms)
	ret0, _ := ret[0].([]*record.MerchantMonthlyAmount)
	return ret0
}

// ToMerchantMonthlyAmountsByMerchant indicates an expected call of ToMerchantMonthlyAmountsByMerchant.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyAmountsByMerchant(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyAmountsByMerchant", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyAmountsByMerchant), ms)
}

// ToMerchantMonthlyPaymentMethod mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyPaymentMethod(ms *db.GetMonthlyPaymentMethodsMerchantRow) *record.MerchantMonthlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyPaymentMethod", ms)
	ret0, _ := ret[0].(*record.MerchantMonthlyPaymentMethod)
	return ret0
}

// ToMerchantMonthlyPaymentMethod indicates an expected call of ToMerchantMonthlyPaymentMethod.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyPaymentMethod(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyPaymentMethod", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyPaymentMethod), ms)
}

// ToMerchantMonthlyPaymentMethodByApikey mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyPaymentMethodByApikey(ms *db.GetMonthlyPaymentMethodByApikeyRow) *record.MerchantMonthlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyPaymentMethodByApikey", ms)
	ret0, _ := ret[0].(*record.MerchantMonthlyPaymentMethod)
	return ret0
}

// ToMerchantMonthlyPaymentMethodByApikey indicates an expected call of ToMerchantMonthlyPaymentMethodByApikey.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyPaymentMethodByApikey(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyPaymentMethodByApikey", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyPaymentMethodByApikey), ms)
}

// ToMerchantMonthlyPaymentMethodByMerchant mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyPaymentMethodByMerchant(ms *db.GetMonthlyPaymentMethodByMerchantsRow) *record.MerchantMonthlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyPaymentMethodByMerchant", ms)
	ret0, _ := ret[0].(*record.MerchantMonthlyPaymentMethod)
	return ret0
}

// ToMerchantMonthlyPaymentMethodByMerchant indicates an expected call of ToMerchantMonthlyPaymentMethodByMerchant.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyPaymentMethodByMerchant(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyPaymentMethodByMerchant", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyPaymentMethodByMerchant), ms)
}

// ToMerchantMonthlyPaymentMethods mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyPaymentMethods(ms []*db.GetMonthlyPaymentMethodsMerchantRow) []*record.MerchantMonthlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyPaymentMethods", ms)
	ret0, _ := ret[0].([]*record.MerchantMonthlyPaymentMethod)
	return ret0
}

// ToMerchantMonthlyPaymentMethods indicates an expected call of ToMerchantMonthlyPaymentMethods.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyPaymentMethods(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyPaymentMethods", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyPaymentMethods), ms)
}

// ToMerchantMonthlyPaymentMethodsByApikey mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyPaymentMethodsByApikey(ms []*db.GetMonthlyPaymentMethodByApikeyRow) []*record.MerchantMonthlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyPaymentMethodsByApikey", ms)
	ret0, _ := ret[0].([]*record.MerchantMonthlyPaymentMethod)
	return ret0
}

// ToMerchantMonthlyPaymentMethodsByApikey indicates an expected call of ToMerchantMonthlyPaymentMethodsByApikey.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyPaymentMethodsByApikey(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyPaymentMethodsByApikey", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyPaymentMethodsByApikey), ms)
}

// ToMerchantMonthlyPaymentMethodsByMerchant mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyPaymentMethodsByMerchant(ms []*db.GetMonthlyPaymentMethodByMerchantsRow) []*record.MerchantMonthlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyPaymentMethodsByMerchant", ms)
	ret0, _ := ret[0].([]*record.MerchantMonthlyPaymentMethod)
	return ret0
}

// ToMerchantMonthlyPaymentMethodsByMerchant indicates an expected call of ToMerchantMonthlyPaymentMethodsByMerchant.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyPaymentMethodsByMerchant(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyPaymentMethodsByMerchant", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyPaymentMethodsByMerchant), ms)
}

// ToMerchantMonthlyTotalAmount mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyTotalAmount(ms *db.GetMonthlyTotalAmountMerchantRow) *record.MerchantMonthlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyTotalAmount", ms)
	ret0, _ := ret[0].(*record.MerchantMonthlyTotalAmount)
	return ret0
}

// ToMerchantMonthlyTotalAmount indicates an expected call of ToMerchantMonthlyTotalAmount.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyTotalAmount(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyTotalAmount", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyTotalAmount), ms)
}

// ToMerchantMonthlyTotalAmountByApikey mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyTotalAmountByApikey(ms *db.GetMonthlyTotalAmountByApikeyRow) *record.MerchantMonthlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyTotalAmountByApikey", ms)
	ret0, _ := ret[0].(*record.MerchantMonthlyTotalAmount)
	return ret0
}

// ToMerchantMonthlyTotalAmountByApikey indicates an expected call of ToMerchantMonthlyTotalAmountByApikey.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyTotalAmountByApikey(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyTotalAmountByApikey", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyTotalAmountByApikey), ms)
}

// ToMerchantMonthlyTotalAmountByMerchant mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyTotalAmountByMerchant(ms *db.GetMonthlyTotalAmountByMerchantRow) *record.MerchantMonthlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyTotalAmountByMerchant", ms)
	ret0, _ := ret[0].(*record.MerchantMonthlyTotalAmount)
	return ret0
}

// ToMerchantMonthlyTotalAmountByMerchant indicates an expected call of ToMerchantMonthlyTotalAmountByMerchant.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyTotalAmountByMerchant(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyTotalAmountByMerchant", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyTotalAmountByMerchant), ms)
}

// ToMerchantMonthlyTotalAmounts mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyTotalAmounts(ms []*db.GetMonthlyTotalAmountMerchantRow) []*record.MerchantMonthlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyTotalAmounts", ms)
	ret0, _ := ret[0].([]*record.MerchantMonthlyTotalAmount)
	return ret0
}

// ToMerchantMonthlyTotalAmounts indicates an expected call of ToMerchantMonthlyTotalAmounts.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyTotalAmounts(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyTotalAmounts", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyTotalAmounts), ms)
}

// ToMerchantMonthlyTotalAmountsByApikey mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyTotalAmountsByApikey(ms []*db.GetMonthlyTotalAmountByApikeyRow) []*record.MerchantMonthlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyTotalAmountsByApikey", ms)
	ret0, _ := ret[0].([]*record.MerchantMonthlyTotalAmount)
	return ret0
}

// ToMerchantMonthlyTotalAmountsByApikey indicates an expected call of ToMerchantMonthlyTotalAmountsByApikey.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyTotalAmountsByApikey(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyTotalAmountsByApikey", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyTotalAmountsByApikey), ms)
}

// ToMerchantMonthlyTotalAmountsByMerchant mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantMonthlyTotalAmountsByMerchant(ms []*db.GetMonthlyTotalAmountByMerchantRow) []*record.MerchantMonthlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantMonthlyTotalAmountsByMerchant", ms)
	ret0, _ := ret[0].([]*record.MerchantMonthlyTotalAmount)
	return ret0
}

// ToMerchantMonthlyTotalAmountsByMerchant indicates an expected call of ToMerchantMonthlyTotalAmountsByMerchant.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantMonthlyTotalAmountsByMerchant(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantMonthlyTotalAmountsByMerchant", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantMonthlyTotalAmountsByMerchant), ms)
}

// ToMerchantRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantRecord(merchant *db.Merchant) *record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantRecord", merchant)
	ret0, _ := ret[0].(*record.MerchantRecord)
	return ret0
}

// ToMerchantRecord indicates an expected call of ToMerchantRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantRecord(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantRecord), merchant)
}

// ToMerchantTransactionByApikeyRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantTransactionByApikeyRecord(merchant *db.FindAllTransactionsByApikeyRow) *record.MerchantTransactionsRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantTransactionByApikeyRecord", merchant)
	ret0, _ := ret[0].(*record.MerchantTransactionsRecord)
	return ret0
}

// ToMerchantTransactionByApikeyRecord indicates an expected call of ToMerchantTransactionByApikeyRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantTransactionByApikeyRecord(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantTransactionByApikeyRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantTransactionByApikeyRecord), merchant)
}

// ToMerchantTransactionByMerchantRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantTransactionByMerchantRecord(merchant *db.FindAllTransactionsByMerchantRow) *record.MerchantTransactionsRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantTransactionByMerchantRecord", merchant)
	ret0, _ := ret[0].(*record.MerchantTransactionsRecord)
	return ret0
}

// ToMerchantTransactionByMerchantRecord indicates an expected call of ToMerchantTransactionByMerchantRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantTransactionByMerchantRecord(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantTransactionByMerchantRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantTransactionByMerchantRecord), merchant)
}

// ToMerchantTransactionRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantTransactionRecord(merchant *db.FindAllTransactionsRow) *record.MerchantTransactionsRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantTransactionRecord", merchant)
	ret0, _ := ret[0].(*record.MerchantTransactionsRecord)
	return ret0
}

// ToMerchantTransactionRecord indicates an expected call of ToMerchantTransactionRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantTransactionRecord(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantTransactionRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantTransactionRecord), merchant)
}

// ToMerchantTrashedRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantTrashedRecord(merchant *db.GetTrashedMerchantsRow) *record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantTrashedRecord", merchant)
	ret0, _ := ret[0].(*record.MerchantRecord)
	return ret0
}

// ToMerchantTrashedRecord indicates an expected call of ToMerchantTrashedRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantTrashedRecord(merchant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantTrashedRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantTrashedRecord), merchant)
}

// ToMerchantYearlyAmount mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyAmount(ms *db.GetYearlyAmountMerchantRow) *record.MerchantYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyAmount", ms)
	ret0, _ := ret[0].(*record.MerchantYearlyAmount)
	return ret0
}

// ToMerchantYearlyAmount indicates an expected call of ToMerchantYearlyAmount.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyAmount(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyAmount", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyAmount), ms)
}

// ToMerchantYearlyAmountByApikey mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyAmountByApikey(ms *db.GetYearlyAmountByApikeyRow) *record.MerchantYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyAmountByApikey", ms)
	ret0, _ := ret[0].(*record.MerchantYearlyAmount)
	return ret0
}

// ToMerchantYearlyAmountByApikey indicates an expected call of ToMerchantYearlyAmountByApikey.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyAmountByApikey(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyAmountByApikey", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyAmountByApikey), ms)
}

// ToMerchantYearlyAmountByMerchant mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyAmountByMerchant(ms *db.GetYearlyAmountByMerchantsRow) *record.MerchantYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyAmountByMerchant", ms)
	ret0, _ := ret[0].(*record.MerchantYearlyAmount)
	return ret0
}

// ToMerchantYearlyAmountByMerchant indicates an expected call of ToMerchantYearlyAmountByMerchant.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyAmountByMerchant(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyAmountByMerchant", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyAmountByMerchant), ms)
}

// ToMerchantYearlyAmounts mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyAmounts(ms []*db.GetYearlyAmountMerchantRow) []*record.MerchantYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyAmounts", ms)
	ret0, _ := ret[0].([]*record.MerchantYearlyAmount)
	return ret0
}

// ToMerchantYearlyAmounts indicates an expected call of ToMerchantYearlyAmounts.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyAmounts(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyAmounts", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyAmounts), ms)
}

// ToMerchantYearlyAmountsByApikey mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyAmountsByApikey(ms []*db.GetYearlyAmountByApikeyRow) []*record.MerchantYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyAmountsByApikey", ms)
	ret0, _ := ret[0].([]*record.MerchantYearlyAmount)
	return ret0
}

// ToMerchantYearlyAmountsByApikey indicates an expected call of ToMerchantYearlyAmountsByApikey.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyAmountsByApikey(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyAmountsByApikey", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyAmountsByApikey), ms)
}

// ToMerchantYearlyAmountsByMerchant mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyAmountsByMerchant(ms []*db.GetYearlyAmountByMerchantsRow) []*record.MerchantYearlyAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyAmountsByMerchant", ms)
	ret0, _ := ret[0].([]*record.MerchantYearlyAmount)
	return ret0
}

// ToMerchantYearlyAmountsByMerchant indicates an expected call of ToMerchantYearlyAmountsByMerchant.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyAmountsByMerchant(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyAmountsByMerchant", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyAmountsByMerchant), ms)
}

// ToMerchantYearlyPaymentMethod mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyPaymentMethod(ms *db.GetYearlyPaymentMethodMerchantRow) *record.MerchantYearlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyPaymentMethod", ms)
	ret0, _ := ret[0].(*record.MerchantYearlyPaymentMethod)
	return ret0
}

// ToMerchantYearlyPaymentMethod indicates an expected call of ToMerchantYearlyPaymentMethod.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyPaymentMethod(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyPaymentMethod", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyPaymentMethod), ms)
}

// ToMerchantYearlyPaymentMethodByApikey mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyPaymentMethodByApikey(ms *db.GetYearlyPaymentMethodByApikeyRow) *record.MerchantYearlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyPaymentMethodByApikey", ms)
	ret0, _ := ret[0].(*record.MerchantYearlyPaymentMethod)
	return ret0
}

// ToMerchantYearlyPaymentMethodByApikey indicates an expected call of ToMerchantYearlyPaymentMethodByApikey.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyPaymentMethodByApikey(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyPaymentMethodByApikey", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyPaymentMethodByApikey), ms)
}

// ToMerchantYearlyPaymentMethodByMerchant mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyPaymentMethodByMerchant(ms *db.GetYearlyPaymentMethodByMerchantsRow) *record.MerchantYearlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyPaymentMethodByMerchant", ms)
	ret0, _ := ret[0].(*record.MerchantYearlyPaymentMethod)
	return ret0
}

// ToMerchantYearlyPaymentMethodByMerchant indicates an expected call of ToMerchantYearlyPaymentMethodByMerchant.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyPaymentMethodByMerchant(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyPaymentMethodByMerchant", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyPaymentMethodByMerchant), ms)
}

// ToMerchantYearlyPaymentMethods mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyPaymentMethods(ms []*db.GetYearlyPaymentMethodMerchantRow) []*record.MerchantYearlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyPaymentMethods", ms)
	ret0, _ := ret[0].([]*record.MerchantYearlyPaymentMethod)
	return ret0
}

// ToMerchantYearlyPaymentMethods indicates an expected call of ToMerchantYearlyPaymentMethods.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyPaymentMethods(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyPaymentMethods", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyPaymentMethods), ms)
}

// ToMerchantYearlyPaymentMethodsByApikey mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyPaymentMethodsByApikey(ms []*db.GetYearlyPaymentMethodByApikeyRow) []*record.MerchantYearlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyPaymentMethodsByApikey", ms)
	ret0, _ := ret[0].([]*record.MerchantYearlyPaymentMethod)
	return ret0
}

// ToMerchantYearlyPaymentMethodsByApikey indicates an expected call of ToMerchantYearlyPaymentMethodsByApikey.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyPaymentMethodsByApikey(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyPaymentMethodsByApikey", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyPaymentMethodsByApikey), ms)
}

// ToMerchantYearlyPaymentMethodsByMerchant mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyPaymentMethodsByMerchant(ms []*db.GetYearlyPaymentMethodByMerchantsRow) []*record.MerchantYearlyPaymentMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyPaymentMethodsByMerchant", ms)
	ret0, _ := ret[0].([]*record.MerchantYearlyPaymentMethod)
	return ret0
}

// ToMerchantYearlyPaymentMethodsByMerchant indicates an expected call of ToMerchantYearlyPaymentMethodsByMerchant.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyPaymentMethodsByMerchant(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyPaymentMethodsByMerchant", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyPaymentMethodsByMerchant), ms)
}

// ToMerchantYearlyTotalAmount mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyTotalAmount(ms *db.GetYearlyTotalAmountMerchantRow) *record.MerchantYearlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyTotalAmount", ms)
	ret0, _ := ret[0].(*record.MerchantYearlyTotalAmount)
	return ret0
}

// ToMerchantYearlyTotalAmount indicates an expected call of ToMerchantYearlyTotalAmount.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyTotalAmount(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyTotalAmount", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyTotalAmount), ms)
}

// ToMerchantYearlyTotalAmountByApikey mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyTotalAmountByApikey(ms *db.GetYearlyTotalAmountByApikeyRow) *record.MerchantYearlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyTotalAmountByApikey", ms)
	ret0, _ := ret[0].(*record.MerchantYearlyTotalAmount)
	return ret0
}

// ToMerchantYearlyTotalAmountByApikey indicates an expected call of ToMerchantYearlyTotalAmountByApikey.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyTotalAmountByApikey(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyTotalAmountByApikey", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyTotalAmountByApikey), ms)
}

// ToMerchantYearlyTotalAmountByMerchant mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyTotalAmountByMerchant(ms *db.GetYearlyTotalAmountByMerchantRow) *record.MerchantYearlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyTotalAmountByMerchant", ms)
	ret0, _ := ret[0].(*record.MerchantYearlyTotalAmount)
	return ret0
}

// ToMerchantYearlyTotalAmountByMerchant indicates an expected call of ToMerchantYearlyTotalAmountByMerchant.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyTotalAmountByMerchant(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyTotalAmountByMerchant", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyTotalAmountByMerchant), ms)
}

// ToMerchantYearlyTotalAmounts mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyTotalAmounts(ms []*db.GetYearlyTotalAmountMerchantRow) []*record.MerchantYearlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyTotalAmounts", ms)
	ret0, _ := ret[0].([]*record.MerchantYearlyTotalAmount)
	return ret0
}

// ToMerchantYearlyTotalAmounts indicates an expected call of ToMerchantYearlyTotalAmounts.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyTotalAmounts(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyTotalAmounts", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyTotalAmounts), ms)
}

// ToMerchantYearlyTotalAmountsByApikey mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyTotalAmountsByApikey(ms []*db.GetYearlyTotalAmountByApikeyRow) []*record.MerchantYearlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyTotalAmountsByApikey", ms)
	ret0, _ := ret[0].([]*record.MerchantYearlyTotalAmount)
	return ret0
}

// ToMerchantYearlyTotalAmountsByApikey indicates an expected call of ToMerchantYearlyTotalAmountsByApikey.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyTotalAmountsByApikey(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyTotalAmountsByApikey", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyTotalAmountsByApikey), ms)
}

// ToMerchantYearlyTotalAmountsByMerchant mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantYearlyTotalAmountsByMerchant(ms []*db.GetYearlyTotalAmountByMerchantRow) []*record.MerchantYearlyTotalAmount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantYearlyTotalAmountsByMerchant", ms)
	ret0, _ := ret[0].([]*record.MerchantYearlyTotalAmount)
	return ret0
}

// ToMerchantYearlyTotalAmountsByMerchant indicates an expected call of ToMerchantYearlyTotalAmountsByMerchant.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantYearlyTotalAmountsByMerchant(ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantYearlyTotalAmountsByMerchant", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantYearlyTotalAmountsByMerchant), ms)
}

// ToMerchantsActiveRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantsActiveRecord(merchants []*db.GetActiveMerchantsRow) []*record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsActiveRecord", merchants)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	return ret0
}

// ToMerchantsActiveRecord indicates an expected call of ToMerchantsActiveRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantsActiveRecord(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsActiveRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantsActiveRecord), merchants)
}

// ToMerchantsGetAllRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantsGetAllRecord(merchants []*db.GetMerchantsRow) []*record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsGetAllRecord", merchants)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	return ret0
}

// ToMerchantsGetAllRecord indicates an expected call of ToMerchantsGetAllRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantsGetAllRecord(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsGetAllRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantsGetAllRecord), merchants)
}

// ToMerchantsRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantsRecord(merchants []*db.Merchant) []*record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsRecord", merchants)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	return ret0
}

// ToMerchantsRecord indicates an expected call of ToMerchantsRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantsRecord(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantsRecord), merchants)
}

// ToMerchantsTransactionByApikeyRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantsTransactionByApikeyRecord(merchants []*db.FindAllTransactionsByApikeyRow) []*record.MerchantTransactionsRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsTransactionByApikeyRecord", merchants)
	ret0, _ := ret[0].([]*record.MerchantTransactionsRecord)
	return ret0
}

// ToMerchantsTransactionByApikeyRecord indicates an expected call of ToMerchantsTransactionByApikeyRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantsTransactionByApikeyRecord(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsTransactionByApikeyRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantsTransactionByApikeyRecord), merchants)
}

// ToMerchantsTransactionByMerchantRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantsTransactionByMerchantRecord(merchants []*db.FindAllTransactionsByMerchantRow) []*record.MerchantTransactionsRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsTransactionByMerchantRecord", merchants)
	ret0, _ := ret[0].([]*record.MerchantTransactionsRecord)
	return ret0
}

// ToMerchantsTransactionByMerchantRecord indicates an expected call of ToMerchantsTransactionByMerchantRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantsTransactionByMerchantRecord(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsTransactionByMerchantRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantsTransactionByMerchantRecord), merchants)
}

// ToMerchantsTransactionRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantsTransactionRecord(merchants []*db.FindAllTransactionsRow) []*record.MerchantTransactionsRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsTransactionRecord", merchants)
	ret0, _ := ret[0].([]*record.MerchantTransactionsRecord)
	return ret0
}

// ToMerchantsTransactionRecord indicates an expected call of ToMerchantsTransactionRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantsTransactionRecord(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsTransactionRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantsTransactionRecord), merchants)
}

// ToMerchantsTrashedRecord mocks base method.
func (m *MockMerchantRecordMapping) ToMerchantsTrashedRecord(merchants []*db.GetTrashedMerchantsRow) []*record.MerchantRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMerchantsTrashedRecord", merchants)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	return ret0
}

// ToMerchantsTrashedRecord indicates an expected call of ToMerchantsTrashedRecord.
func (mr *MockMerchantRecordMappingMockRecorder) ToMerchantsTrashedRecord(merchants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMerchantsTrashedRecord", reflect.TypeOf((*MockMerchantRecordMapping)(nil).ToMerchantsTrashedRecord), merchants)
}
