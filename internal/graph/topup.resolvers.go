package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"math"

	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/requests"
	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/response"
	"github.com/MamangRust/paymentgatewaygraphql/internal/graph/model"
	"github.com/MamangRust/paymentgatewaygraphql/pkg/errors/topup_errors"
)

// CreateTopup is the resolver for the createTopup field.
func (r *mutationResolver) CreateTopup(ctx context.Context, input model.CreateTopupInput) (*model.APIResponseTopup, error) {
	request := requests.CreateTopupRequest{
		CardNumber:  input.CardNumber,
		TopupAmount: int(input.TopupAmount),
		TopupMethod: input.TopupMethod,
	}

	if err := request.Validate(); err != nil {
		return nil, topup_errors.ErrGraphqlValidateCreateTopup
	}

	res, err := r.TopupGraphql.TopupService.CreateTopup(&request)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopup("success", "Successfully created topup", res)

	return so, nil
}

// UpdateTopup is the resolver for the updateTopup field.
func (r *mutationResolver) UpdateTopup(ctx context.Context, input model.UpdateTopupInput) (*model.APIResponseTopup, error) {
	id := int(input.TopupID)

	if id == 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidID
	}

	request := requests.UpdateTopupRequest{
		CardNumber:  *input.CardNumber,
		TopupAmount: int(*input.TopupAmount),
		TopupMethod: *input.TopupMethod,
	}

	if err := request.Validate(); err != nil {
		return nil, topup_errors.ErrGraphqlValidateUpdateTopup
	}

	res, err := r.TopupGraphql.TopupService.UpdateTopup(&request)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopup("success", "Successfully created topup", res)

	return so, nil
}

// TrashedTopup is the resolver for the trashedTopup field.
func (r *mutationResolver) TrashedTopup(ctx context.Context, input model.FindByIDTopupInput) (*model.APIResponseTopupDeleteAt, error) {
	id := int(input.TopupID)

	if id == 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidID
	}

	topup, err := r.TopupGraphql.TopupService.TrashedTopup(id)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupDeleteAt("success", "Successfully trashed topup", topup)

	return so, nil
}

// RestoreTopup is the resolver for the restoreTopup field.
func (r *mutationResolver) RestoreTopup(ctx context.Context, input model.FindByIDTopupInput) (*model.APIResponseTopupDeleteAt, error) {
	id := int(input.TopupID)

	if id == 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidID
	}

	topup, err := r.TopupGraphql.TopupService.RestoreTopup(id)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupDeleteAt("success", "Successfully restore topup", topup)

	return so, nil
}

// DeleteTopupPermanent is the resolver for the deleteTopupPermanent field.
func (r *mutationResolver) DeleteTopupPermanent(ctx context.Context, input model.FindByIDTopupInput) (*model.APIResponseTopupDelete, error) {
	id := int(input.TopupID)

	if id == 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidID
	}
	_, err := r.TopupGraphql.TopupService.DeleteTopupPermanent(id)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlTopupDelete("success", "Successfully deleted topup permanently")

	return so, nil
}

// RestoreAllTopup is the resolver for the restoreAllTopup field.
func (r *mutationResolver) RestoreAllTopup(ctx context.Context) (*model.APIResponseTopupAll, error) {
	_, err := r.TopupGraphql.TopupService.RestoreAllTopup()

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlTopupAll("success", "Successfully restore all topup")

	return so, nil
}

// DeleteAllTopupPermanent is the resolver for the deleteAllTopupPermanent field.
func (r *mutationResolver) DeleteAllTopupPermanent(ctx context.Context) (*model.APIResponseTopupAll, error) {
	_, err := r.TopupGraphql.TopupService.DeleteAllTopupPermanent()

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlTopupAll("success", "Successfully restore all topup")

	return so, nil
}

// FindAllTopup is the resolver for the findAllTopup field.
func (r *queryResolver) FindAllTopup(ctx context.Context, input *model.FindAllTopupInput) (*model.APIResponsePaginationTopup, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllTopups{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	topups, totalRecords, errResp := r.TopupGraphql.TopupService.FindAll(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponsePaginationTopup("success", "topups retrieved successfully", topups, paginationMeta)

	return so, nil
}

// FindAllTopupByCardNumber is the resolver for the findAllTopupByCardNumber field.
func (r *queryResolver) FindAllTopupByCardNumber(ctx context.Context, input *model.FindAllTopupByCardNumberInput) (*model.APIResponsePaginationTopup, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search
	cardNumber := input.CardNumber

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllTopupsByCardNumber{
		Page:       page,
		PageSize:   pageSize,
		Search:     *search,
		CardNumber: cardNumber,
	}

	topups, totalRecords, errResp := r.TopupGraphql.TopupService.FindAllByCardNumber(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponsePaginationTopup("success", "topups retrieved successfully", topups, paginationMeta)

	return so, nil
}

// FindByIDTopup is the resolver for the findByIdTopup field.
func (r *queryResolver) FindByIDTopup(ctx context.Context, input model.FindByIDTopupInput) (*model.APIResponseTopup, error) {
	id := int(input.TopupID)

	if id == 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidID
	}

	topup, err := r.TopupGraphql.TopupService.FindById(id)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopup("success", "Topup retrieved successfully", topup)

	return so, nil
}

// FindMonthlyTopupStatusSuccess is the resolver for the findMonthlyTopupStatusSuccess field.
func (r *queryResolver) FindMonthlyTopupStatusSuccess(ctx context.Context, input model.FindMonthlyTopupStatusInput) (*model.APIResponseTopupMonthStatusSuccess, error) {
	year := int(input.Year)
	month := int(input.Month)

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	if month <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidMonth
	}

	reqService := requests.MonthTopupStatus{
		Year:  year,
		Month: month,
	}

	res, err := r.TopupGraphql.TopupService.FindMonthTopupStatusSuccess(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupMonthStatusSuccess("success", "Successfully fetched monthly topup status success", res)

	return so, nil
}

// FindYearlyTopupStatusSuccess is the resolver for the findYearlyTopupStatusSuccess field.
func (r *queryResolver) FindYearlyTopupStatusSuccess(ctx context.Context, input model.FindYearTopupStatusInput) (*model.APIResponseTopupYearStatusSuccess, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	res, err := r.TopupGraphql.TopupService.FindYearlyTopupStatusSuccess(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupYearStatusSuccess("success", "Successfully fetched yearly topup status success", res)

	return so, nil
}

// FindMonthlyTopupStatusFailed is the resolver for the findMonthlyTopupStatusFailed field.
func (r *queryResolver) FindMonthlyTopupStatusFailed(ctx context.Context, input model.FindMonthlyTopupStatusInput) (*model.APIResponseTopupMonthStatusFailed, error) {
	year := int(input.Year)
	month := int(input.Month)

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	if month <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidMonth
	}

	reqService := requests.MonthTopupStatus{
		Year:  year,
		Month: month,
	}

	res, err := r.TopupGraphql.TopupService.FindMonthTopupStatusFailed(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupMonthStatusFailed("success", "Successfully fetched monthly topup status failed", res)

	return so, nil
}

// FindYearlyTopupStatusFailed is the resolver for the findYearlyTopupStatusFailed field.
func (r *queryResolver) FindYearlyTopupStatusFailed(ctx context.Context, input model.FindYearTopupStatusInput) (*model.APIResponseTopupYearStatusFailed, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	res, err := r.TopupGraphql.TopupService.FindYearlyTopupStatusFailed(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupYearStatusFailed("success", "Successfully fetched yearly topup status failed", res)

	return so, nil
}

// FindMonthlyTopupStatusSuccessByCardNumber is the resolver for the findMonthlyTopupStatusSuccessByCardNumber field.
func (r *queryResolver) FindMonthlyTopupStatusSuccessByCardNumber(ctx context.Context, input model.FindMonthlyTopupStatusCardNumberInput) (*model.APIResponseTopupMonthStatusSuccess, error) {
	year := int(input.Year)
	month := int(input.Month)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	if month <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidMonth
	}

	if cardNumber == "" {
		return nil, topup_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthTopupStatusCardNumber{
		Year:  year,
		Month: month,
	}

	res, err := r.TopupGraphql.TopupService.FindMonthTopupStatusSuccessByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupMonthStatusSuccess("success", "Successfully fetched monthly topup status success", res)

	return so, nil
}

// FindYearlyTopupStatusSuccessByCardNumber is the resolver for the findYearlyTopupStatusSuccessByCardNumber field.
func (r *queryResolver) FindYearlyTopupStatusSuccessByCardNumber(ctx context.Context, input model.FindYearTopupStatusCardNumberInput) (*model.APIResponseTopupYearStatusSuccess, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	if cardNumber == "" {
		return nil, topup_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.YearTopupStatusCardNumber{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.TopupGraphql.TopupService.FindYearlyTopupStatusSuccessByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupYearStatusSuccess("success", "Successfully fetched yearly topup status success", res)

	return so, nil
}

// FindMonthlyTopupStatusFailedByCardNumber is the resolver for the findMonthlyTopupStatusFailedByCardNumber field.
func (r *queryResolver) FindMonthlyTopupStatusFailedByCardNumber(ctx context.Context, input model.FindMonthlyTopupStatusCardNumberInput) (*model.APIResponseTopupMonthStatusFailed, error) {
	year := int(input.Year)
	month := int(input.Month)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	if month <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidMonth
	}

	if cardNumber == "" {
		return nil, topup_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthTopupStatusCardNumber{
		Year:  year,
		Month: month,
	}

	res, err := r.TopupGraphql.TopupService.FindMonthTopupStatusFailedByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupMonthStatusFailed("success", "Successfully fetched monthly topup status success", res)

	return so, nil
}

// FindYearlyTopupStatusFailedByCardNumber is the resolver for the findYearlyTopupStatusFailedByCardNumber field.
func (r *queryResolver) FindYearlyTopupStatusFailedByCardNumber(ctx context.Context, input model.FindYearTopupStatusCardNumberInput) (*model.APIResponseTopupYearStatusFailed, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	if cardNumber == "" {
		return nil, topup_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.YearTopupStatusCardNumber{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.TopupGraphql.TopupService.FindYearlyTopupStatusFailedByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupYearStatusFailed("success", "Successfully fetched yearly topup status success", res)

	return so, nil
}

// FindMonthlyTopupMethods is the resolver for the findMonthlyTopupMethods field.
func (r *queryResolver) FindMonthlyTopupMethods(ctx context.Context, input model.FindYearTopupStatusInput) (*model.APIResponseTopupMonthMethod, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	res, err := r.TopupGraphql.TopupService.FindMonthlyTopupMethods(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupMonthMethod("success", "Successfully fetched monthly topup methods", res)

	return so, nil
}

// FindYearlyTopupMethods is the resolver for the findYearlyTopupMethods field.
func (r *queryResolver) FindYearlyTopupMethods(ctx context.Context, input model.FindYearTopupStatusInput) (*model.APIResponseTopupYearMethod, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	res, err := r.TopupGraphql.TopupService.FindYearlyTopupMethods(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupYearMethod("success", "Successfully fetched yearly topup methods", res)

	return so, nil
}

// FindMonthlyTopupAmounts is the resolver for the findMonthlyTopupAmounts field.
func (r *queryResolver) FindMonthlyTopupAmounts(ctx context.Context, input model.FindYearTopupStatusInput) (*model.APIResponseTopupMonthAmount, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	res, err := r.TopupGraphql.TopupService.FindMonthlyTopupAmounts(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupMonthAmount("success", "Successfully fetched monthly topup amounts", res)

	return so, nil
}

// FindYearlyTopupAmounts is the resolver for the findYearlyTopupAmounts field.
func (r *queryResolver) FindYearlyTopupAmounts(ctx context.Context, input model.FindYearTopupStatusInput) (*model.APIResponseTopupYearAmount, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	res, err := r.TopupGraphql.TopupService.FindYearlyTopupAmounts(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupYearAmount("success", "Successfully fetched yearly topup amounts", res)

	return so, nil
}

// FindMonthlyTopupMethodsByCardNumber is the resolver for the findMonthlyTopupMethodsByCardNumber field.
func (r *queryResolver) FindMonthlyTopupMethodsByCardNumber(ctx context.Context, input model.FindYearTopupCardNumberInput) (*model.APIResponseTopupMonthMethod, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	if cardNumber == "" {
		return nil, topup_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.YearMonthMethod{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.TopupGraphql.TopupService.FindMonthlyTopupMethodsByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupMonthMethod("success", "Successfully fetched monthly topup methods", res)

	return so, nil
}

// FindYearlyTopupMethodsByCardNumber is the resolver for the findYearlyTopupMethodsByCardNumber field.
func (r *queryResolver) FindYearlyTopupMethodsByCardNumber(ctx context.Context, input model.FindYearTopupCardNumberInput) (*model.APIResponseTopupYearMethod, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	if cardNumber == "" {
		return nil, topup_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.YearMonthMethod{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.TopupGraphql.TopupService.FindYearlyTopupMethodsByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupYearMethod("success", "Successfully fetched yearly topup methods", res)

	return so, nil
}

// FindMonthlyTopupAmountsByCardNumber is the resolver for the findMonthlyTopupAmountsByCardNumber field.
func (r *queryResolver) FindMonthlyTopupAmountsByCardNumber(ctx context.Context, input model.FindYearTopupCardNumberInput) (*model.APIResponseTopupMonthAmount, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	if cardNumber == "" {
		return nil, topup_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.YearMonthMethod{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.TopupGraphql.TopupService.FindMonthlyTopupAmountsByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupMonthAmount("success", "Successfully fetched monthly topup amounts", res)

	return so, nil
}

// FindYearlyTopupAmountsByCardNumber is the resolver for the findYearlyTopupAmountsByCardNumber field.
func (r *queryResolver) FindYearlyTopupAmountsByCardNumber(ctx context.Context, input model.FindYearTopupCardNumberInput) (*model.APIResponseTopupYearAmount, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, topup_errors.ErrGraphqlTopupInvalidYear
	}

	if cardNumber == "" {
		return nil, topup_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.YearMonthMethod{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.TopupGraphql.TopupService.FindYearlyTopupAmountsByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponseTopupYearAmount("success", "Successfully fetched yearly topup amounts", res)

	return so, nil
}

// FindByActiveTopup is the resolver for the findByActiveTopup field.
func (r *queryResolver) FindByActiveTopup(ctx context.Context, input *model.FindAllTopupInput) (*model.APIResponsePaginationTopupDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllTopups{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	topups, totalRecords, errResp := r.TopupGraphql.TopupService.FindByActive(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponsePaginationTopupDeleteAt("success", "topups retrieved successfully", topups, paginationMeta)

	return so, nil
}

// FindByTrashedTopup is the resolver for the findByTrashedTopup field.
func (r *queryResolver) FindByTrashedTopup(ctx context.Context, input *model.FindAllTopupInput) (*model.APIResponsePaginationTopupDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllTopups{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	topups, totalRecords, errResp := r.TopupGraphql.TopupService.FindByTrashed(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.TopupGraphql.Mapping.ToGraphqlResponsePaginationTopupDeleteAt("success", "topups retrieved successfully", topups, paginationMeta)

	return so, nil
}
