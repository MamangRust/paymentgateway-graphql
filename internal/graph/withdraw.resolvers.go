package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"math"
	"time"

	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/requests"
	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/response"
	"github.com/MamangRust/paymentgatewaygraphql/internal/graph/model"
	"github.com/MamangRust/paymentgatewaygraphql/pkg/errors/withdraw_errors"
)

// CreateWithdraw is the resolver for the createWithdraw field.
func (r *mutationResolver) CreateWithdraw(ctx context.Context, input model.CreateWithdrawInput) (*model.APIResponseWithdraw, error) {
	withdrawTime, err := time.Parse("2006-01-02", input.WithdrawTime)
	if err != nil {
		return nil, fmt.Errorf("invalid date format for withdrawTime: %v (expected YYYY-MM-DD)", err)
	}

	request := &requests.CreateWithdrawRequest{
		CardNumber:     input.CardNumber,
		WithdrawAmount: int(input.WithdrawAmount),
		WithdrawTime:   withdrawTime,
	}

	if err := request.Validate(); err != nil {
		return nil, withdraw_errors.ErrGraphqlValidateCreateWithdrawRequest
	}

	res, errResp := r.WithdrawGraphql.WithdrawService.Create(request)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdraw("success", "Successfully created withdraw", res)
	return so, nil
}

// UpdateWithdraw is the resolver for the updateWithdraw field.
func (r *mutationResolver) UpdateWithdraw(ctx context.Context, input model.UpdateWithdrawInput) (*model.APIResponseWithdraw, error) {
	id := int(input.WithdrawID)
	if id == 0 {
		return nil, withdraw_errors.ErrGraphqlWithdrawInvalidID
	}

	withdrawTime, err := time.Parse("2006-01-02", input.WithdrawTime)
	if err != nil {
		return nil, fmt.Errorf("invalid date format for withdrawTime: %v (expected YYYY-MM-DD)", err)
	}

	request := &requests.UpdateWithdrawRequest{
		WithdrawID:     &id,
		CardNumber:     input.CardNumber,
		WithdrawAmount: int(input.WithdrawAmount),
		WithdrawTime:   withdrawTime,
	}

	if err := request.Validate(); err != nil {
		return nil, withdraw_errors.ErrGraphqlValidateUpdateWithdrawRequest
	}

	res, errResp := r.WithdrawGraphql.WithdrawService.Update(request)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdraw("success", "Successfully updated withdraw", res)
	return so, nil
}

// TrashedWithdraw is the resolver for the trashedWithdraw field.
func (r *mutationResolver) TrashedWithdraw(ctx context.Context, input model.FindByIDWithdrawInput) (*model.APIResponseWithdrawDeleteAt, error) {
	id := int(input.WithdrawID)
	if id == 0 {
		return nil, withdraw_errors.ErrGraphqlWithdrawInvalidID
	}

	withdraw, err := r.WithdrawGraphql.WithdrawService.TrashedWithdraw(id)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdrawDeleteAt("success", "Successfully trashed withdraw", withdraw)
	return so, nil
}

// RestoreWithdraw is the resolver for the restoreWithdraw field.
func (r *mutationResolver) RestoreWithdraw(ctx context.Context, input model.FindByIDWithdrawInput) (*model.APIResponseWithdrawDeleteAt, error) {
	id := int(input.WithdrawID)
	if id == 0 {
		return nil, withdraw_errors.ErrGraphqlWithdrawInvalidID
	}

	withdraw, err := r.WithdrawGraphql.WithdrawService.RestoreWithdraw(id)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdrawDeleteAt("success", "Successfully restored withdraw", withdraw)
	return so, nil
}

// DeleteWithdrawPermanent is the resolver for the deleteWithdrawPermanent field.
func (r *mutationResolver) DeleteWithdrawPermanent(ctx context.Context, input model.FindByIDWithdrawInput) (*model.APIResponseWithdrawDelete, error) {
	id := int(input.WithdrawID)
	if id == 0 {
		return nil, withdraw_errors.ErrGraphqlWithdrawInvalidID
	}

	_, err := r.WithdrawGraphql.WithdrawService.DeleteWithdrawPermanent(id)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlWithdrawDelete("success", "Successfully deleted withdraw permanently")
	return so, nil
}

// RestoreAllWithdraw is the resolver for the restoreAllWithdraw field.
func (r *mutationResolver) RestoreAllWithdraw(ctx context.Context) (*model.APIResponseWithdrawAll, error) {
	_, err := r.WithdrawGraphql.WithdrawService.RestoreAllWithdraw()
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlWithdrawAll("success", "Successfully restored all withdraws")
	return so, nil
}

// DeleteAllWithdrawPermanent is the resolver for the deleteAllWithdrawPermanent field.
func (r *mutationResolver) DeleteAllWithdrawPermanent(ctx context.Context) (*model.APIResponseWithdrawAll, error) {
	_, err := r.WithdrawGraphql.WithdrawService.DeleteAllWithdrawPermanent()
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlWithdrawAll("success", "Successfully deleted all withdraws permanently")
	return so, nil
}

// FindAllWithdraw is the resolver for the findAllWithdraw field.
func (r *queryResolver) FindAllWithdraw(ctx context.Context, input model.FindAllWithdrawInput) (*model.APIResponsePaginationWithdraw, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllWithdraws{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	withdraws, totalRecords, errResp := r.WithdrawGraphql.WithdrawService.FindAll(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponsePaginationWithdraw(
		"success",
		"withdraws retrieved successfully",
		withdraws,
		paginationMeta,
	)

	return so, nil
}

// FindAllWithdrawByCardNumber is the resolver for the findAllWithdrawByCardNumber field.
func (r *queryResolver) FindAllWithdrawByCardNumber(ctx context.Context, input model.FindAllWithdrawByCardNumberInput) (*model.APIResponsePaginationWithdraw, error) {
	cardNumber := input.CardNumber
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllWithdrawCardNumber{
		CardNumber: cardNumber,
		Page:       page,
		PageSize:   pageSize,
		Search:     *search,
	}

	withdraws, totalRecords, errResp := r.WithdrawGraphql.WithdrawService.FindAllByCardNumber(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponsePaginationWithdraw(
		"success",
		"withdraws retrieved successfully by card number",
		withdraws,
		paginationMeta,
	)

	return so, nil
}

// FindByIDWithdraw is the resolver for the findByIdWithdraw field.
func (r *queryResolver) FindByIDWithdraw(ctx context.Context, input model.FindByIDWithdrawInput) (*model.APIResponseWithdraw, error) {
	id := int(input.WithdrawID)
	if id == 0 {
		return nil, withdraw_errors.ErrGraphqlWithdrawInvalidID
	}

	withdraw, errResp := r.WithdrawGraphql.WithdrawService.FindById(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdraw(
		"success",
		"withdraw retrieved successfully",
		withdraw,
	)

	return so, nil
}

// FindMonthlyWithdrawStatusSuccess is the resolver for the findMonthlyWithdrawStatusSuccess field.
func (r *queryResolver) FindMonthlyWithdrawStatusSuccess(ctx context.Context, input model.FindMonthlyWithdrawStatusInput) (*model.APIResponseWithdrawMonthStatusSuccess, error) {
	year := int(input.Year)
	month := int(input.Month)

	if year <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidYear
	}

	if month <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidMonth
	}

	reqService := requests.MonthStatusWithdraw{
		Year:  year,
		Month: month,
	}

	res, err := r.WithdrawGraphql.WithdrawService.FindMonthWithdrawStatusSuccess(&reqService)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdrawMonthStatusSuccess(
		"success",
		"Successfully fetched monthly Withdraw status success",
		res,
	)

	return so, nil
}

// FindYearlyWithdrawStatusSuccess is the resolver for the findYearlyWithdrawStatusSuccess field.
func (r *queryResolver) FindYearlyWithdrawStatusSuccess(ctx context.Context, input model.FindYearWithdrawStatusInput) (*model.APIResponseWithdrawYearStatusSuccess, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidYear
	}

	res, err := r.WithdrawGraphql.WithdrawService.FindYearlyWithdrawStatusSuccess(year)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdrawYearStatusSuccess(
		"success",
		"Successfully fetched yearly Withdraw status success",
		res,
	)

	return so, nil
}

// FindMonthlyWithdrawStatusFailed is the resolver for the findMonthlyWithdrawStatusFailed field.
func (r *queryResolver) FindMonthlyWithdrawStatusFailed(ctx context.Context, input model.FindMonthlyWithdrawStatusInput) (*model.APIResponseWithdrawMonthStatusFailed, error) {
	year := int(input.Year)
	month := int(input.Month)

	if year <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidYear
	}

	if month <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidMonth
	}

	reqService := requests.MonthStatusWithdraw{
		Year:  year,
		Month: month,
	}

	res, err := r.WithdrawGraphql.WithdrawService.FindMonthWithdrawStatusFailed(&reqService)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdrawMonthStatusFailed(
		"success",
		"Successfully fetched monthly Withdraw status failed",
		res,
	)

	return so, nil
}

// FindYearlyWithdrawStatusFailed is the resolver for the findYearlyWithdrawStatusFailed field.
func (r *queryResolver) FindYearlyWithdrawStatusFailed(ctx context.Context, input model.FindYearWithdrawStatusInput) (*model.APIResponseWithdrawYearStatusFailed, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidYear
	}

	res, err := r.WithdrawGraphql.WithdrawService.FindYearlyWithdrawStatusFailed(year)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdrawYearStatusFailed(
		"success",
		"Successfully fetched yearly Withdraw status failed",
		res,
	)

	return so, nil
}

// FindMonthlyWithdrawStatusSuccessCardNumber is the resolver for the findMonthlyWithdrawStatusSuccessCardNumber field.
func (r *queryResolver) FindMonthlyWithdrawStatusSuccessCardNumber(ctx context.Context, input model.FindMonthlyWithdrawStatusCardNumberInput) (*model.APIResponseWithdrawMonthStatusSuccess, error) {
	year := int(input.Year)
	month := int(input.Month)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidYear
	}

	if month <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidMonth
	}

	if cardNumber == "" {
		return nil, withdraw_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthStatusWithdrawCardNumber{
		Year:       year,
		Month:      month,
		CardNumber: cardNumber,
	}

	res, err := r.WithdrawGraphql.WithdrawService.FindMonthWithdrawStatusSuccessByCardNumber(&reqService)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdrawMonthStatusSuccess(
		"success",
		"Successfully fetched monthly Withdraw status success",
		res,
	)

	return so, nil
}

// FindYearlyWithdrawStatusSuccessCardNumber is the resolver for the findYearlyWithdrawStatusSuccessCardNumber field.
func (r *queryResolver) FindYearlyWithdrawStatusSuccessCardNumber(ctx context.Context, input model.FindYearWithdrawStatusCardNumberInput) (*model.APIResponseWithdrawYearStatusSuccess, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidYear
	}

	if cardNumber == "" {
		return nil, withdraw_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.YearStatusWithdrawCardNumber{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.WithdrawGraphql.WithdrawService.FindYearlyWithdrawStatusSuccessByCardNumber(&reqService)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdrawYearStatusSuccess(
		"success",
		"Successfully fetched yearly Withdraw status success",
		res,
	)

	return so, nil
}

// FindMonthlyWithdrawStatusFailedCardNumber is the resolver for the findMonthlyWithdrawStatusFailedCardNumber field.
func (r *queryResolver) FindMonthlyWithdrawStatusFailedCardNumber(ctx context.Context, input model.FindMonthlyWithdrawStatusCardNumberInput) (*model.APIResponseWithdrawMonthStatusFailed, error) {
	year := int(input.Year)
	month := int(input.Month)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidYear
	}

	if month <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidMonth
	}

	if cardNumber == "" {
		return nil, withdraw_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthStatusWithdrawCardNumber{
		Year:       year,
		Month:      month,
		CardNumber: cardNumber,
	}

	res, err := r.WithdrawGraphql.WithdrawService.FindMonthWithdrawStatusFailedByCardNumber(&reqService)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdrawMonthStatusFailed(
		"success",
		"Successfully fetched monthly Withdraw status failed",
		res,
	)

	return so, nil
}

// FindYearlyWithdrawStatusFailedCardNumber is the resolver for the findYearlyWithdrawStatusFailedCardNumber field.
func (r *queryResolver) FindYearlyWithdrawStatusFailedCardNumber(ctx context.Context, input model.FindYearWithdrawStatusCardNumberInput) (*model.APIResponseWithdrawYearStatusFailed, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidYear
	}

	if cardNumber == "" {
		return nil, withdraw_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.YearStatusWithdrawCardNumber{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.WithdrawGraphql.WithdrawService.FindYearlyWithdrawStatusFailedByCardNumber(&reqService)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdrawYearStatusFailed(
		"success",
		"Successfully fetched yearly Withdraw status failed",
		res,
	)

	return so, nil
}

// FindMonthlyWithdraws is the resolver for the findMonthlyWithdraws field.
func (r *queryResolver) FindMonthlyWithdraws(ctx context.Context, input model.FindYearWithdrawStatusInput) (*model.APIResponseWithdrawMonthAmount, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidYear
	}

	res, err := r.WithdrawGraphql.WithdrawService.FindMonthlyWithdraws(year)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdrawMonthAmount(
		"success",
		"Successfully fetched monthly Withdraw amounts",
		res,
	)

	return so, nil
}

// FindYearlyWithdraws is the resolver for the findYearlyWithdraws field.
func (r *queryResolver) FindYearlyWithdraws(ctx context.Context, input model.FindYearWithdrawStatusInput) (*model.APIResponseWithdrawYearAmount, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidYear
	}

	res, err := r.WithdrawGraphql.WithdrawService.FindYearlyWithdraws(year)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdrawYearAmount(
		"success",
		"Successfully fetched yearly Withdraw amounts",
		res,
	)

	return so, nil
}

// FindMonthlyWithdrawsByCardNumber is the resolver for the findMonthlyWithdrawsByCardNumber field.
func (r *queryResolver) FindMonthlyWithdrawsByCardNumber(ctx context.Context, input model.FindYearWithdrawCardNumberInput) (*model.APIResponseWithdrawMonthAmount, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidYear
	}
	if cardNumber == "" {
		return nil, withdraw_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.YearMonthCardNumber{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.WithdrawGraphql.WithdrawService.FindMonthlyWithdrawsByCardNumber(&reqService)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdrawMonthAmount(
		"success",
		"Successfully fetched monthly Withdraw amounts by card number",
		res,
	)

	return so, nil
}

// FindYearlyWithdrawsByCardNumber is the resolver for the findYearlyWithdrawsByCardNumber field.
func (r *queryResolver) FindYearlyWithdrawsByCardNumber(ctx context.Context, input model.FindYearWithdrawCardNumberInput) (*model.APIResponseWithdrawYearAmount, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, withdraw_errors.ErrGraphqlInvalidYear
	}
	if cardNumber == "" {
		return nil, withdraw_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.YearMonthCardNumber{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.WithdrawGraphql.WithdrawService.FindYearlyWithdrawsByCardNumber(&reqService)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponseWithdrawYearAmount(
		"success",
		"Successfully fetched yearly Withdraw amounts by card number",
		res,
	)

	return so, nil
}

// FindByActiveWithdraw is the resolver for the findByActiveWithdraw field.
func (r *queryResolver) FindByActiveWithdraw(ctx context.Context, input model.FindAllWithdrawInput) (*model.APIResponsePaginationWithdrawDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllWithdraws{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	withdraws, totalRecords, errResp := r.WithdrawGraphql.WithdrawService.FindByActive(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponsePaginationWithdrawDeleteAt("success", "active withdraws retrieved successfully", withdraws, paginationMeta)

	return so, nil
}

// FindByTrashedWithdraw is the resolver for the findByTrashedWithdraw field.
func (r *queryResolver) FindByTrashedWithdraw(ctx context.Context, input model.FindAllWithdrawInput) (*model.APIResponsePaginationWithdrawDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllWithdraws{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	withdraws, totalRecords, errResp := r.WithdrawGraphql.WithdrawService.FindByTrashed(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.WithdrawGraphql.Mapping.ToGraphqlResponsePaginationWithdrawDeleteAt("success", "trashed withdraws retrieved successfully", withdraws, paginationMeta)

	return so, nil
}
