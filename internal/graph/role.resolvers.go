package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"math"

	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/requests"
	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/response"
	"github.com/MamangRust/paymentgatewaygraphql/internal/graph/model"
	"github.com/MamangRust/paymentgatewaygraphql/pkg/errors/role_errors"
)

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input model.CreateRoleInput) (*model.APIResponseRole, error) {
	req := &requests.CreateRoleRequest{
		Name: input.Name,
	}

	if err := req.Validate(); err != nil {
		return nil, role_errors.ErrGraphqlValidateCreateRole
	}

	role, err := r.RoleGraphql.RoleService.CreateRole(req)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.RoleGraphql.Mapping.ToGraphqlResponseRole("success", "Successfully created role", role)

	return so, nil
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, input model.UpdateRoleInput) (*model.APIResponseRole, error) {
	roleId := int(input.ID)

	if roleId == 0 {
		return nil, role_errors.ErrGraphqlRoleInvalidId
	}

	name := input.Name

	req := &requests.UpdateRoleRequest{
		ID:   &roleId,
		Name: name,
	}

	if err := req.Validate(); err != nil {
		return nil, role_errors.ErrGraphqlValidateUpdateRole
	}

	role, err := r.RoleGraphql.RoleService.UpdateRole(req)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.RoleGraphql.Mapping.ToGraphqlResponseRole("success", "Successfully updated role", role)

	return so, nil
}

// TrashedRole is the resolver for the trashedRole field.
func (r *mutationResolver) TrashedRole(ctx context.Context, input model.FindByIDRoleInput) (*model.APIResponseRoleDeleteAt, error) {
	roleID := int(input.RoleID)

	if roleID == 0 {
		return nil, role_errors.ErrGraphqlRoleInvalidId
	}

	role, err := r.RoleGraphql.RoleService.TrashedRole(roleID)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.RoleGraphql.Mapping.ToGraphqlResponseRoleDeleteAt("success", "Successfully trashed role", role)

	return so, nil
}

// RestoreRole is the resolver for the restoreRole field.
func (r *mutationResolver) RestoreRole(ctx context.Context, input model.FindByIDRoleInput) (*model.APIResponseRoleDeleteAt, error) {
	roleID := int(input.RoleID)

	if roleID == 0 {
		return nil, role_errors.ErrGraphqlRoleInvalidId
	}

	role, err := r.RoleGraphql.RoleService.RestoreRole(roleID)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.RoleGraphql.Mapping.ToGraphqlResponseRoleDeleteAt("success", "Successfully restore role", role)

	return so, nil
}

// DeleteRolePermanent is the resolver for the deleteRolePermanent field.
func (r *mutationResolver) DeleteRolePermanent(ctx context.Context, input model.FindByIDRoleInput) (*model.APIResponseRoleDelete, error) {
	roleID := int(input.RoleID)

	if roleID == 0 {
		return nil, role_errors.ErrGraphqlRoleInvalidId
	}

	_, errResp := r.RoleGraphql.RoleService.DeleteRolePermanent(roleID)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.RoleGraphql.Mapping.ToGraphqlResponseDelete("success", "Merchant permanently deleted")

	return so, nil
}

// RestoreAllRole is the resolver for the restoreAllRole field.
func (r *mutationResolver) RestoreAllRole(ctx context.Context) (*model.APIResponseRoleAll, error) {
	_, errResp := r.RoleGraphql.RoleService.RestoreAllRole()

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.RoleGraphql.Mapping.ToGraphqlResponseAll("success", "all Merchants restored successfully")

	return so, nil
}

// DeleteAllRolePermanent is the resolver for the deleteAllRolePermanent field.
func (r *mutationResolver) DeleteAllRolePermanent(ctx context.Context) (*model.APIResponseRoleAll, error) {
	_, errResp := r.RoleGraphql.RoleService.DeleteAllRolePermanent()

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.RoleGraphql.Mapping.ToGraphqlResponseAll("success", "all Merchants restored successfully")

	return so, nil
}

// FindAllRole is the resolver for the findAllRole field.
func (r *queryResolver) FindAllRole(ctx context.Context, input *model.FindAllRoleInput) (*model.APIResponsePaginationRole, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllRoles{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	Roles, totalRecords, errResp := r.RoleGraphql.RoleService.FindAll(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.RoleGraphql.Mapping.ToGraphqlResponsePaginationRole("success", "Roles retrieved successfully", Roles, paginationMeta)

	return so, nil
}

// FindByIDRole is the resolver for the findByIdRole field.
func (r *queryResolver) FindByIDRole(ctx context.Context, input model.FindByIDRoleInput) (*model.APIResponseRole, error) {
	id := int(input.RoleID)
	if id == 0 {
		return nil, role_errors.ErrGraphqlRoleInvalidUserId
	}

	role, errResp := r.RoleGraphql.RoleService.FindById(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.RoleGraphql.Mapping.ToGraphqlResponseRole("success", "Role retrieved successfully", role)

	return so, nil
}

// FindByActiveRole is the resolver for the findByActiveRole field.
func (r *queryResolver) FindByActiveRole(ctx context.Context, input *model.FindAllRoleInput) (*model.APIResponsePaginationRoleDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllRoles{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	Roles, totalRecords, errResp := r.RoleGraphql.RoleService.FindByActiveRole(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.RoleGraphql.Mapping.ToGraphqlResponsePaginationRoleDeleteAt("success", "Roles retrieved successfully", Roles, paginationMeta)

	return so, nil
}

// FindByTrashedRole is the resolver for the findByTrashedRole field.
func (r *queryResolver) FindByTrashedRole(ctx context.Context, input *model.FindAllRoleInput) (*model.APIResponsePaginationRoleDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllRoles{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	Roles, totalRecords, errResp := r.RoleGraphql.RoleService.FindByTrashedRole(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.RoleGraphql.Mapping.ToGraphqlResponsePaginationRoleDeleteAt("success", "Roles retrieved successfully", Roles, paginationMeta)

	return so, nil
}

// FindByUserIDRole is the resolver for the findByUserIdRole field.
func (r *queryResolver) FindByUserIDRole(ctx context.Context, input model.FindByIDUserRoleInput) (*model.APIResponsesRole, error) {
	id := int(input.UserID)
	if id == 0 {
		return nil, role_errors.ErrGraphqlRoleInvalidUserId
	}

	role, errResp := r.RoleGraphql.RoleService.FindByUserId(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.RoleGraphql.Mapping.ToGraphqlResponsesRole("success", "Role retrieved successfully", role)

	return so, nil
}
