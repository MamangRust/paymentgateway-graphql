package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/requests"
	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/response"
	"github.com/MamangRust/paymentgatewaygraphql/internal/graph/model"
	mycontext "github.com/MamangRust/paymentgatewaygraphql/pkg/context"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.RegisterInput) (*model.APIResponseRegister, error) {
	request := &requests.CreateUserRequest{
		FirstName:       input.Firstname,
		LastName:        input.Lastname,
		Email:           input.Email,
		Password:        input.Password,
		ConfirmPassword: input.ConfirmPassword,
	}

	res, err := r.AuthGraphql.AuthService.Register(request)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.AuthGraphql.Mapping.ToGraphqlResponseRegister("success", "user registered successfully", res)

	return so, nil
}

// LoginUser is the resolver for the loginUser field.
func (r *mutationResolver) LoginUser(ctx context.Context, input model.LoginInput) (*model.APIResponseLogin, error) {
	requests := &requests.AuthRequest{
		Email:    input.Email,
		Password: input.Password,
	}

	res, err := r.AuthGraphql.AuthService.Login(requests)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.AuthGraphql.Mapping.ToGraphqlResponseLogin("success", "login successful", res)

	return so, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (*model.APIResponseRefreshToken, error) {
	res, err := r.AuthGraphql.AuthService.RefreshToken(input.RefreshToken)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.AuthGraphql.Mapping.ToGraphqlResponseRefreshToken("success", "token refreshed successfully", res)

	return so, nil
}

// GetMe is the resolver for the getMe field.
func (r *queryResolver) GetMe(ctx context.Context) (*model.APIResponseGetMe, error) {
	uid, ok := mycontext.UserForContext(ctx)

	if !ok || uid == 0 {
		return nil, fmt.Errorf("unauthorized: user ID not found in request context")
	}

	res, err := r.AuthGraphql.AuthService.GetMe(uid)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.AuthGraphql.Mapping.ToGraphqlResponseGetMe("success", "user profile retrieved", res)

	return so, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
