package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"math"

	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/requests"
	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/response"
	"github.com/MamangRust/paymentgatewaygraphql/internal/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.APIResponseUserResponse, error) {
	req := &requests.CreateUserRequest{
		FirstName:       input.Firstname,
		LastName:        input.Lastname,
		Email:           input.Email,
		Password:        input.Password,
		ConfirmPassword: input.ConfirmPassword,
	}

	if err := req.Validate(); err != nil {
		return nil, fmt.Errorf("validation failed: %s", err.Error())
	}

	user, errResp := r.UserGraphql.UserService.CreateUser(req)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	return r.UserGraphql.Mapping.ToGraphqlResponseUser("success", "user created successfully", user), nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.APIResponseUserResponse, error) {
	id := int(input.ID)
	if id == 0 {
		return nil, fmt.Errorf("invalid user ID")
	}

	req := &requests.UpdateUserRequest{
		UserID:          &id,
		FirstName:       *input.Firstname,
		LastName:        *input.Lastname,
		Email:           *input.Email,
		Password:        *input.Password,
		ConfirmPassword: *input.ConfirmPassword,
	}

	user, errResp := r.UserGraphql.UserService.UpdateUser(req)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	return r.UserGraphql.Mapping.ToGraphqlResponseUser("success", "user updated successfully", user), nil
}

// TrashedUser is the resolver for the trashedUser field.
func (r *mutationResolver) TrashedUser(ctx context.Context, input model.FindByIDUserInput) (*model.APIResponseUserResponseDeleteAt, error) {
	id := int(input.ID)
	if id == 0 {
		return nil, fmt.Errorf("invalid user ID")
	}

	user, errResp := r.UserGraphql.UserService.TrashedUser(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	return r.UserGraphql.Mapping.ToGraphqlResponseUserDeleteAt("success", "user moved to trash", user), nil
}

// RestoreUser is the resolver for the restoreUser field.
func (r *mutationResolver) RestoreUser(ctx context.Context, input model.FindByIDUserInput) (*model.APIResponseUserResponseDeleteAt, error) {
	id := int(input.ID)
	if id == 0 {
		return nil, fmt.Errorf("invalid user ID")
	}

	user, errResp := r.UserGraphql.UserService.RestoreUser(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	return r.UserGraphql.Mapping.ToGraphqlResponseUserDeleteAt("success", "user restored successfully", user), nil
}

// DeleteUserPermanent is the resolver for the deleteUserPermanent field.
func (r *mutationResolver) DeleteUserPermanent(ctx context.Context, input model.FindByIDUserInput) (*model.APIResponseUserDelete, error) {
	id := int(input.ID)
	if id == 0 {
		return nil, fmt.Errorf("invalid user ID")
	}

	_, errResp := r.UserGraphql.UserService.DeleteUserPermanent(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	return r.UserGraphql.Mapping.ToGraphqlResponseUserDelete("success", "user permanently deleted"), nil
}

// RestoreAllUser is the resolver for the restoreAllUser field.
func (r *mutationResolver) RestoreAllUser(ctx context.Context) (*model.APIResponseUserAll, error) {
	_, errResp := r.UserGraphql.UserService.RestoreAllUser()
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	return r.UserGraphql.Mapping.ToGraphqlResponseUserAll("success", "all users restored successfully"), nil
}

// DeleteAllUserPermanent is the resolver for the deleteAllUserPermanent field.
func (r *mutationResolver) DeleteAllUserPermanent(ctx context.Context) (*model.APIResponseUserAll, error) {
	_, errResp := r.UserGraphql.UserService.DeleteAllUserPermanent()
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	return r.UserGraphql.Mapping.ToGraphqlResponseUserAll("success", "all users permanently deleted"), nil
}

// FindAllUsers is the resolver for the findAllUsers field.
func (r *queryResolver) FindAllUsers(ctx context.Context, input *model.FindAllUserInput) (*model.APIResponsePaginationUser, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllUsers{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	users, totalRecords, errResp := r.UserGraphql.UserService.FindAll(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	return r.UserGraphql.Mapping.ToGraphqlResponsePaginationUser("success", "users retrieved successfully", users, paginationMeta), nil
}

// FindByIDUser is the resolver for the findByIdUser field.
func (r *queryResolver) FindByIDUser(ctx context.Context, input model.FindByIDUserInput) (*model.APIResponseUserResponse, error) {
	id := int(input.ID)
	if id == 0 {
		return nil, fmt.Errorf("invalid user ID")
	}

	user, errResp := r.UserGraphql.UserService.FindByID(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	return r.UserGraphql.Mapping.ToGraphqlResponseUser("success", "user retrieved successfully", user), nil
}

// FindByActiveUsers is the resolver for the findByActiveUsers field.
func (r *queryResolver) FindByActiveUsers(ctx context.Context, input *model.FindAllUserInput) (*model.APIResponsePaginationUserDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllUsers{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	users, totalRecords, errResp := r.UserGraphql.UserService.FindByActive(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	return r.UserGraphql.Mapping.ToGraphqlResponsePaginationUserDeleteAt("success", "active users retrieved successfully", users, paginationMeta), nil
}

// FindByTrashedUsers is the resolver for the findByTrashedUsers field.
func (r *queryResolver) FindByTrashedUsers(ctx context.Context, input *model.FindAllUserInput) (*model.APIResponsePaginationUserDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllUsers{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	users, totalRecords, errResp := r.UserGraphql.UserService.FindByTrashed(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	return r.UserGraphql.Mapping.ToGraphqlResponsePaginationUserDeleteAt("success", "trashed users retrieved successfully", users, paginationMeta), nil
}
