package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"math"
	"time"

	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/requests"
	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/response"
	"github.com/MamangRust/paymentgatewaygraphql/internal/graph/model"
	"github.com/MamangRust/paymentgatewaygraphql/pkg/errors/transaction_errors"
)

// CreateTransaction is the resolver for the createTransaction field.
func (r *mutationResolver) CreateTransaction(ctx context.Context, input model.CreateTransactionRequest) (*model.APIResponseTransaction, error) {
	ok, err := r.TransactionGraphql.Permission.ValidateApiKey(input.APIKey)

	if err != nil {
		return nil, fmt.Errorf("failed to validate API key: %w", err)
	}
	if !ok {
		return nil, fmt.Errorf("unauthorized: invalid API key")
	}

	transactionTime, err := time.Parse("2006-01-02", input.TransactionTime)
	merchantId := int(input.MerchantID)

	if err != nil {
		return nil, fmt.Errorf("invalid date format for transactionTime: %v (expected YYYY-MM-DD)", err)
	}
	req := requests.CreateTransactionRequest{
		CardNumber:      input.CardNumber,
		Amount:          int(input.Amount),
		PaymentMethod:   input.PaymentMethod,
		MerchantID:      &merchantId,
		TransactionTime: transactionTime,
	}

	if err := req.Validate(); err != nil {
		return nil, transaction_errors.ErrGraphqlValidateCreateTransactionRequest
	}

	res, errResp := r.TransactionGraphql.TransactionService.Create(input.APIKey, &req)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransaction("success", "Successfully created transaction", res)

	return so, nil
}

// UpdateTransaction is the resolver for the updateTransaction field.
func (r *mutationResolver) UpdateTransaction(ctx context.Context, input model.UpdateTransactionRequest) (*model.APIResponseTransaction, error) {
	id := int(input.ID)

	if id == 0 {
		return nil, transaction_errors.ErrGraphqlTransactionInvalidID
	}

	ok, err := r.TransactionGraphql.Permission.ValidateApiKey(input.APIKey)

	if err != nil {
		return nil, fmt.Errorf("failed to validate API key: %w", err)
	}
	if !ok {
		return nil, fmt.Errorf("unauthorized: invalid API key")
	}

	transactionTime, err := time.Parse("2006-01-02", input.TransactionTime)
	merchantId := int(input.MerchantID)

	if err != nil {
		return nil, fmt.Errorf("invalid date format for transactionTime: %v (expected YYYY-MM-DD)", err)
	}
	req := requests.UpdateTransactionRequest{
		TransactionID:   &id,
		CardNumber:      input.CardNumber,
		Amount:          int(input.Amount),
		PaymentMethod:   input.PaymentMethod,
		MerchantID:      &merchantId,
		TransactionTime: transactionTime,
	}

	if err := req.Validate(); err != nil {
		return nil, transaction_errors.ErrGraphqlValidateCreateTransactionRequest
	}

	res, errResp := r.TransactionGraphql.TransactionService.Update(input.APIKey, &req)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransaction("success", "Successfully updated transaction", res)

	return so, nil
}

// TrashedTransaction is the resolver for the trashedTransaction field.
func (r *mutationResolver) TrashedTransaction(ctx context.Context, input model.FindByIDTransactionRequest) (*model.APIResponseTransactionDeleteAt, error) {
	id := int(input.TransactionID)

	if id == 0 {
		return nil, transaction_errors.ErrGraphqlTransactionInvalidID
	}

	res, err := r.TransactionGraphql.TransactionService.TrashedTransaction(id)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionDeleteAt("success", "Successfully trashed transaction", res)

	return so, nil
}

// RestoreTransaction is the resolver for the restoreTransaction field.
func (r *mutationResolver) RestoreTransaction(ctx context.Context, input model.FindByIDTransactionRequest) (*model.APIResponseTransactionDeleteAt, error) {
	id := int(input.TransactionID)

	if id == 0 {
		return nil, transaction_errors.ErrGraphqlTransactionInvalidID
	}

	res, err := r.TransactionGraphql.TransactionService.RestoreTransaction(id)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionDeleteAt("success", "Successfully restore transaction", res)

	return so, nil
}

// DeleteTransactionPermanent is the resolver for the deleteTransactionPermanent field.
func (r *mutationResolver) DeleteTransactionPermanent(ctx context.Context, input model.FindByIDTransactionRequest) (*model.APIResponseTransactionDelete, error) {
	id := int(input.TransactionID)

	if id == 0 {
		return nil, transaction_errors.ErrGraphqlTransactionInvalidID
	}

	_, err := r.TransactionGraphql.TransactionService.DeleteTransactionPermanent(id)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlTransactionDelete("success", "Successfully deleted transaction")

	return so, nil
}

// RestoreAllTransactions is the resolver for the restoreAllTransactions field.
func (r *mutationResolver) RestoreAllTransactions(ctx context.Context) (*model.APIResponseTransactionAll, error) {
	_, err := r.TransactionGraphql.TransactionService.RestoreAllTransaction()

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlTransactionAll("success", "Successfully restore all transaction")

	return so, nil
}

// DeleteAllTransactionsPermanent is the resolver for the deleteAllTransactionsPermanent field.
func (r *mutationResolver) DeleteAllTransactionsPermanent(ctx context.Context) (*model.APIResponseTransactionAll, error) {
	_, err := r.TransactionGraphql.TransactionService.DeleteAllTransactionPermanent()

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlTransactionAll("success", "Successfully delete all transaction")

	return so, nil
}

// FindAllTransactions is the resolver for the findAllTransactions field.
func (r *queryResolver) FindAllTransactions(ctx context.Context, input *model.FindAllTransactionRequest) (*model.APIResponsePaginationTransaction, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllTransactions{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	Transactions, totalRecords, errResp := r.TransactionGraphql.TransactionService.FindAll(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlPaginationTransaction("success", "Transactions retrieved successfully", Transactions, paginationMeta)

	return so, nil
}

// FindAllTransactionsByCardNumber is the resolver for the findAllTransactionsByCardNumber field.
func (r *queryResolver) FindAllTransactionsByCardNumber(ctx context.Context, input *model.FindAllTransactionCardNumberRequest) (*model.APIResponsePaginationTransaction, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search
	cardNumber := input.CardNumber

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllTransactionCardNumber{
		Page:       page,
		PageSize:   pageSize,
		Search:     *search,
		CardNumber: cardNumber,
	}

	Transactions, totalRecords, errResp := r.TransactionGraphql.TransactionService.FindAllByCardNumber(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlPaginationTransaction("success", "Transactions retrieved successfully", Transactions, paginationMeta)

	return so, nil
}

// FindTransactionByID is the resolver for the findTransactionById field.
func (r *queryResolver) FindTransactionByID(ctx context.Context, input *model.FindByIDTransactionRequest) (*model.APIResponseTransaction, error) {
	id := int(input.TransactionID)

	if id == 0 {
		return nil, transaction_errors.ErrGraphqlTransactionInvalidID
	}

	res, err := r.TransactionGraphql.TransactionService.FindById(id)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransaction("success", "Transaction fetched successfully", res)

	return so, nil
}

// FindTransactionByMerchantID is the resolver for the findTransactionByMerchantId field.
func (r *queryResolver) FindTransactionByMerchantID(ctx context.Context, input *model.FindTransactionByMerchantIDRequest) (*model.APIResponseTransactions, error) {
	id := int(input.MerchantID)

	if id == 0 {
		return nil, transaction_errors.ErrGraphqlTransactionInvalidID
	}

	res, err := r.TransactionGraphql.TransactionService.FindTransactionByMerchantId(id)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactions("success", "Transaction fetched successfully", res)

	return so, nil
}

// FindActiveTransactions is the resolver for the findActiveTransactions field.
func (r *queryResolver) FindActiveTransactions(ctx context.Context, input *model.FindAllTransactionRequest) (*model.APIResponsePaginationTransactionDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllTransactions{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	Transactions, totalRecords, errResp := r.TransactionGraphql.TransactionService.FindByActive(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlPaginationTransactionDeleteAt("success", "Transactions retrieved successfully", Transactions, paginationMeta)

	return so, nil
}

// FindTrashedTransactions is the resolver for the findTrashedTransactions field.
func (r *queryResolver) FindTrashedTransactions(ctx context.Context, input *model.FindAllTransactionRequest) (*model.APIResponsePaginationTransactionDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllTransactions{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	Transactions, totalRecords, errResp := r.TransactionGraphql.TransactionService.FindByTrashed(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlPaginationTransactionDeleteAt("success", "Transactions retrieved successfully", Transactions, paginationMeta)

	return so, nil
}

// FindMonthlyTransactionStatusSuccess is the resolver for the findMonthlyTransactionStatusSuccess field.
func (r *queryResolver) FindMonthlyTransactionStatusSuccess(ctx context.Context, input model.FindMonthlyTransactionStatus) (*model.APIResponseTransactionMonthStatusSuccess, error) {
	year := int(input.Year)
	month := int(input.Month)

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	if month <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidMonth
	}

	reqService := requests.MonthStatusTransaction{
		Year:  year,
		Month: month,
	}

	res, err := r.TransactionGraphql.TransactionService.FindMonthTransactionStatusSuccess(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionMonthStatusSuccess("success", "Successfully fetched monthly Transaction status success", res)

	return so, nil
}

// FindYearlyTransactionStatusSuccess is the resolver for the findYearlyTransactionStatusSuccess field.
func (r *queryResolver) FindYearlyTransactionStatusSuccess(ctx context.Context, input model.FindYearTransactionStatus) (*model.APIResponseTransactionYearStatusSuccess, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	res, err := r.TransactionGraphql.TransactionService.FindYearlyTransactionStatusSuccess(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionYearStatusSuccess("success", "Successfully fetched yearly Transaction status success", res)

	return so, nil
}

// FindMonthlyTransactionStatusFailed is the resolver for the findMonthlyTransactionStatusFailed field.
func (r *queryResolver) FindMonthlyTransactionStatusFailed(ctx context.Context, input model.FindMonthlyTransactionStatus) (*model.APIResponseTransactionMonthStatusFailed, error) {
	year := int(input.Year)
	month := int(input.Month)

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	if month <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidMonth
	}

	reqService := requests.MonthStatusTransaction{
		Year:  year,
		Month: month,
	}

	res, err := r.TransactionGraphql.TransactionService.FindMonthTransactionStatusFailed(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionMonthStatusFailed("success", "Successfully fetched monthly Transaction status failed", res)

	return so, nil
}

// FindYearlyTransactionStatusFailed is the resolver for the findYearlyTransactionStatusFailed field.
func (r *queryResolver) FindYearlyTransactionStatusFailed(ctx context.Context, input model.FindYearTransactionStatus) (*model.APIResponseTransactionYearStatusFailed, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	res, err := r.TransactionGraphql.TransactionService.FindYearlyTransactionStatusFailed(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionYearStatusFailed("success", "Successfully fetched yearly Transaction status failed", res)

	return so, nil
}

// FindMonthlyTransactionStatusSuccessByCardNumber is the resolver for the findMonthlyTransactionStatusSuccessByCardNumber field.
func (r *queryResolver) FindMonthlyTransactionStatusSuccessByCardNumber(ctx context.Context, input model.FindMonthlyTransactionStatusCardNumber) (*model.APIResponseTransactionMonthStatusSuccess, error) {
	year := int(input.Year)
	month := int(input.Month)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	if month <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidMonth
	}

	if cardNumber == "" {
		return nil, transaction_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthStatusTransactionCardNumber{
		Year:       year,
		Month:      month,
		CardNumber: cardNumber,
	}

	res, err := r.TransactionGraphql.TransactionService.FindMonthTransactionStatusSuccessByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionMonthStatusSuccess("success", "Successfully fetched monthly Transaction status success", res)

	return so, nil
}

// FindYearlyTransactionStatusSuccessByCardNumber is the resolver for the findYearlyTransactionStatusSuccessByCardNumber field.
func (r *queryResolver) FindYearlyTransactionStatusSuccessByCardNumber(ctx context.Context, input model.FindYearTransactionStatusCardNumber) (*model.APIResponseTransactionYearStatusSuccess, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	if cardNumber == "" {
		return nil, transaction_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.YearStatusTransactionCardNumber{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.TransactionGraphql.TransactionService.FindYearlyTransactionStatusSuccessByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionYearStatusSuccess("success", "Successfully fetched yearly Transaction status success", res)

	return so, nil
}

// FindMonthlyTransactionStatusFailedByCardNumber is the resolver for the findMonthlyTransactionStatusFailedByCardNumber field.
func (r *queryResolver) FindMonthlyTransactionStatusFailedByCardNumber(ctx context.Context, input model.FindMonthlyTransactionStatusCardNumber) (*model.APIResponseTransactionMonthStatusFailed, error) {
	year := int(input.Year)
	month := int(input.Month)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	if month <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidMonth
	}

	if cardNumber == "" {
		return nil, transaction_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthStatusTransactionCardNumber{
		Year:       year,
		Month:      month,
		CardNumber: cardNumber,
	}

	res, err := r.TransactionGraphql.TransactionService.FindMonthTransactionStatusFailedByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionMonthStatusFailed("success", "Successfully fetched monthly Transaction status success", res)

	return so, nil
}

// FindYearlyTransactionStatusFailedByCardNumber is the resolver for the findYearlyTransactionStatusFailedByCardNumber field.
func (r *queryResolver) FindYearlyTransactionStatusFailedByCardNumber(ctx context.Context, input model.FindYearTransactionStatusCardNumber) (*model.APIResponseTransactionYearStatusFailed, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	if cardNumber == "" {
		return nil, transaction_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.YearStatusTransactionCardNumber{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.TransactionGraphql.TransactionService.FindYearlyTransactionStatusFailedByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionYearStatusFailed("success", "Successfully fetched yearly Transaction status success", res)

	return so, nil
}

// FindMonthlyPaymentMethods is the resolver for the findMonthlyPaymentMethods field.
func (r *queryResolver) FindMonthlyPaymentMethods(ctx context.Context, input model.FindYearTransactionStatus) (*model.APIResponseTransactionMonthMethod, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	res, err := r.TransactionGraphql.TransactionService.FindMonthlyPaymentMethods(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionMonthMethod("success", "Successfully fetched monthly Transaction methods", res)

	return so, nil
}

// FindYearlyPaymentMethods is the resolver for the findYearlyPaymentMethods field.
func (r *queryResolver) FindYearlyPaymentMethods(ctx context.Context, input model.FindYearTransactionStatus) (*model.APIResponseTransactionYearMethod, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	res, err := r.TransactionGraphql.TransactionService.FindYearlyPaymentMethods(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionYearMethod("success", "Successfully fetched yearly Transaction methods", res)

	return so, nil
}

// FindMonthlyAmounts is the resolver for the findMonthlyAmounts field.
func (r *queryResolver) FindMonthlyAmounts(ctx context.Context, input model.FindYearTransactionStatus) (*model.APIResponseTransactionMonthAmount, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	res, err := r.TransactionGraphql.TransactionService.FindMonthlyAmounts(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionMonthAmount("success", "Successfully fetched monthly Transaction amounts", res)

	return so, nil
}

// FindYearlyAmounts is the resolver for the findYearlyAmounts field.
func (r *queryResolver) FindYearlyAmounts(ctx context.Context, input model.FindYearTransactionStatus) (*model.APIResponseTransactionYearAmount, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	res, err := r.TransactionGraphql.TransactionService.FindYearlyAmounts(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionYearAmount("success", "Successfully fetched yearly Transaction amounts", res)

	return so, nil
}

// FindMonthlyPaymentMethodsByCardNumber is the resolver for the findMonthlyPaymentMethodsByCardNumber field.
func (r *queryResolver) FindMonthlyPaymentMethodsByCardNumber(ctx context.Context, input model.FindByYearCardNumberTransactionRequest) (*model.APIResponseTransactionMonthMethod, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	if cardNumber == "" {
		return nil, transaction_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearPaymentMethod{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.TransactionGraphql.TransactionService.FindMonthlyPaymentMethodsByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionMonthMethod("success", "Successfully fetched monthly Transaction methods", res)

	return so, nil
}

// FindYearlyPaymentMethodsByCardNumber is the resolver for the findYearlyPaymentMethodsByCardNumber field.
func (r *queryResolver) FindYearlyPaymentMethodsByCardNumber(ctx context.Context, input model.FindByYearCardNumberTransactionRequest) (*model.APIResponseTransactionYearMethod, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	if cardNumber == "" {
		return nil, transaction_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearPaymentMethod{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.TransactionGraphql.TransactionService.FindYearlyPaymentMethodsByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionYearMethod("success", "Successfully fetched yearly Transaction methods", res)

	return so, nil
}

// FindMonthlyAmountsByCardNumber is the resolver for the findMonthlyAmountsByCardNumber field.
func (r *queryResolver) FindMonthlyAmountsByCardNumber(ctx context.Context, input model.FindByYearCardNumberTransactionRequest) (*model.APIResponseTransactionMonthAmount, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	if cardNumber == "" {
		return nil, transaction_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearPaymentMethod{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.TransactionGraphql.TransactionService.FindMonthlyAmountsByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionMonthAmount("success", "Successfully fetched monthly Transaction amounts", res)

	return so, nil
}

// FindYearlyAmountsByCardNumber is the resolver for the findYearlyAmountsByCardNumber field.
func (r *queryResolver) FindYearlyAmountsByCardNumber(ctx context.Context, input model.FindByYearCardNumberTransactionRequest) (*model.APIResponseTransactionYearAmount, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, transaction_errors.ErrGraphqlInvalidYear
	}

	if cardNumber == "" {
		return nil, transaction_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearPaymentMethod{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.TransactionGraphql.TransactionService.FindYearlyAmountsByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransactionGraphql.Mapping.ToGraphqlResponseTransactionYearAmount("success", "Successfully fetched yearly Transaction amounts", res)

	return so, nil
}
