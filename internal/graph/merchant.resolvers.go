package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"math"

	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/requests"
	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/response"
	"github.com/MamangRust/paymentgatewaygraphql/internal/graph/model"
	"github.com/MamangRust/paymentgatewaygraphql/pkg/errors/merchant_errors"
)

// CreateMerchant is the resolver for the createMerchant field.
func (r *mutationResolver) CreateMerchant(ctx context.Context, input model.CreateMerchantInput) (*model.APIResponseMerchant, error) {
	request := requests.CreateMerchantRequest{
		Name:   input.Name,
		UserID: int(input.UserID),
	}

	if err := request.Validate(); err != nil {
		return nil, merchant_errors.ErrGraphqlValidateCreateMerchant
	}

	merchant, errResp := r.MerchantGraphql.MerchantService.CreateMerchant(&request)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlResponseMerchant("success", "merchant created successfully", merchant)
	return so, nil
}

// UpdateMerchant is the resolver for the updateMerchant field.
func (r *mutationResolver) UpdateMerchant(ctx context.Context, input model.UpdateMerchantInput) (*model.APIResponseMerchant, error) {
	id := int(input.MerchantID)
	if id == 0 {
		return nil, merchant_errors.ErrGraphqlMerchantInvalidID
	}

	request := requests.UpdateMerchantRequest{
		MerchantID: &id,
		Name:       *input.Name,
		UserID:     int(*input.UserID),
		Status:     *input.Status,
	}

	if err := request.Validate(); err != nil {
		return nil, merchant_errors.ErrGraphqlValidateUpdateMerchant
	}

	merchant, errResp := r.MerchantGraphql.MerchantService.UpdateMerchant(&request)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlResponseMerchant("success", "merchant updated successfully", merchant)
	return so, nil
}

// TrashedMerchant is the resolver for the trashedMerchant field.
func (r *mutationResolver) TrashedMerchant(ctx context.Context, input model.FindByIDMerchantInput) (*model.APIResponseMerchantDeleteAt, error) {
	id := int(input.ID)
	if id == 0 {
		return nil, merchant_errors.ErrGraphqlMerchantInvalidID
	}

	merchant, errResp := r.MerchantGraphql.MerchantService.TrashedMerchant(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlResponseMerchantDeleteAt("success", "merchant trashed successfully", merchant)
	return so, nil
}

// RestoreMerchant is the resolver for the restoreMerchant field.
func (r *mutationResolver) RestoreMerchant(ctx context.Context, input model.FindByIDMerchantInput) (*model.APIResponseMerchantDeleteAt, error) {
	id := int(input.ID)
	if id == 0 {
		return nil, merchant_errors.ErrGraphqlMerchantInvalidID
	}

	merchant, errResp := r.MerchantGraphql.MerchantService.RestoreMerchant(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlResponseMerchantDeleteAt("success", "merchant restored successfully", merchant)
	return so, nil
}

// DeleteMerchantPermanent is the resolver for the deleteMerchantPermanent field.
func (r *mutationResolver) DeleteMerchantPermanent(ctx context.Context, input model.FindByIDMerchantInput) (*model.APIResponseMerchantDelete, error) {
	id := int(input.ID)
	if id == 0 {
		return nil, merchant_errors.ErrGraphqlMerchantInvalidID
	}

	_, errResp := r.MerchantGraphql.MerchantService.DeleteMerchantPermanent(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlMerchantDeleteAll("success", "Merchant permanently deleted")

	return so, nil
}

// RestoreAllMerchant is the resolver for the restoreAllMerchant field.
func (r *mutationResolver) RestoreAllMerchant(ctx context.Context) (*model.APIResponseMerchantAll, error) {
	_, errResp := r.MerchantGraphql.MerchantService.RestoreAllMerchant()
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlMerchantAll("success", "all Merchants restored successfully")

	return so, nil
}

// DeleteAllMerchantPermanent is the resolver for the deleteAllMerchantPermanent field.
func (r *mutationResolver) DeleteAllMerchantPermanent(ctx context.Context) (*model.APIResponseMerchantAll, error) {
	_, errResp := r.MerchantGraphql.MerchantService.DeleteAllMerchantPermanent()
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlMerchantAll("success", "all Merchants permanently deleted")

	return so, nil
}

// FindAllMerchant is the resolver for the findAllMerchant field.
func (r *queryResolver) FindAllMerchant(ctx context.Context, input *model.FindAllMerchantInput) (*model.APIResponseMerchantPagination, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllMerchants{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	Merchants, totalRecords, errResp := r.MerchantGraphql.MerchantService.FindAll(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlResponsePaginationMerchant("success", "Merchants retrieved successfully", Merchants, paginationMeta)

	return so, nil
}

// FindByIDMerchant is the resolver for the findByIdMerchant field.
func (r *queryResolver) FindByIDMerchant(ctx context.Context, input model.FindByIDMerchantInput) (*model.APIResponseMerchant, error) {
	id := int(input.ID)
	if id == 0 {
		return nil, merchant_errors.ErrGraphqlMerchantInvalidID
	}

	merchant, errResp := r.MerchantGraphql.MerchantService.FindById(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlResponseMerchant("success", "Merchant retrieved successfully", merchant)

	return so, nil
}

// FindByAPIKey is the resolver for the findByApiKey field.
func (r *queryResolver) FindByAPIKey(ctx context.Context, input model.FindByAPIKeyInput) (*model.APIResponseMerchant, error) {
	apiKey := input.APIKey
	if apiKey == "" {
		return nil, fmt.Errorf("api key is required")
	}

	merchant, errResp := r.MerchantGraphql.MerchantService.FindByApiKey(apiKey)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlResponseMerchant("success", "merchant retrieved successfully", merchant)
	return so, nil
}

// FindAllTransactionMerchant is the resolver for the findAllTransactionMerchant field.
func (r *queryResolver) FindAllTransactionMerchant(ctx context.Context, input *model.FindAllMerchantInput) (*model.APIResponseMerchantTransactionPagination, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllMerchantTransactions{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	merchants, totalRecords, errResp := r.MerchantGraphql.MerchantService.FindAllTransactions(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlResponsePaginationTransaction("success", "Merchants retrieved successfully", merchants, paginationMeta)

	return so, nil
}

// FindAllTransactionByMerchant is the resolver for the findAllTransactionByMerchant field.
func (r *queryResolver) FindAllTransactionByMerchant(ctx context.Context, input *model.FindAllMerchantTransactionInput) (*model.APIResponseMerchantTransactionPagination, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search
	merchantId := int(*input.MerchantID)

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllMerchantTransactionsById{
		Page:       page,
		PageSize:   pageSize,
		Search:     *search,
		MerchantID: merchantId,
	}

	merchants, totalRecords, errResp := r.MerchantGraphql.MerchantService.FindAllTransactionsByMerchant(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlResponsePaginationTransaction("success", "Merchants retrieved successfully", merchants, paginationMeta)

	return so, nil
}

// FindAllTransactionByApikey is the resolver for the findAllTransactionByApikey field.
func (r *queryResolver) FindAllTransactionByApikey(ctx context.Context, input *model.FindAllMerchantApikeyInput) (*model.APIResponseMerchantTransactionPagination, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search
	api_key := input.APIKey

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllMerchantTransactionsByApiKey{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
		ApiKey:   *api_key,
	}

	merchants, totalRecords, errResp := r.MerchantGraphql.MerchantService.FindAllTransactionsByApikey(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlResponsePaginationTransaction("success", "Merchants retrieved successfully", merchants, paginationMeta)

	return so, nil
}

// FindByMerchantUserID is the resolver for the findByMerchantUserId field.
func (r *queryResolver) FindByMerchantUserID(ctx context.Context, input model.FindByMerchantUserIDInput) (*model.APIResponsesMerchant, error) {
	id := int(input.UserID)
	if id == 0 {
		return nil, fmt.Errorf("invalid Merchant ID")
	}

	merchant, errResp := r.MerchantGraphql.MerchantService.FindByMerchantUserId(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlResponsesMerchant("success", "Merchant retrieved successfully", merchant)

	return so, nil
}

// FindByActive is the resolver for the findByActive field.
func (r *queryResolver) FindByActive(ctx context.Context, input *model.FindAllMerchantInput) (*model.APIResponseMerchantDeleteAtPagination, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllMerchants{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	Merchants, totalRecords, errResp := r.MerchantGraphql.MerchantService.FindByActive(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlResponsePaginationMerchantDeleteAt("success", "Merchants retrieved successfully", Merchants, paginationMeta)

	return so, nil
}

// FindByTrashed is the resolver for the findByTrashed field.
func (r *queryResolver) FindByTrashed(ctx context.Context, input *model.FindAllMerchantInput) (*model.APIResponseMerchantDeleteAtPagination, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllMerchants{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	Merchants, totalRecords, errResp := r.MerchantGraphql.MerchantService.FindByTrashed(&reqService)
	if errResp != nil {
		return nil, fmt.Errorf("failed to fetch Merchants: %s", errResp.Message)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlResponsePaginationMerchantDeleteAt("success", "Merchants retrieved successfully", Merchants, paginationMeta)

	return so, nil
}

// FindMonthlyPaymentMethodsMerchant is the resolver for the findMonthlyPaymentMethodsMerchant field.
func (r *queryResolver) FindMonthlyPaymentMethodsMerchant(ctx context.Context, input model.FindYearMerchantInput) (*model.APIResponseMerchantMonthlyPaymentMethod, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindMonthlyPaymentMethodsMerchant(year)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlMonthlyPaymentMethods("success", "Successfully fetched monthly payment methods for merchant", res)

	return so, nil
}

// FindYearlyPaymentMethodMerchant is the resolver for the findYearlyPaymentMethodMerchant field.
func (r *queryResolver) FindYearlyPaymentMethodMerchant(ctx context.Context, input model.FindYearMerchantInput) (*model.APIResponseMerchantYearlyPaymentMethod, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindYearlyPaymentMethodMerchant(year)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlYearlyPaymentMethods("success", "Successfully fetched Yearly payment methods for merchant", res)

	return so, nil
}

// FindMonthlyAmountMerchant is the resolver for the findMonthlyAmountMerchant field.
func (r *queryResolver) FindMonthlyAmountMerchant(ctx context.Context, input model.FindYearMerchantInput) (*model.APIResponseMerchantMonthlyAmount, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindMonthlyAmountMerchant(year)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlMonthlyAmounts("success", "Successfully fetched monthly payment methods for merchant", res)

	return so, nil
}

// FindYearlyAmountMerchant is the resolver for the findYearlyAmountMerchant field.
func (r *queryResolver) FindYearlyAmountMerchant(ctx context.Context, input model.FindYearMerchantInput) (*model.APIResponseMerchantYearlyAmount, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindYearlyAmountMerchant(year)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlYearlyAmounts("success", "Successfully fetched Yearly payment methods for merchant", res)

	return so, nil
}

// FindMonthlyTotalAmountMerchant is the resolver for the findMonthlyTotalAmountMerchant field.
func (r *queryResolver) FindMonthlyTotalAmountMerchant(ctx context.Context, input model.FindYearMerchantInput) (*model.APIResponseMerchantMonthlyTotalAmount, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindMonthlyTotalAmountMerchant(year)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlMonthlyTotalAmounts("success", "Successfully fetched monthly payment methods for merchant", res)

	return so, nil
}

// FindYearlyTotalAmountMerchant is the resolver for the findYearlyTotalAmountMerchant field.
func (r *queryResolver) FindYearlyTotalAmountMerchant(ctx context.Context, input model.FindYearMerchantInput) (*model.APIResponseMerchantYearlyTotalAmount, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindYearlyTotalAmountMerchant(year)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlYearlyTotalAmounts("success", "Successfully fetched Yearly payment methods for merchant", res)

	return so, nil
}

// FindMonthlyPaymentMethodByMerchants is the resolver for the findMonthlyPaymentMethodByMerchants field.
func (r *queryResolver) FindMonthlyPaymentMethodByMerchants(ctx context.Context, input model.FindYearMerchantByIDInput) (*model.APIResponseMerchantMonthlyPaymentMethod, error) {
	year := int(input.Year)
	merchantId := int(input.MerchantID)

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	if merchantId <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	reqService := requests.MonthYearPaymentMethodMerchant{
		MerchantID: int(merchantId),
		Year:       int(year),
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindMonthlyPaymentMethodByMerchants(&reqService)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlMonthlyPaymentMethods("success", "Successfully fetched monthly payment methods for merchant", res)

	return so, nil
}

// FindYearlyPaymentMethodByMerchants is the resolver for the findYearlyPaymentMethodByMerchants field.
func (r *queryResolver) FindYearlyPaymentMethodByMerchants(ctx context.Context, input model.FindYearMerchantByIDInput) (*model.APIResponseMerchantYearlyPaymentMethod, error) {
	year := int(input.Year)
	merchantId := int(input.MerchantID)

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	if merchantId <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	reqService := requests.MonthYearPaymentMethodMerchant{
		MerchantID: int(merchantId),
		Year:       int(year),
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindYearlyPaymentMethodByMerchants(&reqService)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlYearlyPaymentMethods("success", "Successfully fetched Yearly payment methods for merchant", res)

	return so, nil
}

// FindMonthlyAmountByMerchants is the resolver for the findMonthlyAmountByMerchants field.
func (r *queryResolver) FindMonthlyAmountByMerchants(ctx context.Context, input model.FindYearMerchantByIDInput) (*model.APIResponseMerchantMonthlyAmount, error) {
	year := int(input.Year)
	merchantId := input.MerchantID

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	if merchantId <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	reqService := requests.MonthYearAmountMerchant{
		MerchantID: int(merchantId),
		Year:       int(year),
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindMonthlyAmountByMerchants(&reqService)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlMonthlyAmounts("success", "Successfully fetched monthly payment methods for merchant", res)

	return so, nil
}

// FindYearlyAmountByMerchants is the resolver for the findYearlyAmountByMerchants field.
func (r *queryResolver) FindYearlyAmountByMerchants(ctx context.Context, input model.FindYearMerchantByIDInput) (*model.APIResponseMerchantYearlyAmount, error) {
	year := int(input.Year)
	merchantId := input.MerchantID

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	if merchantId <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	reqService := requests.MonthYearAmountMerchant{
		MerchantID: int(merchantId),
		Year:       int(year),
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindYearlyAmountByMerchants(&reqService)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlYearlyAmounts("success", "Successfully fetched Yearly payment methods for merchant", res)

	return so, nil
}

// FindMonthlyTotalAmountByMerchants is the resolver for the findMonthlyTotalAmountByMerchants field.
func (r *queryResolver) FindMonthlyTotalAmountByMerchants(ctx context.Context, input model.FindYearMerchantByIDInput) (*model.APIResponseMerchantMonthlyTotalAmount, error) {
	year := int(input.Year)
	merchantId := input.MerchantID

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	if merchantId <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	reqService := requests.MonthYearTotalAmountMerchant{
		MerchantID: int(merchantId),
		Year:       int(year),
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindMonthlyTotalAmountByMerchants(&reqService)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlMonthlyTotalAmounts("success", "Successfully fetched monthly payment methods for merchant", res)

	return so, nil
}

// FindYearlyTotalAmountByMerchants is the resolver for the findYearlyTotalAmountByMerchants field.
func (r *queryResolver) FindYearlyTotalAmountByMerchants(ctx context.Context, input model.FindYearMerchantByIDInput) (*model.APIResponseMerchantYearlyTotalAmount, error) {
	year := int(input.Year)
	merchantId := input.MerchantID

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	if merchantId <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	reqService := requests.MonthYearTotalAmountMerchant{
		MerchantID: int(merchantId),
		Year:       int(year),
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindYearlyTotalAmountByMerchants(&reqService)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlYearlyTotalAmounts("success", "Successfully fetched Yearly payment methods for merchant", res)

	return so, nil
}

// FindMonthlyPaymentMethodByApikey is the resolver for the findMonthlyPaymentMethodByApikey field.
func (r *queryResolver) FindMonthlyPaymentMethodByApikey(ctx context.Context, input model.FindYearMerchantByApikeyInput) (*model.APIResponseMerchantMonthlyPaymentMethod, error) {
	year := int(input.Year)
	apiKey := input.APIKey

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	if apiKey == "" {
		return nil, fmt.Errorf("Hello")
	}

	reqService := requests.MonthYearPaymentMethodApiKey{
		Year:   int(year),
		Apikey: apiKey,
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindMonthlyPaymentMethodByApikeys(&reqService)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlMonthlyPaymentMethods("success", "Successfully fetched monthly payment methods for merchant", res)

	return so, nil
}

// FindYearlyPaymentMethodByApikey is the resolver for the findYearlyPaymentMethodByApikey field.
func (r *queryResolver) FindYearlyPaymentMethodByApikey(ctx context.Context, input model.FindYearMerchantByApikeyInput) (*model.APIResponseMerchantYearlyPaymentMethod, error) {
	year := int(input.Year)
	apiKey := input.APIKey

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	if apiKey == "" {
		return nil, fmt.Errorf("Hello")
	}

	reqService := requests.MonthYearPaymentMethodApiKey{
		Year:   int(year),
		Apikey: apiKey,
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindYearlyPaymentMethodByApikeys(&reqService)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlYearlyPaymentMethods("success", "Successfully fetched Yearly payment methods for merchant", res)

	return so, nil
}

// FindMonthlyAmountByApikey is the resolver for the findMonthlyAmountByApikey field.
func (r *queryResolver) FindMonthlyAmountByApikey(ctx context.Context, input model.FindYearMerchantByApikeyInput) (*model.APIResponseMerchantMonthlyAmount, error) {
	year := int(input.Year)
	apiKey := input.APIKey

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	if apiKey == "" {
		return nil, fmt.Errorf("Hello")
	}

	reqService := requests.MonthYearAmountApiKey{
		Apikey: apiKey,
		Year:   int(year),
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindMonthlyAmountByApikeys(&reqService)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlMonthlyAmounts("success", "Successfully fetched monthly amounts for merchant", res)

	return so, nil
}

// FindYearlyAmountByApikey is the resolver for the findYearlyAmountByApikey field.
func (r *queryResolver) FindYearlyAmountByApikey(ctx context.Context, input model.FindYearMerchantByApikeyInput) (*model.APIResponseMerchantYearlyAmount, error) {
	year := int(input.Year)
	apiKey := input.APIKey

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	if apiKey == "" {
		return nil, fmt.Errorf("Hello")
	}

	reqService := requests.MonthYearAmountApiKey{
		Apikey: apiKey,
		Year:   int(year),
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindYearlyAmountByApikeys(&reqService)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlYearlyAmounts("success", "Successfully fetched Yearly amounts for merchant", res)

	return so, nil
}

// FindMonthlyTotalAmountByApikey is the resolver for the findMonthlyTotalAmountByApikey field.
func (r *queryResolver) FindMonthlyTotalAmountByApikey(ctx context.Context, input model.FindYearMerchantByApikeyInput) (*model.APIResponseMerchantMonthlyTotalAmount, error) {
	year := int(input.Year)
	apiKey := input.APIKey

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	if apiKey == "" {
		return nil, fmt.Errorf("Hello")
	}

	reqService := requests.MonthYearTotalAmountApiKey{
		Apikey: apiKey,
		Year:   int(year),
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindMonthlyTotalAmountByApikeys(&reqService)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlMonthlyTotalAmounts("success", "Successfully fetched monthly TotalAmounts for merchant", res)

	return so, nil
}

// FindYearlyTotalAmountByApikey is the resolver for the findYearlyTotalAmountByApikey field.
func (r *queryResolver) FindYearlyTotalAmountByApikey(ctx context.Context, input model.FindYearMerchantByApikeyInput) (*model.APIResponseMerchantYearlyTotalAmount, error) {
	year := int(input.Year)
	apiKey := input.APIKey

	if year <= 0 {
		return nil, fmt.Errorf("Hello")
	}

	if apiKey == "" {
		return nil, fmt.Errorf("Hello")
	}

	reqService := requests.MonthYearTotalAmountApiKey{
		Apikey: apiKey,
		Year:   int(year),
	}

	res, errResp := r.MerchantGraphql.MerchantService.FindYearlyTotalAmountByApikeys(&reqService)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.MerchantGraphql.Mapping.ToGraphqlYearlyTotalAmounts("success", "Successfully fetched Yearly TotalAmounts for merchant", res)

	return so, nil
}
