package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"math"
	"time"

	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/requests"
	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/response"
	"github.com/MamangRust/paymentgatewaygraphql/internal/graph/model"
	"github.com/MamangRust/paymentgatewaygraphql/pkg/errors/card_errors"
)

// CreateCard is the resolver for the createCard field.
func (r *mutationResolver) CreateCard(ctx context.Context, input model.CreateCardInput) (*model.APIResponseCard, error) {
	expireDate, err := time.Parse("2006-01-02", input.ExpireDate)
	if err != nil {
		return nil, fmt.Errorf("invalid date format for ExpireDate: %v (expected YYYY-MM-DD)", err)
	}

	request := requests.CreateCardRequest{
		UserID:       int(input.UserID),
		CardType:     input.CardType,
		ExpireDate:   expireDate,
		CVV:          input.Cvv,
		CardProvider: input.CardProvider,
	}

	if err := request.Validate(); err != nil {
		return nil, fmt.Errorf("invalid create card request: %v", err)
	}

	res, errResp := r.CardGraphql.CardService.CreateCard(&request)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlResponseCard("success", "Successfully created card", res)

	return so, nil
}

// UpdateCard is the resolver for the updateCard field.
func (r *mutationResolver) UpdateCard(ctx context.Context, input model.UpdateCardInput) (*model.APIResponseCard, error) {
	expireDate, err := time.Parse("2006-01-02", input.ExpireDate)
	if err != nil {
		return nil, fmt.Errorf("invalid date format for ExpireDate: %v (expected YYYY-MM-DD)", err)
	}

	request := requests.UpdateCardRequest{
		CardID:       int(input.ID),
		UserID:       int(input.UserID),
		CardType:     input.CardType,
		ExpireDate:   expireDate,
		CVV:          input.Cvv,
		CardProvider: input.CardProvider,
	}

	if err := request.Validate(); err != nil {
		return nil, fmt.Errorf("invalid update card request: %v", err)
	}

	res, errResp := r.CardGraphql.CardService.UpdateCard(&request)

	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlResponseCard("success", "Successfully updated card", res)

	return so, nil
}

// TrashedCard is the resolver for the trashedCard field.
func (r *mutationResolver) TrashedCard(ctx context.Context, input model.FindByIDCardInput) (*model.APIResponseCardDeleteAt, error) {
	id := int(input.CardID)
	if id == 0 {
		return nil, fmt.Errorf("invalid request: card ID cannot be zero")
	}

	res, errResp := r.CardGraphql.CardService.TrashedCard(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlResponseCardDeleteAt("success", "card successfully trashed", res)

	return so, nil
}

// RestoreCard is the resolver for the restoreCard field.
func (r *mutationResolver) RestoreCard(ctx context.Context, input model.FindByIDCardInput) (*model.APIResponseCardDeleteAt, error) {
	id := int(input.CardID)
	if id == 0 {
		return nil, fmt.Errorf("invalid request: card ID cannot be zero")
	}

	res, errResp := r.CardGraphql.CardService.RestoreCard(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlResponseCardDeleteAt("success", "card successfully restored", res)

	return so, nil
}

// DeleteCardPermanent is the resolver for the deleteCardPermanent field.
func (r *mutationResolver) DeleteCardPermanent(ctx context.Context, input model.FindByIDCardInput) (*model.APIResponseCardDelete, error) {
	id := int(input.CardID)
	if id == 0 {
		return nil, fmt.Errorf("invalid request: card ID cannot be zero")
	}

	_, errResp := r.CardGraphql.CardService.DeleteCardPermanent(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlResponseDelete("success", "card permanently deleted")

	return so, nil
}

// RestoreAllCard is the resolver for the restoreAllCard field.
func (r *mutationResolver) RestoreAllCard(ctx context.Context) (*model.APIResponseCardAll, error) {
	_, errResp := r.CardGraphql.CardService.RestoreAllCard()
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlResponseAll("success", "all trashed cards successfully restored")

	return so, nil
}

// DeleteAllCardPermanent is the resolver for the deleteAllCardPermanent field.
func (r *mutationResolver) DeleteAllCardPermanent(ctx context.Context) (*model.APIResponseCardAll, error) {
	_, errResp := r.CardGraphql.CardService.DeleteAllCardPermanent()
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlResponseAll("success", "all cards permanently deleted")

	return so, nil
}

// FindAllCard is the resolver for the findAllCard field.
func (r *queryResolver) FindAllCard(ctx context.Context, input *model.FindAllCardInput) (*model.APIResponsePaginationCard, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllCards{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	cards, totalRecords, errResp := r.CardGraphql.CardService.FindAll(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.CardGraphql.Mapping.ToGraphqlResponsePaginationCard("success", "Cards retrieved successfully", cards, paginationMeta)

	return so, nil
}

// FindByIDCard is the resolver for the findByIdCard field.
func (r *queryResolver) FindByIDCard(ctx context.Context, input model.FindByIDCardInput) (*model.APIResponseCard, error) {
	id := int(input.CardID)
	if id == 0 {
		return nil, card_errors.ErrGraphqlInvalidCardID
	}

	card, errResp := r.CardGraphql.CardService.FindById(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlResponseCard(
		"success",
		"card retrieved successfully",
		card,
	)

	return so, nil
}

// FindByUserIDCard is the resolver for the findByUserIdCard field.
func (r *queryResolver) FindByUserIDCard(ctx context.Context, input model.FindByUserIDCardInput) (*model.APIResponseCard, error) {
	id := int(input.UserID)
	if id == 0 {
		return nil, card_errors.ErrGraphqlInvalidUserID
	}

	card, errResp := r.CardGraphql.CardService.FindByUserID(id)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlResponseCard(
		"success",
		"user's card retrieved successfully",
		card,
	)

	return so, nil
}

// FindByActiveCard is the resolver for the findByActiveCard field.
func (r *queryResolver) FindByActiveCard(ctx context.Context, input *model.FindAllCardInput) (*model.APIResponsePaginationCardDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllCards{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	cards, totalRecords, errResp := r.CardGraphql.CardService.FindByActive(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.CardGraphql.Mapping.ToGraphqlResponsePaginationCardDeleteAt("success", "active cards retrieved successfully", cards, paginationMeta)

	return so, nil
}

// FindByTrashedCard is the resolver for the findByTrashedCard field.
func (r *queryResolver) FindByTrashedCard(ctx context.Context, input *model.FindAllCardInput) (*model.APIResponsePaginationCardDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllCards{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	cards, totalRecords, errResp := r.CardGraphql.CardService.FindByTrashed(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.CardGraphql.Mapping.ToGraphqlResponsePaginationCardDeleteAt("success", "trashed Cards retrieved successfully", cards, paginationMeta)

	return so, nil
}

// FindByCardNumberCard is the resolver for the findByCardNumberCard field.
func (r *queryResolver) FindByCardNumberCard(ctx context.Context, input model.FindByCardNumberInput) (*model.APIResponseCard, error) {
	cardNumber := input.CardNumber

	if cardNumber == "" {
		return nil, card_errors.ErrGraphqlInvalidCardNumber
	}

	res, errResp := r.CardGraphql.CardService.FindByCardNumber(cardNumber)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	response := r.CardGraphql.Mapping.ToGraphqlResponseCard(
		"success",
		"Successfully fetched card record",
		res,
	)

	return response, nil
}

// DashboardCard is the resolver for the dashboardCard field.
func (r *queryResolver) DashboardCard(ctx context.Context) (*model.APIResponseDashboardCard, error) {
	dashboardCard, err := r.CardGraphql.CardService.DashboardCard()
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	response := r.CardGraphql.Mapping.ToGraphqlDashboardCard(
		"success",
		"Dashboard card retrieved successfully",
		dashboardCard,
	)

	return response, nil
}

// DashboardCardNumber is the resolver for the dashboardCardNumber field.
func (r *queryResolver) DashboardCardNumber(ctx context.Context, input model.FindByCardNumberInput) (*model.APIResponseDashboardCardNumber, error) {
	cardNumber := input.CardNumber

	if cardNumber == "" {
		return nil, fmt.Errorf("card number cannot be empty")
	}

	dashboardCard, errResp := r.CardGraphql.CardService.DashboardCardCardNumber(cardNumber)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	response := r.CardGraphql.Mapping.ToGraphqlDashboardCardCardNumber(
		"success",
		"Dashboard card retrieved successfully",
		dashboardCard,
	)

	return response, nil
}

// FindMonthlyBalance is the resolver for the findMonthlyBalance field.
func (r *queryResolver) FindMonthlyBalance(ctx context.Context, input model.FindYearBalanceInput) (*model.APIResponseMonthlyBalance, error) {
	year := int(input.Year)
	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}

	res, errResp := r.CardGraphql.CardService.FindMonthlyBalance(year)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlMonthlyBalances(
		"success",
		"Monthly balance retrieved successfully",
		res,
	)

	return so, nil
}

// FindYearlyBalance is the resolver for the findYearlyBalance field.
func (r *queryResolver) FindYearlyBalance(ctx context.Context, input model.FindYearBalanceInput) (*model.APIResponseYearlyBalance, error) {
	year := int(input.Year)
	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}

	res, errResp := r.CardGraphql.CardService.FindYearlyBalance(year)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlYearlyBalances(
		"success",
		"Yearly balance retrieved successfully",
		res,
	)

	return so, nil
}

// FindMonthlyTopupAmount is the resolver for the findMonthlyTopupAmount field.
func (r *queryResolver) FindMonthlyTopupAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseMonthlyAmount, error) {
	year := int(input.Year)
	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}

	res, errResp := r.CardGraphql.CardService.FindMonthlyTopupAmount(year)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlMonthlyAmounts("success", "Monthly topup amount retrieved successfully", res)

	return so, nil
}

// FindYearlyTopupAmount is the resolver for the findYearlyTopupAmount field.
func (r *queryResolver) FindYearlyTopupAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseYearlyAmount, error) {
	year := int(input.Year)
	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}

	res, errResp := r.CardGraphql.CardService.FindYearlyTopupAmount(year)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlYearlyAmounts("success", "Yearly topup amount retrieved successfully", res)

	return so, nil
}

// FindMonthlyWithdrawAmount is the resolver for the findMonthlyWithdrawAmount field.
func (r *queryResolver) FindMonthlyWithdrawAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseMonthlyAmount, error) {
	year := int(input.Year)
	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}

	res, errResp := r.CardGraphql.CardService.FindMonthlyWithdrawAmount(year)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlMonthlyAmounts("success", "Monthly withdraw amount retrieved successfully", res)

	return so, nil
}

// FindYearlyWithdrawAmount is the resolver for the findYearlyWithdrawAmount field.
func (r *queryResolver) FindYearlyWithdrawAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseYearlyAmount, error) {
	year := int(input.Year)
	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}

	res, errResp := r.CardGraphql.CardService.FindYearlyWithdrawAmount(year)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlYearlyAmounts("success", "Yearly withdraw amount retrieved successfully", res)

	return so, nil
}

// FindMonthlyTransactionAmount is the resolver for the findMonthlyTransactionAmount field.
func (r *queryResolver) FindMonthlyTransactionAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseMonthlyAmount, error) {
	year := int(input.Year)
	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}

	res, errResp := r.CardGraphql.CardService.FindMonthlyTransactionAmount(year)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlMonthlyAmounts("success", "Monthly transaction amount retrieved successfully", res)

	return so, nil
}

// FindYearlyTransactionAmount is the resolver for the findYearlyTransactionAmount field.
func (r *queryResolver) FindYearlyTransactionAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseYearlyAmount, error) {
	year := int(input.Year)
	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}

	res, errResp := r.CardGraphql.CardService.FindYearlyTransactionAmount(year)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlYearlyAmounts("success", "Yearly transaction amount retrieved successfully", res)

	return so, nil
}

// FindMonthlyTransferSenderAmount is the resolver for the findMonthlyTransferSenderAmount field.
func (r *queryResolver) FindMonthlyTransferSenderAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseMonthlyAmount, error) {
	year := int(input.Year)
	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}

	res, errResp := r.CardGraphql.CardService.FindMonthlyTransferAmountSender(year)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlMonthlyAmounts("success", "Monthly transfer sender amount retrieved successfully", res)

	return so, nil
}

// FindYearlyTransferSenderAmount is the resolver for the findYearlyTransferSenderAmount field.
func (r *queryResolver) FindYearlyTransferSenderAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseYearlyAmount, error) {
	year := int(input.Year)
	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}

	res, errResp := r.CardGraphql.CardService.FindYearlyTransferAmountSender(year)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlYearlyAmounts("success", "Yearly transfer sender amount retrieved successfully", res)

	return so, nil
}

// FindMonthlyTransferReceiverAmount is the resolver for the findMonthlyTransferReceiverAmount field.
func (r *queryResolver) FindMonthlyTransferReceiverAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseMonthlyAmount, error) {
	year := int(input.Year)
	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}

	res, errResp := r.CardGraphql.CardService.FindMonthlyTransferAmountReceiver(year)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlMonthlyAmounts("success", "Monthly transfer receiver amount retrieved successfully", res)

	return so, nil
}

// FindYearlyTransferReceiverAmount is the resolver for the findYearlyTransferReceiverAmount field.
func (r *queryResolver) FindYearlyTransferReceiverAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseYearlyAmount, error) {
	year := int(input.Year)
	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}

	res, errResp := r.CardGraphql.CardService.FindYearlyTransferAmountReceiver(year)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlYearlyAmounts("success", "Yearly transfer receiver amount retrieved successfully", res)

	return so, nil
}

// FindMonthlyBalanceByCardNumber is the resolver for the findMonthlyBalanceByCardNumber field.
func (r *queryResolver) FindMonthlyBalanceByCardNumber(ctx context.Context, input model.FindYearBalanceCardNumberInput) (*model.APIResponseMonthlyBalance, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}
	if cardNumber == "" {
		return nil, card_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumberCard{
		CardNumber: cardNumber,
		Year:       year,
	}

	res, errResp := r.CardGraphql.CardService.FindMonthlyBalanceByCardNumber(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlMonthlyBalances(
		"success",
		"Monthly balance retrieved successfully",
		res,
	)

	return so, nil
}

// FindYearlyBalanceByCardNumber is the resolver for the findYearlyBalanceByCardNumber field.
func (r *queryResolver) FindYearlyBalanceByCardNumber(ctx context.Context, input model.FindYearBalanceCardNumberInput) (*model.APIResponseYearlyBalance, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}
	if cardNumber == "" {
		return nil, card_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumberCard{
		CardNumber: cardNumber,
		Year:       year,
	}

	res, errResp := r.CardGraphql.CardService.FindYearlyBalanceByCardNumber(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlYearlyBalances(
		"success",
		"Yearly balance retrieved successfully",
		res,
	)

	return so, nil
}

// FindMonthlyTopupAmountByCardNumber is the resolver for the findMonthlyTopupAmountByCardNumber field.
func (r *queryResolver) FindMonthlyTopupAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseMonthlyAmount, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}
	if cardNumber == "" {
		return nil, card_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumberCard{
		CardNumber: cardNumber,
		Year:       year,
	}

	res, errResp := r.CardGraphql.CardService.FindMonthlyTopupAmountByCardNumber(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlMonthlyAmounts(
		"success",
		"Monthly topup amount by card number retrieved successfully",
		res,
	)

	return so, nil
}

// FindYearlyTopupAmountByCardNumber is the resolver for the findYearlyTopupAmountByCardNumber field.
func (r *queryResolver) FindYearlyTopupAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseYearlyAmount, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}
	if cardNumber == "" {
		return nil, card_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumberCard{
		CardNumber: cardNumber,
		Year:       year,
	}

	res, errResp := r.CardGraphql.CardService.FindYearlyTopupAmountByCardNumber(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlYearlyAmounts(
		"success",
		"Yearly topup amount by card number retrieved successfully",
		res,
	)

	return so, nil
}

// FindMonthlyWithdrawAmountByCardNumber is the resolver for the findMonthlyWithdrawAmountByCardNumber field.
func (r *queryResolver) FindMonthlyWithdrawAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseMonthlyAmount, error) {
	year := int(input.Year)
	card_number := input.CardNumber

	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}
	if card_number == "" {
		return nil, card_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumberCard{
		CardNumber: card_number,
		Year:       year,
	}

	res, errResp := r.CardGraphql.CardService.FindMonthlyWithdrawAmountByCardNumber(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlMonthlyAmounts(
		"success",
		"Monthly withdraw amount by card number retrieved successfully",
		res,
	)

	return so, nil
}

// FindYearlyWithdrawAmountByCardNumber is the resolver for the findYearlyWithdrawAmountByCardNumber field.
func (r *queryResolver) FindYearlyWithdrawAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseYearlyAmount, error) {
	year := int(input.Year)
	card_number := input.CardNumber

	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}
	if card_number == "" {
		return nil, card_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumberCard{
		CardNumber: card_number,
		Year:       year,
	}

	res, errResp := r.CardGraphql.CardService.FindYearlyWithdrawAmountByCardNumber(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlYearlyAmounts(
		"success",
		"Yearly withdraw amount by card number retrieved successfully",
		res,
	)

	return so, nil
}

// FindMonthlyTransactionAmountByCardNumber is the resolver for the findMonthlyTransactionAmountByCardNumber field.
func (r *queryResolver) FindMonthlyTransactionAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseMonthlyAmount, error) {
	year := int(input.Year)
	card_number := input.CardNumber

	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}
	if card_number == "" {
		return nil, card_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumberCard{
		CardNumber: card_number,
		Year:       year,
	}

	res, errResp := r.CardGraphql.CardService.FindMonthlyTransactionAmountByCardNumber(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlMonthlyAmounts(
		"success",
		"Monthly transaction amount by card number retrieved successfully",
		res,
	)

	return so, nil
}

// FindYearlyTransactionAmountByCardNumber is the resolver for the findYearlyTransactionAmountByCardNumber field.
func (r *queryResolver) FindYearlyTransactionAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseYearlyAmount, error) {
	year := int(input.Year)
	card_number := input.CardNumber

	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}
	if card_number == "" {
		return nil, card_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumberCard{
		CardNumber: card_number,
		Year:       year,
	}

	res, errResp := r.CardGraphql.CardService.FindYearlyTransactionAmountByCardNumber(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlYearlyAmounts(
		"success",
		"Yearly transaction amount by card number retrieved successfully",
		res,
	)

	return so, nil
}

// FindMonthlyTransferSenderAmountByCardNumber is the resolver for the findMonthlyTransferSenderAmountByCardNumber field.
func (r *queryResolver) FindMonthlyTransferSenderAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseMonthlyAmount, error) {
	year := int(input.Year)
	card_number := input.CardNumber

	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}
	if card_number == "" {
		return nil, card_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumberCard{
		CardNumber: card_number,
		Year:       year,
	}

	res, errResp := r.CardGraphql.CardService.FindMonthlyTransferAmountBySender(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlMonthlyAmounts(
		"success",
		"Monthly transfer sender amount by card number retrieved successfully",
		res,
	)

	return so, nil
}

// FindYearlyTransferSenderAmountByCardNumber is the resolver for the findYearlyTransferSenderAmountByCardNumber field.
func (r *queryResolver) FindYearlyTransferSenderAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseYearlyAmount, error) {
	year := int(input.Year)
	card_number := input.CardNumber

	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}
	if card_number == "" {
		return nil, card_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumberCard{
		CardNumber: card_number,
		Year:       year,
	}

	res, errResp := r.CardGraphql.CardService.FindYearlyTransferAmountBySender(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlYearlyAmounts(
		"success",
		"Yearly transfer sender amount by card number retrieved successfully",
		res,
	)

	return so, nil
}

// FindMonthlyTransferReceiverAmountByCardNumber is the resolver for the findMonthlyTransferReceiverAmountByCardNumber field.
func (r *queryResolver) FindMonthlyTransferReceiverAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseMonthlyAmount, error) {
	year := int(input.Year)
	card_number := input.CardNumber

	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}
	if card_number == "" {
		return nil, card_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumberCard{
		CardNumber: card_number,
		Year:       year,
	}

	res, errResp := r.CardGraphql.CardService.FindMonthlyTransferAmountByReceiver(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlMonthlyAmounts(
		"success",
		"Monthly transfer receiver amount by card number retrieved successfully",
		res,
	)

	return so, nil
}

// FindYearlyTransferReceiverAmountByCardNumber is the resolver for the findYearlyTransferReceiverAmountByCardNumber field.
func (r *queryResolver) FindYearlyTransferReceiverAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseYearlyAmount, error) {
	year := int(input.Year)
	card_number := input.CardNumber

	if year <= 0 {
		return nil, card_errors.ErrGraphqlInvalidYear
	}
	if card_number == "" {
		return nil, card_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumberCard{
		CardNumber: card_number,
		Year:       year,
	}

	res, errResp := r.CardGraphql.CardService.FindYearlyTransferAmountByReceiver(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.CardGraphql.Mapping.ToGraphqlYearlyAmounts(
		"success",
		"Yearly transfer receiver amount by card number retrieved successfully",
		res,
	)

	return so, nil
}
