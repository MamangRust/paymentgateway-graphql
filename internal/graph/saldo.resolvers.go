package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"math"

	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/requests"
	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/response"
	"github.com/MamangRust/paymentgatewaygraphql/internal/graph/model"
	"github.com/MamangRust/paymentgatewaygraphql/pkg/errors/saldo_errors"
)

// CreateSaldo is the resolver for the createSaldo field.
func (r *mutationResolver) CreateSaldo(ctx context.Context, input model.CreateSaldoInput) (*model.APIResponseSaldoResponse, error) {
	request := requests.CreateSaldoRequest{
		CardNumber:   input.CardNumber,
		TotalBalance: int(input.TotalBalance),
	}

	if err := request.Validate(); err != nil {
		return nil, saldo_errors.ErrGraphqlValidateCreateSaldo
	}

	saldo, err := r.SaldoGraphql.SaldoService.CreateSaldo(&request)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponseSaldo("success", "Successfully created saldo record", saldo)

	return so, nil
}

// UpdateSaldo is the resolver for the updateSaldo field.
func (r *mutationResolver) UpdateSaldo(ctx context.Context, input model.UpdateSaldoInput) (*model.APIResponseSaldoResponse, error) {
	id := int(input.ID)

	if id == 0 {
		return nil, saldo_errors.ErrGraphqlSaldoInvalidID
	}

	request := requests.UpdateSaldoRequest{
		SaldoID:      &id,
		CardNumber:   *input.CardNumber,
		TotalBalance: int(*input.TotalBalance),
	}

	if err := request.Validate(); err != nil {
		return nil, saldo_errors.ErrGraphqlValidateUpdateSaldo
	}

	saldo, err := r.SaldoGraphql.SaldoService.UpdateSaldo(&request)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponseSaldo("success", "Successfully updated saldo record", saldo)

	return so, nil
}

// TrashedSaldo is the resolver for the trashedSaldo field.
func (r *mutationResolver) TrashedSaldo(ctx context.Context, input model.FindByIDSaldoInput) (*model.APIResponseSaldoResponseDeleteAt, error) {
	id := int(input.ID)

	if id == 0 {
		return nil, saldo_errors.ErrGraphqlSaldoInvalidID
	}

	saldo, err := r.SaldoGraphql.SaldoService.TrashSaldo(id)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponseSaldoDeleteAt("success", "Successfully trashed saldo record", saldo)

	return so, nil
}

// RestoreSaldo is the resolver for the restoreSaldo field.
func (r *mutationResolver) RestoreSaldo(ctx context.Context, input model.FindByIDSaldoInput) (*model.APIResponseSaldoResponseDeleteAt, error) {
	id := int(input.ID)

	if id == 0 {
		return nil, saldo_errors.ErrGraphqlSaldoInvalidID
	}

	saldo, err := r.SaldoGraphql.SaldoService.TrashSaldo(id)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponseSaldoDeleteAt("success", "Successfully trashed saldo record", saldo)

	return so, nil
}

// DeleteSaldoPermanent is the resolver for the deleteSaldoPermanent field.
func (r *mutationResolver) DeleteSaldoPermanent(ctx context.Context, input model.FindByIDSaldoInput) (*model.APIResponseSaldoDelete, error) {
	id := int(input.ID)

	if id == 0 {
		return nil, saldo_errors.ErrGraphqlSaldoInvalidID
	}

	_, err := r.SaldoGraphql.SaldoService.DeleteSaldoPermanent(id)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponseDelete("success", "Successfully deleted saldo record")

	return so, nil
}

// RestoreAllSaldo is the resolver for the restoreAllSaldo field.
func (r *mutationResolver) RestoreAllSaldo(ctx context.Context) (*model.APIResponseSaldoAll, error) {
	_, errResp := r.SaldoGraphql.SaldoService.RestoreAllSaldo()
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponseAll("success", "Successfully restore all saldo")

	return so, nil
}

// DeleteAllSaldoPermanent is the resolver for the deleteAllSaldoPermanent field.
func (r *mutationResolver) DeleteAllSaldoPermanent(ctx context.Context) (*model.APIResponseSaldoAll, error) {
	_, errResp := r.SaldoGraphql.SaldoService.DeleteAllSaldoPermanent()
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponseAll("success", "delete saldo permanent")

	return so, nil
}

// FindAllSaldo is the resolver for the findAllSaldo field.
func (r *queryResolver) FindAllSaldo(ctx context.Context, input *model.FindAllSaldoInput) (*model.APIResponsePaginationSaldo, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllSaldos{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	saldos, totalRecords, errResp := r.SaldoGraphql.SaldoService.FindAll(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponsePaginationSaldo("success", "saldos retrieved successfully", saldos, paginationMeta)

	return so, nil
}

// FindByIDSaldo is the resolver for the findByIdSaldo field.
func (r *queryResolver) FindByIDSaldo(ctx context.Context, input model.FindByIDSaldoInput) (*model.APIResponseSaldoResponse, error) {
	id := int(input.ID)

	if id == 0 {
		return nil, saldo_errors.ErrGraphqlSaldoInvalidID
	}

	saldo, err := r.SaldoGraphql.SaldoService.FindById(id)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponseSaldo("success", "Successfully fetched saldo record", saldo)

	return so, nil
}

// FindMonthlyTotalSaldoBalance is the resolver for the findMonthlyTotalSaldoBalance field.
func (r *queryResolver) FindMonthlyTotalSaldoBalance(ctx context.Context, input model.FindMonthlySaldoTotalBalanceInput) (*model.APIResponseMonthTotalSaldo, error) {
	year := int(input.Year)
	month := int(input.Month)

	if year <= 0 {
		return nil, saldo_errors.ErrGraphqlSaldoInvalidYear
	}

	if month <= 0 {
		return nil, saldo_errors.ErrGraphqlSaldoInvalidMonth
	}

	reqService := requests.MonthTotalSaldoBalance{
		Year:  year,
		Month: month,
	}

	res, err := r.SaldoGraphql.SaldoService.FindMonthlyTotalSaldoBalance(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponseMonthTotalSaldo("success", "Successfully fetched monthly total saldo balance", res)

	return so, nil
}

// FindYearTotalSaldoBalance is the resolver for the findYearTotalSaldoBalance field.
func (r *queryResolver) FindYearTotalSaldoBalance(ctx context.Context, input model.FindYearlySaldoInput) (*model.APIResponseYearTotalSaldo, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, saldo_errors.ErrGraphqlSaldoInvalidYear
	}

	res, err := r.SaldoGraphql.SaldoService.FindYearTotalSaldoBalance(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponseYearTotalSaldo("success", "Successfully fetched yearly total saldo balance", res)

	return so, nil
}

// FindMonthlySaldoBalances is the resolver for the findMonthlySaldoBalances field.
func (r *queryResolver) FindMonthlySaldoBalances(ctx context.Context, input model.FindYearlySaldoInput) (*model.APIResponseMonthSaldoBalances, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, saldo_errors.ErrGraphqlSaldoInvalidYear
	}

	res, err := r.SaldoGraphql.SaldoService.FindMonthlySaldoBalances(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponseMonthSaldoBalances("success", "Successfully fetched monthly saldo balances", res)

	return so, nil
}

// FindYearlySaldoBalances is the resolver for the findYearlySaldoBalances field.
func (r *queryResolver) FindYearlySaldoBalances(ctx context.Context, input model.FindYearlySaldoInput) (*model.APIResponseYearSaldoBalances, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, saldo_errors.ErrGraphqlSaldoInvalidYear
	}

	res, err := r.SaldoGraphql.SaldoService.FindYearlySaldoBalances(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponseYearBalance("success", "Successfully fetched yearly saldo balances", res)

	return so, nil
}

// FindByCardNumberSaldo is the resolver for the findByCardNumberSaldo field.
func (r *queryResolver) FindByCardNumberSaldo(ctx context.Context, cardNumber string) (*model.APIResponseSaldoResponse, error) {
	if cardNumber == "" {
		return nil, saldo_errors.ErrGraphqlSaldoInvalidCardNumber
	}

	saldo, err := r.SaldoGraphql.SaldoService.FindByCardNumber(cardNumber)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponseSaldo("success", "Successfully fetched saldo record", saldo)

	return so, nil
}

// FindByActiveSaldo is the resolver for the findByActiveSaldo field.
func (r *queryResolver) FindByActiveSaldo(ctx context.Context, input *model.FindAllSaldoInput) (*model.APIResponsePaginationSaldoDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllSaldos{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	saldos, totalRecords, errResp := r.SaldoGraphql.SaldoService.FindByActive(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponsePaginationSaldoDeleteAt("success", "saldos retrieved successfully", saldos, paginationMeta)

	return so, nil
}

// FindByTrashedSaldo is the resolver for the findByTrashedSaldo field.
func (r *queryResolver) FindByTrashedSaldo(ctx context.Context, input *model.FindAllSaldoInput) (*model.APIResponsePaginationSaldoDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllSaldos{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	saldos, totalRecords, errResp := r.SaldoGraphql.SaldoService.FindByTrashed(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.SaldoGraphql.Mapping.ToGraphqlResponsePaginationSaldoDeleteAt("success", "saldos retrieved successfully", saldos, paginationMeta)

	return so, nil
}
