package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"math"

	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/requests"
	"github.com/MamangRust/paymentgatewaygraphql/internal/domain/response"
	"github.com/MamangRust/paymentgatewaygraphql/internal/graph/model"
	"github.com/MamangRust/paymentgatewaygraphql/pkg/errors/transfer_errors"
)

// CreateTransfer is the resolver for the createTransfer field.
func (r *mutationResolver) CreateTransfer(ctx context.Context, input model.CreateTransferRequest) (*model.APIResponseTransfer, error) {
	request := requests.CreateTransferRequest{
		TransferFrom:   input.TransferFrom,
		TransferTo:     input.TransferTo,
		TransferAmount: int(input.TransferAmount),
	}

	if err := request.Validate(); err != nil {
		return nil, transfer_errors.ErrGraphqlValidateCreateTransferRequest
	}

	res, err := r.TransferGraphql.TransferService.CreateTransaction(&request)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransfer("success", "Successfully created transfer", res)
	return so, nil
}

// UpdateTransfer is the resolver for the updateTransfer field.
func (r *mutationResolver) UpdateTransfer(ctx context.Context, input model.UpdateTransferRequest) (*model.APIResponseTransfer, error) {
	id := int(input.TransferID)
	if id == 0 {
		return nil, transfer_errors.ErrGraphqlTransferInvalidID
	}

	request := requests.UpdateTransferRequest{
		TransferID:     &id,
		TransferFrom:   input.TransferFrom,
		TransferTo:     input.TransferTo,
		TransferAmount: int(input.TransferAmount),
	}

	if err := request.Validate(); err != nil {
		return nil, transfer_errors.ErrGraphqlValidateUpdateTransferRequest
	}

	res, err := r.TransferGraphql.TransferService.UpdateTransaction(&request)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransfer("success", "Successfully updated transfer", res)
	return so, nil
}

// TrashedTransfer is the resolver for the trashedTransfer field.
func (r *mutationResolver) TrashedTransfer(ctx context.Context, input model.FindByIDTransferRequest) (*model.APIResponseTransferDeleteAt, error) {
	id := int(input.TransferID)
	if id == 0 {
		return nil, transfer_errors.ErrGraphqlTransferInvalidID
	}

	transfer, err := r.TransferGraphql.TransferService.TrashedTransfer(id)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferDeleteAt("success", "Successfully trashed transfer", transfer)
	return so, nil
}

// RestoreTransfer is the resolver for the restoreTransfer field.
func (r *mutationResolver) RestoreTransfer(ctx context.Context, input model.FindByIDTransferRequest) (*model.APIResponseTransferDeleteAt, error) {
	id := int(input.TransferID)
	if id == 0 {
		return nil, transfer_errors.ErrGraphqlTransferInvalidID
	}

	transfer, err := r.TransferGraphql.TransferService.RestoreTransfer(id)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferDeleteAt("success", "Successfully restored transfer", transfer)
	return so, nil
}

// DeleteTransferPermanent is the resolver for the deleteTransferPermanent field.
func (r *mutationResolver) DeleteTransferPermanent(ctx context.Context, input model.FindByIDTransferRequest) (*model.APIResponseTransferDelete, error) {
	id := int(input.TransferID)
	if id == 0 {
		return nil, transfer_errors.ErrGraphqlTransferInvalidID
	}

	_, err := r.TransferGraphql.TransferService.DeleteTransferPermanent(id)
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlTransferDelete("success", "Successfully deleted transfer permanently")
	return so, nil
}

// RestoreAllTransfers is the resolver for the restoreAllTransfers field.
func (r *mutationResolver) RestoreAllTransfers(ctx context.Context) (*model.APIResponseTransferAll, error) {
	_, err := r.TransferGraphql.TransferService.RestoreAllTransfer()
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlTransferAll("success", "Successfully restored all transfers")
	return so, nil
}

// DeleteAllTransfersPermanent is the resolver for the deleteAllTransfersPermanent field.
func (r *mutationResolver) DeleteAllTransfersPermanent(ctx context.Context) (*model.APIResponseTransferAll, error) {
	_, err := r.TransferGraphql.TransferService.DeleteAllTransferPermanent()
	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlTransferAll("success", "Successfully deleted all transfers permanently")
	return so, nil
}

// FindAllTransfers is the resolver for the findAllTransfers field.
func (r *queryResolver) FindAllTransfers(ctx context.Context, input *model.FindAllTransferRequest) (*model.APIResponsePaginationTransfer, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllTranfers{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	transfers, totalRecords, errResp := r.TransferGraphql.TransferService.FindAll(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponsePaginationTransfer("success", "transfers retrieved successfully", transfers, paginationMeta)

	return so, nil
}

// FindTransferByID is the resolver for the findTransferById field.
func (r *queryResolver) FindTransferByID(ctx context.Context, input *model.FindByIDTransferRequest) (*model.APIResponseTransfer, error) {
	id := int(input.TransferID)

	if id == 0 {
		return nil, transfer_errors.ErrGraphqlTransferInvalidID
	}

	res, err := r.TransferGraphql.TransferService.FindById(id)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransfer("success", "Successfully fetch transfer record", res)

	return so, nil
}

// FindTransfersBySender is the resolver for the findTransfersBySender field.
func (r *queryResolver) FindTransfersBySender(ctx context.Context, input *model.FindTransferByTransferFromRequest) (*model.APIResponseTransfers, error) {
	transferFrom := input.TransferFrom

	if transferFrom == "" {
		return nil, transfer_errors.ErrGraphqlInvalidCardNumber
	}

	res, err := r.TransferGraphql.TransferService.FindTransferByTransferFrom(transferFrom)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransfers("success", "Successfully fetch transfer record", res)

	return so, nil
}

// FindTransfersByReceiver is the resolver for the findTransfersByReceiver field.
func (r *queryResolver) FindTransfersByReceiver(ctx context.Context, input *model.FindTransferByTransferToRequest) (*model.APIResponseTransfers, error) {
	transferTo := input.TransferTo

	if transferTo == "" {
		return nil, transfer_errors.ErrGraphqlInvalidCardNumber
	}

	res, err := r.TransferGraphql.TransferService.FindTransferByTransferTo(transferTo)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransfers("success", "Successfully fetch transfer record", res)

	return so, nil
}

// FindActiveTransfers is the resolver for the findActiveTransfers field.
func (r *queryResolver) FindActiveTransfers(ctx context.Context, input *model.FindAllTransferRequest) (*model.APIResponsePaginationTransferDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllTranfers{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	transfers, totalRecords, errResp := r.TransferGraphql.TransferService.FindByActive(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponsePaginationTransferDeleteAt("success", "transfers retrieved successfully", transfers, paginationMeta)

	return so, nil
}

// FindTrashedTransfers is the resolver for the findTrashedTransfers field.
func (r *queryResolver) FindTrashedTransfers(ctx context.Context, input *model.FindAllTransferRequest) (*model.APIResponsePaginationTransferDeleteAt, error) {
	page := int(*input.Page)
	pageSize := int(*input.PageSize)
	search := input.Search

	if page <= 0 {
		page = 1
	}
	if pageSize <= 0 {
		pageSize = 10
	}

	reqService := requests.FindAllTranfers{
		Page:     page,
		PageSize: pageSize,
		Search:   *search,
	}

	transfers, totalRecords, errResp := r.TransferGraphql.TransferService.FindByActive(&reqService)
	if errResp != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(errResp)
	}

	totalPages := int(math.Ceil(float64(*totalRecords) / float64(pageSize)))
	paginationMeta := &response.PaginationMeta{
		CurrentPage:  page,
		PageSize:     pageSize,
		TotalRecords: *totalRecords,
		TotalPages:   totalPages,
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponsePaginationTransferDeleteAt("success", "transfers retrieved successfully", transfers, paginationMeta)

	return so, nil
}

// FindMonthlyTransferStatusSuccess is the resolver for the findMonthlyTransferStatusSuccess field.
func (r *queryResolver) FindMonthlyTransferStatusSuccess(ctx context.Context, input model.FindMonthlyTransferStatus) (*model.APIResponseTransferMonthStatusSuccess, error) {
	year := int(input.Year)
	month := int(input.Month)

	if year <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidYear
	}

	if month <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidMonth
	}

	reqService := requests.MonthStatusTransfer{
		Year:  year,
		Month: month,
	}

	res, err := r.TransferGraphql.TransferService.FindMonthTransferStatusSuccess(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferMonthStatusSuccess("success", "Successfully fetched monthly Transfer status success", res)

	return so, nil
}

// FindYearlyTransferStatusSuccess is the resolver for the findYearlyTransferStatusSuccess field.
func (r *queryResolver) FindYearlyTransferStatusSuccess(ctx context.Context, input model.FindYearTransferStatus) (*model.APIResponseTransferYearStatusSuccess, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidYear
	}

	res, err := r.TransferGraphql.TransferService.FindYearlyTransferStatusSuccess(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferYearStatusSuccess("success", "Successfully fetched yearly Transfer status success", res)

	return so, nil
}

// FindMonthlyTransferStatusFailed is the resolver for the findMonthlyTransferStatusFailed field.
func (r *queryResolver) FindMonthlyTransferStatusFailed(ctx context.Context, input model.FindMonthlyTransferStatus) (*model.APIResponseTransferMonthStatusFailed, error) {
	year := int(input.Year)
	month := int(input.Month)

	if year <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidYear
	}

	if month <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidMonth
	}

	reqService := requests.MonthStatusTransfer{
		Year:  year,
		Month: month,
	}

	res, err := r.TransferGraphql.TransferService.FindMonthTransferStatusFailed(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferMonthStatusFailed("success", "Successfully fetched monthly Transfer status success", res)

	return so, nil
}

// FindYearlyTransferStatusFailed is the resolver for the findYearlyTransferStatusFailed field.
func (r *queryResolver) FindYearlyTransferStatusFailed(ctx context.Context, input model.FindYearTransferStatus) (*model.APIResponseTransferYearStatusFailed, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidYear
	}

	res, err := r.TransferGraphql.TransferService.FindYearlyTransferStatusFailed(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferYearStatusFailed("success", "Successfully fetched yearly Transfer status success", res)

	return so, nil
}

// FindMonthlyTransferStatusSuccessByCardNumber is the resolver for the findMonthlyTransferStatusSuccessByCardNumber field.
func (r *queryResolver) FindMonthlyTransferStatusSuccessByCardNumber(ctx context.Context, input model.FindMonthlyTransferStatusCardNumber) (*model.APIResponseTransferMonthStatusSuccess, error) {
	year := int(input.Year)
	month := int(input.Month)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidYear
	}

	if month <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidMonth
	}

	if cardNumber == "" {
		return nil, transfer_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthStatusTransferCardNumber{
		Year:       year,
		Month:      month,
		CardNumber: cardNumber,
	}

	res, err := r.TransferGraphql.TransferService.FindMonthTransferStatusSuccessByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferMonthStatusSuccess("success", "Successfully fetched monthly Transfer status success", res)

	return so, nil
}

// FindYearlyTransferStatusSuccessByCardNumber is the resolver for the findYearlyTransferStatusSuccessByCardNumber field.
func (r *queryResolver) FindYearlyTransferStatusSuccessByCardNumber(ctx context.Context, input model.FindYearTransferStatusCardNumber) (*model.APIResponseTransferYearStatusSuccess, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidYear
	}

	if cardNumber == "" {
		return nil, transfer_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.YearStatusTransferCardNumber{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.TransferGraphql.TransferService.FindYearlyTransferStatusSuccessByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferYearStatusSuccess("success", "Successfully fetched yearly Transfer status success", res)

	return so, nil
}

// FindMonthlyTransferStatusFailedByCardNumber is the resolver for the findMonthlyTransferStatusFailedByCardNumber field.
func (r *queryResolver) FindMonthlyTransferStatusFailedByCardNumber(ctx context.Context, input model.FindMonthlyTransferStatusCardNumber) (*model.APIResponseTransferMonthStatusFailed, error) {
	year := int(input.Year)
	month := int(input.Month)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidYear
	}

	if month <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidMonth
	}

	if cardNumber == "" {
		return nil, transfer_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthStatusTransferCardNumber{
		Year:       year,
		Month:      month,
		CardNumber: cardNumber,
	}

	res, err := r.TransferGraphql.TransferService.FindMonthTransferStatusFailedByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferMonthStatusFailed("success", "Successfully fetched monthly Transfer status failed", res)

	return so, nil
}

// FindYearlyTransferStatusFailedByCardNumber is the resolver for the findYearlyTransferStatusFailedByCardNumber field.
func (r *queryResolver) FindYearlyTransferStatusFailedByCardNumber(ctx context.Context, input model.FindYearTransferStatusCardNumber) (*model.APIResponseTransferYearStatusFailed, error) {
	year := int(input.Year)
	cardNumber := input.CardNumber

	if year <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidYear
	}

	if cardNumber == "" {
		return nil, transfer_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.YearStatusTransferCardNumber{
		Year:       year,
		CardNumber: cardNumber,
	}

	res, err := r.TransferGraphql.TransferService.FindYearlyTransferStatusFailedByCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferYearStatusFailed("success", "Successfully fetched yearly Transfer status failed", res)

	return so, nil
}

// FindMonthlyTransferAmounts is the resolver for the findMonthlyTransferAmounts field.
func (r *queryResolver) FindMonthlyTransferAmounts(ctx context.Context, input model.FindYearTransferStatus) (*model.APIResponseTransferMonthAmount, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidYear
	}

	res, err := r.TransferGraphql.TransferService.FindMonthlyTransferAmounts(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferMonthAmount("success", "Successfully fetched monthly Transaction amounts", res)

	return so, nil
}

// FindYearlyTransferAmounts is the resolver for the findYearlyTransferAmounts field.
func (r *queryResolver) FindYearlyTransferAmounts(ctx context.Context, input model.FindYearTransferStatus) (*model.APIResponseTransferYearAmount, error) {
	year := int(input.Year)

	if year <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidYear
	}

	res, err := r.TransferGraphql.TransferService.FindYearlyTransferAmounts(year)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferYearAmount("success", "Successfully fetched yearly Transaction amounts", res)

	return so, nil
}

// FindMonthlyTransferAmountsBySenderCardNumber is the resolver for the findMonthlyTransferAmountsBySenderCardNumber field.
func (r *queryResolver) FindMonthlyTransferAmountsBySenderCardNumber(ctx context.Context, input model.FindByCardNumberTransferRequest) (*model.APIResponseTransferMonthAmount, error) {
	year := int(input.Year)
	sender := input.CardNumber

	if year <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidYear
	}
	if sender == "" {
		return nil, transfer_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumber{
		Year:       year,
		CardNumber: sender,
	}

	res, err := r.TransferGraphql.TransferService.FindMonthlyTransferAmountsBySenderCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferMonthAmount("success", "Successfully fetched monthly Transaction amounts", res)

	return so, nil
}

// FindMonthlyTransferAmountsByReceiverCardNumber is the resolver for the findMonthlyTransferAmountsByReceiverCardNumber field.
func (r *queryResolver) FindMonthlyTransferAmountsByReceiverCardNumber(ctx context.Context, input model.FindByCardNumberTransferRequest) (*model.APIResponseTransferMonthAmount, error) {
	year := int(input.Year)
	receiver := input.CardNumber

	if year <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidYear
	}
	if receiver == "" {
		return nil, transfer_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumber{
		Year:       year,
		CardNumber: receiver,
	}

	res, err := r.TransferGraphql.TransferService.FindMonthlyTransferAmountsByReceiverCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferMonthAmount("success", "Successfully fetched monthly Transaction amounts", res)

	return so, nil
}

// FindYearlyTransferAmountsBySenderCardNumber is the resolver for the findYearlyTransferAmountsBySenderCardNumber field.
func (r *queryResolver) FindYearlyTransferAmountsBySenderCardNumber(ctx context.Context, input model.FindByCardNumberTransferRequest) (*model.APIResponseTransferYearAmount, error) {
	year := int(input.Year)
	sender := input.CardNumber

	if year <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidYear
	}
	if sender == "" {
		return nil, transfer_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumber{
		Year:       year,
		CardNumber: sender,
	}

	res, err := r.TransferGraphql.TransferService.FindYearlyTransferAmountsBySenderCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferYearAmount("success", "Successfully fetched yearly Transaction amounts", res)

	return so, nil
}

// FindYearlyTransferAmountsByReceiverCardNumber is the resolver for the findYearlyTransferAmountsByReceiverCardNumber field.
func (r *queryResolver) FindYearlyTransferAmountsByReceiverCardNumber(ctx context.Context, input model.FindByCardNumberTransferRequest) (*model.APIResponseTransferYearAmount, error) {
	year := int(input.Year)
	receiver := input.CardNumber

	if year <= 0 {
		return nil, transfer_errors.ErrGraphqlInvalidYear
	}
	if receiver == "" {
		return nil, transfer_errors.ErrGraphqlInvalidCardNumber
	}

	reqService := requests.MonthYearCardNumber{
		Year:       year,
		CardNumber: receiver,
	}

	res, err := r.TransferGraphql.TransferService.FindYearlyTransferAmountsByReceiverCardNumber(&reqService)

	if err != nil {
		return nil, response.ToGraphqlErrorFromErrorResponse(err)
	}

	so := r.TransferGraphql.Mapping.ToGraphqlResponseTransferYearAmount("success", "Successfully fetched yearly Transaction amounts", res)

	return so, nil
}
