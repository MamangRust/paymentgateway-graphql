// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/MamangRust/paymentgatewaygraphql/internal/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ApiResponseCard struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseCardAll struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseCardDelete struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseCardDeleteAt struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseDashboardCard struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseDashboardCardNumber struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseGetMe struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseLogin struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseMerchant struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseMerchantAll struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseMerchantDelete struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseMerchantDeleteAt struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseMerchantDeleteAtPagination struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponseMerchantMonthlyAmount struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseMerchantMonthlyPaymentMethod struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseMerchantMonthlyTotalAmount struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseMerchantPagination struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponseMerchantTransactionPagination struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponseMerchantYearlyAmount struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseMerchantYearlyPaymentMethod struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseMerchantYearlyTotalAmount struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseMonthSaldoBalances struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseMonthTotalSaldo struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseMonthlyAmount struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseMonthlyBalance struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponsePaginationCard struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationCardDeleteAt struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationRole struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationRoleDeleteAt struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationSaldo struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationSaldoDeleteAt struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationTopup struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationTopupDeleteAt struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationTransaction struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationTransactionDeleteAt struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationTransfer struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationTransferDeleteAt struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationUser struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationUserDeleteAt struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationWithdraw struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponsePaginationWithdrawDeleteAt struct {
		Data       func(childComplexity int) int
		Message    func(childComplexity int) int
		Pagination func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ApiResponseRefreshToken struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseRegister struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseRole struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseRoleAll struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseRoleDelete struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseRoleDeleteAt struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseSaldoAll struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseSaldoDelete struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseSaldoResponse struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseSaldoResponseDeleteAt struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTopup struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTopupAll struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTopupDelete struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTopupDeleteAt struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTopupMonthAmount struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTopupMonthMethod struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTopupMonthStatusFailed struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTopupMonthStatusSuccess struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTopupYearAmount struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTopupYearMethod struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTopupYearStatusFailed struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTopupYearStatusSuccess struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransaction struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransactionAll struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransactionDelete struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransactionDeleteAt struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransactionMonthAmount struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransactionMonthMethod struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransactionMonthStatusFailed struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransactionMonthStatusSuccess struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransactionYearAmount struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransactionYearMethod struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransactionYearStatusFailed struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransactionYearStatusSuccess struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransactions struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransfer struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransferAll struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransferDelete struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransferDeleteAt struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransferMonthAmount struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransferMonthStatusFailed struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransferMonthStatusSuccess struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransferYearAmount struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransferYearStatusFailed struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransferYearStatusSuccess struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseTransfers struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseUserAll struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseUserDelete struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseUserResponse struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseUserResponseDeleteAt struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseWithdraw struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseWithdrawAll struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseWithdrawDelete struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseWithdrawDeleteAt struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseWithdrawMonthAmount struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseWithdrawMonthStatusFailed struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseWithdrawMonthStatusSuccess struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseWithdrawYearAmount struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseWithdrawYearStatusFailed struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseWithdrawYearStatusSuccess struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseYearSaldoBalances struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseYearTotalSaldo struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseYearlyAmount struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponseYearlyBalance struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponsesMerchant struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponsesRole struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponsesSaldo struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponsesTopup struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponsesUser struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	ApiResponsesWithdraw struct {
		Data    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	CardDashboardByNumberResponse struct {
		TotalBalance          func(childComplexity int) int
		TotalTopup            func(childComplexity int) int
		TotalTransaction      func(childComplexity int) int
		TotalTransferReceiver func(childComplexity int) int
		TotalTransferSend     func(childComplexity int) int
		TotalWithdraw         func(childComplexity int) int
	}

	CardDashboardResponse struct {
		TotalBalance     func(childComplexity int) int
		TotalTopup       func(childComplexity int) int
		TotalTransaction func(childComplexity int) int
		TotalTransfer    func(childComplexity int) int
		TotalWithdraw    func(childComplexity int) int
	}

	CardMonthlyAmountResponse struct {
		Month       func(childComplexity int) int
		TotalAmount func(childComplexity int) int
	}

	CardMonthlyBalanceResponse struct {
		Month        func(childComplexity int) int
		TotalBalance func(childComplexity int) int
	}

	CardResponse struct {
		CardNumber   func(childComplexity int) int
		CardProvider func(childComplexity int) int
		CardType     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Cvv          func(childComplexity int) int
		ExpireDate   func(childComplexity int) int
		ID           func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	CardResponseDeleteAt struct {
		CardNumber   func(childComplexity int) int
		CardProvider func(childComplexity int) int
		CardType     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Cvv          func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		ExpireDate   func(childComplexity int) int
		ID           func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	CardYearlyAmountResponse struct {
		TotalAmount func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	CardYearlyBalanceResponse struct {
		TotalBalance func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	MerchantMonthlyAmountResponse struct {
		Month       func(childComplexity int) int
		TotalAmount func(childComplexity int) int
	}

	MerchantMonthlyPaymentMethodResponse struct {
		Month         func(childComplexity int) int
		PaymentMethod func(childComplexity int) int
		TotalAmount   func(childComplexity int) int
	}

	MerchantMonthlyTotalAmountResponse struct {
		Month       func(childComplexity int) int
		TotalAmount func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	MerchantResponse struct {
		APIKey    func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Status    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	MerchantResponseDeleteAt struct {
		APIKey    func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Status    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	MerchantTransactionResponse struct {
		Amount          func(childComplexity int) int
		CardNumber      func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		MerchantID      func(childComplexity int) int
		MerchantName    func(childComplexity int) int
		PaymentMethod   func(childComplexity int) int
		TransactionTime func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	MerchantYearlyAmountResponse struct {
		TotalAmount func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	MerchantYearlyPaymentMethodResponse struct {
		PaymentMethod func(childComplexity int) int
		TotalAmount   func(childComplexity int) int
		Year          func(childComplexity int) int
	}

	MerchantYearlyTotalAmountResponse struct {
		TotalAmount func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	Mutation struct {
		CreateCard                     func(childComplexity int, input model.CreateCardInput) int
		CreateMerchant                 func(childComplexity int, input model.CreateMerchantInput) int
		CreateRole                     func(childComplexity int, input model.CreateRoleInput) int
		CreateSaldo                    func(childComplexity int, input model.CreateSaldoInput) int
		CreateTopup                    func(childComplexity int, input model.CreateTopupInput) int
		CreateTransaction              func(childComplexity int, input model.CreateTransactionRequest) int
		CreateTransfer                 func(childComplexity int, input model.CreateTransferRequest) int
		CreateUser                     func(childComplexity int, input model.CreateUserInput) int
		CreateWithdraw                 func(childComplexity int, input model.CreateWithdrawInput) int
		DeleteAllCardPermanent         func(childComplexity int) int
		DeleteAllMerchantPermanent     func(childComplexity int) int
		DeleteAllRolePermanent         func(childComplexity int) int
		DeleteAllSaldoPermanent        func(childComplexity int) int
		DeleteAllTopupPermanent        func(childComplexity int) int
		DeleteAllTransactionsPermanent func(childComplexity int) int
		DeleteAllTransfersPermanent    func(childComplexity int) int
		DeleteAllUserPermanent         func(childComplexity int) int
		DeleteAllWithdrawPermanent     func(childComplexity int) int
		DeleteCardPermanent            func(childComplexity int, input model.FindByIDCardInput) int
		DeleteMerchantPermanent        func(childComplexity int, input model.FindByIDMerchantInput) int
		DeleteRolePermanent            func(childComplexity int, input model.FindByIDRoleInput) int
		DeleteSaldoPermanent           func(childComplexity int, input model.FindByIDSaldoInput) int
		DeleteTopupPermanent           func(childComplexity int, input model.FindByIDTopupInput) int
		DeleteTransactionPermanent     func(childComplexity int, input model.FindByIDTransactionRequest) int
		DeleteTransferPermanent        func(childComplexity int, input model.FindByIDTransferRequest) int
		DeleteUserPermanent            func(childComplexity int, input model.FindByIDUserInput) int
		DeleteWithdrawPermanent        func(childComplexity int, input model.FindByIDWithdrawInput) int
		LoginUser                      func(childComplexity int, input model.LoginInput) int
		RefreshToken                   func(childComplexity int, input model.RefreshTokenInput) int
		RegisterUser                   func(childComplexity int, input model.RegisterInput) int
		RestoreAllCard                 func(childComplexity int) int
		RestoreAllMerchant             func(childComplexity int) int
		RestoreAllRole                 func(childComplexity int) int
		RestoreAllSaldo                func(childComplexity int) int
		RestoreAllTopup                func(childComplexity int) int
		RestoreAllTransactions         func(childComplexity int) int
		RestoreAllTransfers            func(childComplexity int) int
		RestoreAllUser                 func(childComplexity int) int
		RestoreAllWithdraw             func(childComplexity int) int
		RestoreCard                    func(childComplexity int, input model.FindByIDCardInput) int
		RestoreMerchant                func(childComplexity int, input model.FindByIDMerchantInput) int
		RestoreRole                    func(childComplexity int, input model.FindByIDRoleInput) int
		RestoreSaldo                   func(childComplexity int, input model.FindByIDSaldoInput) int
		RestoreTopup                   func(childComplexity int, input model.FindByIDTopupInput) int
		RestoreTransaction             func(childComplexity int, input model.FindByIDTransactionRequest) int
		RestoreTransfer                func(childComplexity int, input model.FindByIDTransferRequest) int
		RestoreUser                    func(childComplexity int, input model.FindByIDUserInput) int
		RestoreWithdraw                func(childComplexity int, input model.FindByIDWithdrawInput) int
		TrashedCard                    func(childComplexity int, input model.FindByIDCardInput) int
		TrashedMerchant                func(childComplexity int, input model.FindByIDMerchantInput) int
		TrashedRole                    func(childComplexity int, input model.FindByIDRoleInput) int
		TrashedSaldo                   func(childComplexity int, input model.FindByIDSaldoInput) int
		TrashedTopup                   func(childComplexity int, input model.FindByIDTopupInput) int
		TrashedTransaction             func(childComplexity int, input model.FindByIDTransactionRequest) int
		TrashedTransfer                func(childComplexity int, input model.FindByIDTransferRequest) int
		TrashedUser                    func(childComplexity int, input model.FindByIDUserInput) int
		TrashedWithdraw                func(childComplexity int, input model.FindByIDWithdrawInput) int
		UpdateCard                     func(childComplexity int, input model.UpdateCardInput) int
		UpdateMerchant                 func(childComplexity int, input model.UpdateMerchantInput) int
		UpdateRole                     func(childComplexity int, input model.UpdateRoleInput) int
		UpdateSaldo                    func(childComplexity int, input model.UpdateSaldoInput) int
		UpdateTopup                    func(childComplexity int, input model.UpdateTopupInput) int
		UpdateTransaction              func(childComplexity int, input model.UpdateTransactionRequest) int
		UpdateTransfer                 func(childComplexity int, input model.UpdateTransferRequest) int
		UpdateUser                     func(childComplexity int, input model.UpdateUserInput) int
		UpdateWithdraw                 func(childComplexity int, input model.UpdateWithdrawInput) int
	}

	PaginationMeta struct {
		CurrentPage  func(childComplexity int) int
		PageSize     func(childComplexity int) int
		TotalPages   func(childComplexity int) int
		TotalRecords func(childComplexity int) int
	}

	Query struct {
		DashboardCard                                   func(childComplexity int) int
		DashboardCardNumber                             func(childComplexity int, input model.FindByCardNumberInput) int
		FindActiveTransactions                          func(childComplexity int, input *model.FindAllTransactionRequest) int
		FindActiveTransfers                             func(childComplexity int, input *model.FindAllTransferRequest) int
		FindAllCard                                     func(childComplexity int, input *model.FindAllCardInput) int
		FindAllMerchant                                 func(childComplexity int, input *model.FindAllMerchantInput) int
		FindAllRole                                     func(childComplexity int, input *model.FindAllRoleInput) int
		FindAllSaldo                                    func(childComplexity int, input *model.FindAllSaldoInput) int
		FindAllTopup                                    func(childComplexity int, input *model.FindAllTopupInput) int
		FindAllTopupByCardNumber                        func(childComplexity int, input *model.FindAllTopupByCardNumberInput) int
		FindAllTransactionByApikey                      func(childComplexity int, input *model.FindAllMerchantApikeyInput) int
		FindAllTransactionByMerchant                    func(childComplexity int, input *model.FindAllMerchantTransactionInput) int
		FindAllTransactionMerchant                      func(childComplexity int, input *model.FindAllMerchantInput) int
		FindAllTransactions                             func(childComplexity int, input *model.FindAllTransactionRequest) int
		FindAllTransactionsByCardNumber                 func(childComplexity int, input *model.FindAllTransactionCardNumberRequest) int
		FindAllTransfers                                func(childComplexity int, input *model.FindAllTransferRequest) int
		FindAllUsers                                    func(childComplexity int, input *model.FindAllUserInput) int
		FindAllWithdraw                                 func(childComplexity int, input model.FindAllWithdrawInput) int
		FindAllWithdrawByCardNumber                     func(childComplexity int, input model.FindAllWithdrawByCardNumberInput) int
		FindByAPIKey                                    func(childComplexity int, input model.FindByAPIKeyInput) int
		FindByActive                                    func(childComplexity int, input *model.FindAllMerchantInput) int
		FindByActiveCard                                func(childComplexity int, input *model.FindAllCardInput) int
		FindByActiveRole                                func(childComplexity int, input *model.FindAllRoleInput) int
		FindByActiveSaldo                               func(childComplexity int, input *model.FindAllSaldoInput) int
		FindByActiveTopup                               func(childComplexity int, input *model.FindAllTopupInput) int
		FindByActiveUsers                               func(childComplexity int, input *model.FindAllUserInput) int
		FindByActiveWithdraw                            func(childComplexity int, input model.FindAllWithdrawInput) int
		FindByCardNumberCard                            func(childComplexity int, input model.FindByCardNumberInput) int
		FindByCardNumberSaldo                           func(childComplexity int, cardNumber string) int
		FindByIDCard                                    func(childComplexity int, input model.FindByIDCardInput) int
		FindByIDMerchant                                func(childComplexity int, input model.FindByIDMerchantInput) int
		FindByIDRole                                    func(childComplexity int, input model.FindByIDRoleInput) int
		FindByIDSaldo                                   func(childComplexity int, input model.FindByIDSaldoInput) int
		FindByIDTopup                                   func(childComplexity int, input model.FindByIDTopupInput) int
		FindByIDUser                                    func(childComplexity int, input model.FindByIDUserInput) int
		FindByIDWithdraw                                func(childComplexity int, input model.FindByIDWithdrawInput) int
		FindByMerchantUserID                            func(childComplexity int, input model.FindByMerchantUserIDInput) int
		FindByTrashed                                   func(childComplexity int, input *model.FindAllMerchantInput) int
		FindByTrashedCard                               func(childComplexity int, input *model.FindAllCardInput) int
		FindByTrashedRole                               func(childComplexity int, input *model.FindAllRoleInput) int
		FindByTrashedSaldo                              func(childComplexity int, input *model.FindAllSaldoInput) int
		FindByTrashedTopup                              func(childComplexity int, input *model.FindAllTopupInput) int
		FindByTrashedUsers                              func(childComplexity int, input *model.FindAllUserInput) int
		FindByTrashedWithdraw                           func(childComplexity int, input model.FindAllWithdrawInput) int
		FindByUserIDCard                                func(childComplexity int, input model.FindByUserIDCardInput) int
		FindByUserIDRole                                func(childComplexity int, input model.FindByIDUserRoleInput) int
		FindMonthlyAmountByApikey                       func(childComplexity int, input model.FindYearMerchantByApikeyInput) int
		FindMonthlyAmountByMerchants                    func(childComplexity int, input model.FindYearMerchantByIDInput) int
		FindMonthlyAmountMerchant                       func(childComplexity int, input model.FindYearMerchantInput) int
		FindMonthlyAmounts                              func(childComplexity int, input model.FindYearTransactionStatus) int
		FindMonthlyAmountsByCardNumber                  func(childComplexity int, input model.FindByYearCardNumberTransactionRequest) int
		FindMonthlyBalance                              func(childComplexity int, input model.FindYearBalanceInput) int
		FindMonthlyBalanceByCardNumber                  func(childComplexity int, input model.FindYearBalanceCardNumberInput) int
		FindMonthlyPaymentMethodByApikey                func(childComplexity int, input model.FindYearMerchantByApikeyInput) int
		FindMonthlyPaymentMethodByMerchants             func(childComplexity int, input model.FindYearMerchantByIDInput) int
		FindMonthlyPaymentMethods                       func(childComplexity int, input model.FindYearTransactionStatus) int
		FindMonthlyPaymentMethodsByCardNumber           func(childComplexity int, input model.FindByYearCardNumberTransactionRequest) int
		FindMonthlyPaymentMethodsMerchant               func(childComplexity int, input model.FindYearMerchantInput) int
		FindMonthlySaldoBalances                        func(childComplexity int, input model.FindYearlySaldoInput) int
		FindMonthlyTopupAmount                          func(childComplexity int, input model.FindYearAmountInput) int
		FindMonthlyTopupAmountByCardNumber              func(childComplexity int, input model.FindYearAmountCardNumberInput) int
		FindMonthlyTopupAmounts                         func(childComplexity int, input model.FindYearTopupStatusInput) int
		FindMonthlyTopupAmountsByCardNumber             func(childComplexity int, input model.FindYearTopupCardNumberInput) int
		FindMonthlyTopupMethods                         func(childComplexity int, input model.FindYearTopupStatusInput) int
		FindMonthlyTopupMethodsByCardNumber             func(childComplexity int, input model.FindYearTopupCardNumberInput) int
		FindMonthlyTopupStatusFailed                    func(childComplexity int, input model.FindMonthlyTopupStatusInput) int
		FindMonthlyTopupStatusFailedByCardNumber        func(childComplexity int, input model.FindMonthlyTopupStatusCardNumberInput) int
		FindMonthlyTopupStatusSuccess                   func(childComplexity int, input model.FindMonthlyTopupStatusInput) int
		FindMonthlyTopupStatusSuccessByCardNumber       func(childComplexity int, input model.FindMonthlyTopupStatusCardNumberInput) int
		FindMonthlyTotalAmountByApikey                  func(childComplexity int, input model.FindYearMerchantByApikeyInput) int
		FindMonthlyTotalAmountByMerchants               func(childComplexity int, input model.FindYearMerchantByIDInput) int
		FindMonthlyTotalAmountMerchant                  func(childComplexity int, input model.FindYearMerchantInput) int
		FindMonthlyTotalSaldoBalance                    func(childComplexity int, input model.FindMonthlySaldoTotalBalanceInput) int
		FindMonthlyTransactionAmount                    func(childComplexity int, input model.FindYearAmountInput) int
		FindMonthlyTransactionAmountByCardNumber        func(childComplexity int, input model.FindYearAmountCardNumberInput) int
		FindMonthlyTransactionStatusFailed              func(childComplexity int, input model.FindMonthlyTransactionStatus) int
		FindMonthlyTransactionStatusFailedByCardNumber  func(childComplexity int, input model.FindMonthlyTransactionStatusCardNumber) int
		FindMonthlyTransactionStatusSuccess             func(childComplexity int, input model.FindMonthlyTransactionStatus) int
		FindMonthlyTransactionStatusSuccessByCardNumber func(childComplexity int, input model.FindMonthlyTransactionStatusCardNumber) int
		FindMonthlyTransferAmounts                      func(childComplexity int, input model.FindYearTransferStatus) int
		FindMonthlyTransferAmountsByReceiverCardNumber  func(childComplexity int, input model.FindByCardNumberTransferRequest) int
		FindMonthlyTransferAmountsBySenderCardNumber    func(childComplexity int, input model.FindByCardNumberTransferRequest) int
		FindMonthlyTransferReceiverAmount               func(childComplexity int, input model.FindYearAmountInput) int
		FindMonthlyTransferReceiverAmountByCardNumber   func(childComplexity int, input model.FindYearAmountCardNumberInput) int
		FindMonthlyTransferSenderAmount                 func(childComplexity int, input model.FindYearAmountInput) int
		FindMonthlyTransferSenderAmountByCardNumber     func(childComplexity int, input model.FindYearAmountCardNumberInput) int
		FindMonthlyTransferStatusFailed                 func(childComplexity int, input model.FindMonthlyTransferStatus) int
		FindMonthlyTransferStatusFailedByCardNumber     func(childComplexity int, input model.FindMonthlyTransferStatusCardNumber) int
		FindMonthlyTransferStatusSuccess                func(childComplexity int, input model.FindMonthlyTransferStatus) int
		FindMonthlyTransferStatusSuccessByCardNumber    func(childComplexity int, input model.FindMonthlyTransferStatusCardNumber) int
		FindMonthlyWithdrawAmount                       func(childComplexity int, input model.FindYearAmountInput) int
		FindMonthlyWithdrawAmountByCardNumber           func(childComplexity int, input model.FindYearAmountCardNumberInput) int
		FindMonthlyWithdrawStatusFailed                 func(childComplexity int, input model.FindMonthlyWithdrawStatusInput) int
		FindMonthlyWithdrawStatusFailedCardNumber       func(childComplexity int, input model.FindMonthlyWithdrawStatusCardNumberInput) int
		FindMonthlyWithdrawStatusSuccess                func(childComplexity int, input model.FindMonthlyWithdrawStatusInput) int
		FindMonthlyWithdrawStatusSuccessCardNumber      func(childComplexity int, input model.FindMonthlyWithdrawStatusCardNumberInput) int
		FindMonthlyWithdraws                            func(childComplexity int, input model.FindYearWithdrawStatusInput) int
		FindMonthlyWithdrawsByCardNumber                func(childComplexity int, input model.FindYearWithdrawCardNumberInput) int
		FindTransactionByID                             func(childComplexity int, input *model.FindByIDTransactionRequest) int
		FindTransactionByMerchantID                     func(childComplexity int, input *model.FindTransactionByMerchantIDRequest) int
		FindTransferByID                                func(childComplexity int, input *model.FindByIDTransferRequest) int
		FindTransfersByReceiver                         func(childComplexity int, input *model.FindTransferByTransferToRequest) int
		FindTransfersBySender                           func(childComplexity int, input *model.FindTransferByTransferFromRequest) int
		FindTrashedTransactions                         func(childComplexity int, input *model.FindAllTransactionRequest) int
		FindTrashedTransfers                            func(childComplexity int, input *model.FindAllTransferRequest) int
		FindYearTotalSaldoBalance                       func(childComplexity int, input model.FindYearlySaldoInput) int
		FindYearlyAmountByApikey                        func(childComplexity int, input model.FindYearMerchantByApikeyInput) int
		FindYearlyAmountByMerchants                     func(childComplexity int, input model.FindYearMerchantByIDInput) int
		FindYearlyAmountMerchant                        func(childComplexity int, input model.FindYearMerchantInput) int
		FindYearlyAmounts                               func(childComplexity int, input model.FindYearTransactionStatus) int
		FindYearlyAmountsByCardNumber                   func(childComplexity int, input model.FindByYearCardNumberTransactionRequest) int
		FindYearlyBalance                               func(childComplexity int, input model.FindYearBalanceInput) int
		FindYearlyBalanceByCardNumber                   func(childComplexity int, input model.FindYearBalanceCardNumberInput) int
		FindYearlyPaymentMethodByApikey                 func(childComplexity int, input model.FindYearMerchantByApikeyInput) int
		FindYearlyPaymentMethodByMerchants              func(childComplexity int, input model.FindYearMerchantByIDInput) int
		FindYearlyPaymentMethodMerchant                 func(childComplexity int, input model.FindYearMerchantInput) int
		FindYearlyPaymentMethods                        func(childComplexity int, input model.FindYearTransactionStatus) int
		FindYearlyPaymentMethodsByCardNumber            func(childComplexity int, input model.FindByYearCardNumberTransactionRequest) int
		FindYearlySaldoBalances                         func(childComplexity int, input model.FindYearlySaldoInput) int
		FindYearlyTopupAmount                           func(childComplexity int, input model.FindYearAmountInput) int
		FindYearlyTopupAmountByCardNumber               func(childComplexity int, input model.FindYearAmountCardNumberInput) int
		FindYearlyTopupAmounts                          func(childComplexity int, input model.FindYearTopupStatusInput) int
		FindYearlyTopupAmountsByCardNumber              func(childComplexity int, input model.FindYearTopupCardNumberInput) int
		FindYearlyTopupMethods                          func(childComplexity int, input model.FindYearTopupStatusInput) int
		FindYearlyTopupMethodsByCardNumber              func(childComplexity int, input model.FindYearTopupCardNumberInput) int
		FindYearlyTopupStatusFailed                     func(childComplexity int, input model.FindYearTopupStatusInput) int
		FindYearlyTopupStatusFailedByCardNumber         func(childComplexity int, input model.FindYearTopupStatusCardNumberInput) int
		FindYearlyTopupStatusSuccess                    func(childComplexity int, input model.FindYearTopupStatusInput) int
		FindYearlyTopupStatusSuccessByCardNumber        func(childComplexity int, input model.FindYearTopupStatusCardNumberInput) int
		FindYearlyTotalAmountByApikey                   func(childComplexity int, input model.FindYearMerchantByApikeyInput) int
		FindYearlyTotalAmountByMerchants                func(childComplexity int, input model.FindYearMerchantByIDInput) int
		FindYearlyTotalAmountMerchant                   func(childComplexity int, input model.FindYearMerchantInput) int
		FindYearlyTransactionAmount                     func(childComplexity int, input model.FindYearAmountInput) int
		FindYearlyTransactionAmountByCardNumber         func(childComplexity int, input model.FindYearAmountCardNumberInput) int
		FindYearlyTransactionStatusFailed               func(childComplexity int, input model.FindYearTransactionStatus) int
		FindYearlyTransactionStatusFailedByCardNumber   func(childComplexity int, input model.FindYearTransactionStatusCardNumber) int
		FindYearlyTransactionStatusSuccess              func(childComplexity int, input model.FindYearTransactionStatus) int
		FindYearlyTransactionStatusSuccessByCardNumber  func(childComplexity int, input model.FindYearTransactionStatusCardNumber) int
		FindYearlyTransferAmounts                       func(childComplexity int, input model.FindYearTransferStatus) int
		FindYearlyTransferAmountsByReceiverCardNumber   func(childComplexity int, input model.FindByCardNumberTransferRequest) int
		FindYearlyTransferAmountsBySenderCardNumber     func(childComplexity int, input model.FindByCardNumberTransferRequest) int
		FindYearlyTransferReceiverAmount                func(childComplexity int, input model.FindYearAmountInput) int
		FindYearlyTransferReceiverAmountByCardNumber    func(childComplexity int, input model.FindYearAmountCardNumberInput) int
		FindYearlyTransferSenderAmount                  func(childComplexity int, input model.FindYearAmountInput) int
		FindYearlyTransferSenderAmountByCardNumber      func(childComplexity int, input model.FindYearAmountCardNumberInput) int
		FindYearlyTransferStatusFailed                  func(childComplexity int, input model.FindYearTransferStatus) int
		FindYearlyTransferStatusFailedByCardNumber      func(childComplexity int, input model.FindYearTransferStatusCardNumber) int
		FindYearlyTransferStatusSuccess                 func(childComplexity int, input model.FindYearTransferStatus) int
		FindYearlyTransferStatusSuccessByCardNumber     func(childComplexity int, input model.FindYearTransferStatusCardNumber) int
		FindYearlyWithdrawAmount                        func(childComplexity int, input model.FindYearAmountInput) int
		FindYearlyWithdrawAmountByCardNumber            func(childComplexity int, input model.FindYearAmountCardNumberInput) int
		FindYearlyWithdrawStatusFailed                  func(childComplexity int, input model.FindYearWithdrawStatusInput) int
		FindYearlyWithdrawStatusFailedCardNumber        func(childComplexity int, input model.FindYearWithdrawStatusCardNumberInput) int
		FindYearlyWithdrawStatusSuccess                 func(childComplexity int, input model.FindYearWithdrawStatusInput) int
		FindYearlyWithdrawStatusSuccessCardNumber       func(childComplexity int, input model.FindYearWithdrawStatusCardNumberInput) int
		FindYearlyWithdraws                             func(childComplexity int, input model.FindYearWithdrawStatusInput) int
		FindYearlyWithdrawsByCardNumber                 func(childComplexity int, input model.FindYearWithdrawCardNumberInput) int
		GetMe                                           func(childComplexity int) int
	}

	RoleResponse struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	RoleResponseDeleteAt struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	SaldoMonthBalanceResponse struct {
		Month        func(childComplexity int) int
		TotalBalance func(childComplexity int) int
	}

	SaldoMonthTotalBalanceResponse struct {
		Month        func(childComplexity int) int
		TotalBalance func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	SaldoResponse struct {
		CardNumber     func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		TotalBalance   func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		WithdrawAmount func(childComplexity int) int
		WithdrawTime   func(childComplexity int) int
	}

	SaldoResponseDeleteAt struct {
		CardNumber     func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		TotalBalance   func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		WithdrawAmount func(childComplexity int) int
		WithdrawTime   func(childComplexity int) int
	}

	SaldoYearBalanceResponse struct {
		TotalBalance func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	SaldoYearTotalBalanceResponse struct {
		TotalBalance func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	TokenResponse struct {
		AccessToken  func(childComplexity int) int
		RefreshToken func(childComplexity int) int
	}

	TopupMonthAmountResponse struct {
		Month       func(childComplexity int) int
		TotalAmount func(childComplexity int) int
	}

	TopupMonthMethodResponse struct {
		Month       func(childComplexity int) int
		TopupMethod func(childComplexity int) int
		TotalAmount func(childComplexity int) int
		TotalTopups func(childComplexity int) int
	}

	TopupMonthStatusFailedResponse struct {
		Month       func(childComplexity int) int
		TotalAmount func(childComplexity int) int
		TotalFailed func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	TopupMonthStatusSuccessResponse struct {
		Month        func(childComplexity int) int
		TotalAmount  func(childComplexity int) int
		TotalSuccess func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	TopupResponse struct {
		CardNumber  func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		TopupAmount func(childComplexity int) int
		TopupMethod func(childComplexity int) int
		TopupNo     func(childComplexity int) int
		TopupTime   func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	TopupResponseDeleteAt struct {
		CardNumber  func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		TopupAmount func(childComplexity int) int
		TopupMethod func(childComplexity int) int
		TopupNo     func(childComplexity int) int
		TopupTime   func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	TopupYearAmountResponse struct {
		TotalAmount func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	TopupYearMethodResponse struct {
		TopupMethod func(childComplexity int) int
		TotalAmount func(childComplexity int) int
		TotalTopups func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	TopupYearStatusFailedResponse struct {
		TotalAmount func(childComplexity int) int
		TotalFailed func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	TopupYearStatusSuccessResponse struct {
		TotalAmount  func(childComplexity int) int
		TotalSuccess func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	TransactionMonthAmountResponse struct {
		Month       func(childComplexity int) int
		TotalAmount func(childComplexity int) int
	}

	TransactionMonthMethodResponse struct {
		Month             func(childComplexity int) int
		PaymentMethod     func(childComplexity int) int
		TotalAmount       func(childComplexity int) int
		TotalTransactions func(childComplexity int) int
	}

	TransactionMonthStatusFailedResponse struct {
		Month       func(childComplexity int) int
		TotalAmount func(childComplexity int) int
		TotalFailed func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	TransactionMonthStatusSuccessResponse struct {
		Month        func(childComplexity int) int
		TotalAmount  func(childComplexity int) int
		TotalSuccess func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	TransactionResponse struct {
		Amount          func(childComplexity int) int
		CardNumber      func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		MerchantID      func(childComplexity int) int
		PaymentMethod   func(childComplexity int) int
		TransactionNo   func(childComplexity int) int
		TransactionTime func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	TransactionResponseDeleteAt struct {
		Amount          func(childComplexity int) int
		CardNumber      func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		MerchantID      func(childComplexity int) int
		PaymentMethod   func(childComplexity int) int
		TransactionNo   func(childComplexity int) int
		TransactionTime func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	TransactionYearMethodResponse struct {
		PaymentMethod     func(childComplexity int) int
		TotalAmount       func(childComplexity int) int
		TotalTransactions func(childComplexity int) int
		Year              func(childComplexity int) int
	}

	TransactionYearStatusFailedResponse struct {
		TotalAmount func(childComplexity int) int
		TotalFailed func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	TransactionYearStatusSuccessResponse struct {
		TotalAmount  func(childComplexity int) int
		TotalSuccess func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	TransactionYearlyAmountResponse struct {
		TotalAmount func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	TransferMonthAmountResponse struct {
		Month       func(childComplexity int) int
		TotalAmount func(childComplexity int) int
	}

	TransferMonthStatusFailedResponse struct {
		Month       func(childComplexity int) int
		TotalAmount func(childComplexity int) int
		TotalFailed func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	TransferMonthStatusSuccessResponse struct {
		Month        func(childComplexity int) int
		TotalAmount  func(childComplexity int) int
		TotalSuccess func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	TransferResponse struct {
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		TransferAmount func(childComplexity int) int
		TransferFrom   func(childComplexity int) int
		TransferNo     func(childComplexity int) int
		TransferTime   func(childComplexity int) int
		TransferTo     func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	TransferResponseDeleteAt struct {
		CreatedAt      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		TransferAmount func(childComplexity int) int
		TransferFrom   func(childComplexity int) int
		TransferNo     func(childComplexity int) int
		TransferTime   func(childComplexity int) int
		TransferTo     func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	TransferYearAmountResponse struct {
		TotalAmount func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	TransferYearStatusFailedResponse struct {
		TotalAmount func(childComplexity int) int
		TotalFailed func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	TransferYearStatusSuccessResponse struct {
		TotalAmount  func(childComplexity int) int
		TotalSuccess func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	UserResponse struct {
		CreatedAt func(childComplexity int) int
		Email     func(childComplexity int) int
		Firstname func(childComplexity int) int
		ID        func(childComplexity int) int
		Lastname  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	UserResponseDeleteAt struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Email     func(childComplexity int) int
		Firstname func(childComplexity int) int
		ID        func(childComplexity int) int
		Lastname  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	WithdrawMonthStatusFailedResponse struct {
		Month       func(childComplexity int) int
		TotalAmount func(childComplexity int) int
		TotalFailed func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	WithdrawMonthStatusSuccessResponse struct {
		Month        func(childComplexity int) int
		TotalAmount  func(childComplexity int) int
		TotalSuccess func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	WithdrawMonthlyAmountResponse struct {
		Month       func(childComplexity int) int
		TotalAmount func(childComplexity int) int
	}

	WithdrawResponse struct {
		CardNumber     func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		WithdrawAmount func(childComplexity int) int
		WithdrawNo     func(childComplexity int) int
		WithdrawTime   func(childComplexity int) int
	}

	WithdrawResponseDeleteAt struct {
		CardNumber     func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		WithdrawAmount func(childComplexity int) int
		WithdrawNo     func(childComplexity int) int
		WithdrawTime   func(childComplexity int) int
	}

	WithdrawYearStatusFailedResponse struct {
		TotalAmount func(childComplexity int) int
		TotalFailed func(childComplexity int) int
		Year        func(childComplexity int) int
	}

	WithdrawYearStatusSuccessResponse struct {
		TotalAmount  func(childComplexity int) int
		TotalSuccess func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	WithdrawYearlyAmountResponse struct {
		TotalAmount func(childComplexity int) int
		Year        func(childComplexity int) int
	}
}

type MutationResolver interface {
	RegisterUser(ctx context.Context, input model.RegisterInput) (*model.APIResponseRegister, error)
	LoginUser(ctx context.Context, input model.LoginInput) (*model.APIResponseLogin, error)
	RefreshToken(ctx context.Context, input model.RefreshTokenInput) (*model.APIResponseRefreshToken, error)
	CreateCard(ctx context.Context, input model.CreateCardInput) (*model.APIResponseCard, error)
	UpdateCard(ctx context.Context, input model.UpdateCardInput) (*model.APIResponseCard, error)
	TrashedCard(ctx context.Context, input model.FindByIDCardInput) (*model.APIResponseCardDeleteAt, error)
	RestoreCard(ctx context.Context, input model.FindByIDCardInput) (*model.APIResponseCardDeleteAt, error)
	DeleteCardPermanent(ctx context.Context, input model.FindByIDCardInput) (*model.APIResponseCardDelete, error)
	RestoreAllCard(ctx context.Context) (*model.APIResponseCardAll, error)
	DeleteAllCardPermanent(ctx context.Context) (*model.APIResponseCardAll, error)
	CreateMerchant(ctx context.Context, input model.CreateMerchantInput) (*model.APIResponseMerchant, error)
	UpdateMerchant(ctx context.Context, input model.UpdateMerchantInput) (*model.APIResponseMerchant, error)
	TrashedMerchant(ctx context.Context, input model.FindByIDMerchantInput) (*model.APIResponseMerchantDeleteAt, error)
	RestoreMerchant(ctx context.Context, input model.FindByIDMerchantInput) (*model.APIResponseMerchantDeleteAt, error)
	DeleteMerchantPermanent(ctx context.Context, input model.FindByIDMerchantInput) (*model.APIResponseMerchantDelete, error)
	RestoreAllMerchant(ctx context.Context) (*model.APIResponseMerchantAll, error)
	DeleteAllMerchantPermanent(ctx context.Context) (*model.APIResponseMerchantAll, error)
	CreateRole(ctx context.Context, input model.CreateRoleInput) (*model.APIResponseRole, error)
	UpdateRole(ctx context.Context, input model.UpdateRoleInput) (*model.APIResponseRole, error)
	TrashedRole(ctx context.Context, input model.FindByIDRoleInput) (*model.APIResponseRoleDeleteAt, error)
	RestoreRole(ctx context.Context, input model.FindByIDRoleInput) (*model.APIResponseRoleDeleteAt, error)
	DeleteRolePermanent(ctx context.Context, input model.FindByIDRoleInput) (*model.APIResponseRoleDelete, error)
	RestoreAllRole(ctx context.Context) (*model.APIResponseRoleAll, error)
	DeleteAllRolePermanent(ctx context.Context) (*model.APIResponseRoleAll, error)
	CreateSaldo(ctx context.Context, input model.CreateSaldoInput) (*model.APIResponseSaldoResponse, error)
	UpdateSaldo(ctx context.Context, input model.UpdateSaldoInput) (*model.APIResponseSaldoResponse, error)
	TrashedSaldo(ctx context.Context, input model.FindByIDSaldoInput) (*model.APIResponseSaldoResponseDeleteAt, error)
	RestoreSaldo(ctx context.Context, input model.FindByIDSaldoInput) (*model.APIResponseSaldoResponseDeleteAt, error)
	DeleteSaldoPermanent(ctx context.Context, input model.FindByIDSaldoInput) (*model.APIResponseSaldoDelete, error)
	RestoreAllSaldo(ctx context.Context) (*model.APIResponseSaldoAll, error)
	DeleteAllSaldoPermanent(ctx context.Context) (*model.APIResponseSaldoAll, error)
	CreateTopup(ctx context.Context, input model.CreateTopupInput) (*model.APIResponseTopup, error)
	UpdateTopup(ctx context.Context, input model.UpdateTopupInput) (*model.APIResponseTopup, error)
	TrashedTopup(ctx context.Context, input model.FindByIDTopupInput) (*model.APIResponseTopupDeleteAt, error)
	RestoreTopup(ctx context.Context, input model.FindByIDTopupInput) (*model.APIResponseTopupDeleteAt, error)
	DeleteTopupPermanent(ctx context.Context, input model.FindByIDTopupInput) (*model.APIResponseTopupDelete, error)
	RestoreAllTopup(ctx context.Context) (*model.APIResponseTopupAll, error)
	DeleteAllTopupPermanent(ctx context.Context) (*model.APIResponseTopupAll, error)
	CreateTransaction(ctx context.Context, input model.CreateTransactionRequest) (*model.APIResponseTransaction, error)
	UpdateTransaction(ctx context.Context, input model.UpdateTransactionRequest) (*model.APIResponseTransaction, error)
	TrashedTransaction(ctx context.Context, input model.FindByIDTransactionRequest) (*model.APIResponseTransactionDeleteAt, error)
	RestoreTransaction(ctx context.Context, input model.FindByIDTransactionRequest) (*model.APIResponseTransactionDeleteAt, error)
	DeleteTransactionPermanent(ctx context.Context, input model.FindByIDTransactionRequest) (*model.APIResponseTransactionDelete, error)
	RestoreAllTransactions(ctx context.Context) (*model.APIResponseTransactionAll, error)
	DeleteAllTransactionsPermanent(ctx context.Context) (*model.APIResponseTransactionAll, error)
	CreateTransfer(ctx context.Context, input model.CreateTransferRequest) (*model.APIResponseTransfer, error)
	UpdateTransfer(ctx context.Context, input model.UpdateTransferRequest) (*model.APIResponseTransfer, error)
	TrashedTransfer(ctx context.Context, input model.FindByIDTransferRequest) (*model.APIResponseTransferDeleteAt, error)
	RestoreTransfer(ctx context.Context, input model.FindByIDTransferRequest) (*model.APIResponseTransferDeleteAt, error)
	DeleteTransferPermanent(ctx context.Context, input model.FindByIDTransferRequest) (*model.APIResponseTransferDelete, error)
	RestoreAllTransfers(ctx context.Context) (*model.APIResponseTransferAll, error)
	DeleteAllTransfersPermanent(ctx context.Context) (*model.APIResponseTransferAll, error)
	CreateUser(ctx context.Context, input model.CreateUserInput) (*model.APIResponseUserResponse, error)
	UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.APIResponseUserResponse, error)
	TrashedUser(ctx context.Context, input model.FindByIDUserInput) (*model.APIResponseUserResponseDeleteAt, error)
	RestoreUser(ctx context.Context, input model.FindByIDUserInput) (*model.APIResponseUserResponseDeleteAt, error)
	DeleteUserPermanent(ctx context.Context, input model.FindByIDUserInput) (*model.APIResponseUserDelete, error)
	RestoreAllUser(ctx context.Context) (*model.APIResponseUserAll, error)
	DeleteAllUserPermanent(ctx context.Context) (*model.APIResponseUserAll, error)
	CreateWithdraw(ctx context.Context, input model.CreateWithdrawInput) (*model.APIResponseWithdraw, error)
	UpdateWithdraw(ctx context.Context, input model.UpdateWithdrawInput) (*model.APIResponseWithdraw, error)
	TrashedWithdraw(ctx context.Context, input model.FindByIDWithdrawInput) (*model.APIResponseWithdrawDeleteAt, error)
	RestoreWithdraw(ctx context.Context, input model.FindByIDWithdrawInput) (*model.APIResponseWithdrawDeleteAt, error)
	DeleteWithdrawPermanent(ctx context.Context, input model.FindByIDWithdrawInput) (*model.APIResponseWithdrawDelete, error)
	RestoreAllWithdraw(ctx context.Context) (*model.APIResponseWithdrawAll, error)
	DeleteAllWithdrawPermanent(ctx context.Context) (*model.APIResponseWithdrawAll, error)
}
type QueryResolver interface {
	GetMe(ctx context.Context) (*model.APIResponseGetMe, error)
	FindAllCard(ctx context.Context, input *model.FindAllCardInput) (*model.APIResponsePaginationCard, error)
	FindByIDCard(ctx context.Context, input model.FindByIDCardInput) (*model.APIResponseCard, error)
	FindByUserIDCard(ctx context.Context, input model.FindByUserIDCardInput) (*model.APIResponseCard, error)
	FindByActiveCard(ctx context.Context, input *model.FindAllCardInput) (*model.APIResponsePaginationCardDeleteAt, error)
	FindByTrashedCard(ctx context.Context, input *model.FindAllCardInput) (*model.APIResponsePaginationCardDeleteAt, error)
	FindByCardNumberCard(ctx context.Context, input model.FindByCardNumberInput) (*model.APIResponseCard, error)
	DashboardCard(ctx context.Context) (*model.APIResponseDashboardCard, error)
	DashboardCardNumber(ctx context.Context, input model.FindByCardNumberInput) (*model.APIResponseDashboardCardNumber, error)
	FindMonthlyBalance(ctx context.Context, input model.FindYearBalanceInput) (*model.APIResponseMonthlyBalance, error)
	FindYearlyBalance(ctx context.Context, input model.FindYearBalanceInput) (*model.APIResponseYearlyBalance, error)
	FindMonthlyTopupAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseMonthlyAmount, error)
	FindYearlyTopupAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseYearlyAmount, error)
	FindMonthlyWithdrawAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseMonthlyAmount, error)
	FindYearlyWithdrawAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseYearlyAmount, error)
	FindMonthlyTransactionAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseMonthlyAmount, error)
	FindYearlyTransactionAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseYearlyAmount, error)
	FindMonthlyTransferSenderAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseMonthlyAmount, error)
	FindYearlyTransferSenderAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseYearlyAmount, error)
	FindMonthlyTransferReceiverAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseMonthlyAmount, error)
	FindYearlyTransferReceiverAmount(ctx context.Context, input model.FindYearAmountInput) (*model.APIResponseYearlyAmount, error)
	FindMonthlyBalanceByCardNumber(ctx context.Context, input model.FindYearBalanceCardNumberInput) (*model.APIResponseMonthlyBalance, error)
	FindYearlyBalanceByCardNumber(ctx context.Context, input model.FindYearBalanceCardNumberInput) (*model.APIResponseYearlyBalance, error)
	FindMonthlyTopupAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseMonthlyAmount, error)
	FindYearlyTopupAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseYearlyAmount, error)
	FindMonthlyWithdrawAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseMonthlyAmount, error)
	FindYearlyWithdrawAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseYearlyAmount, error)
	FindMonthlyTransactionAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseMonthlyAmount, error)
	FindYearlyTransactionAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseYearlyAmount, error)
	FindMonthlyTransferSenderAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseMonthlyAmount, error)
	FindYearlyTransferSenderAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseYearlyAmount, error)
	FindMonthlyTransferReceiverAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseMonthlyAmount, error)
	FindYearlyTransferReceiverAmountByCardNumber(ctx context.Context, input model.FindYearAmountCardNumberInput) (*model.APIResponseYearlyAmount, error)
	FindAllMerchant(ctx context.Context, input *model.FindAllMerchantInput) (*model.APIResponseMerchantPagination, error)
	FindByIDMerchant(ctx context.Context, input model.FindByIDMerchantInput) (*model.APIResponseMerchant, error)
	FindByAPIKey(ctx context.Context, input model.FindByAPIKeyInput) (*model.APIResponseMerchant, error)
	FindAllTransactionMerchant(ctx context.Context, input *model.FindAllMerchantInput) (*model.APIResponseMerchantTransactionPagination, error)
	FindAllTransactionByMerchant(ctx context.Context, input *model.FindAllMerchantTransactionInput) (*model.APIResponseMerchantTransactionPagination, error)
	FindAllTransactionByApikey(ctx context.Context, input *model.FindAllMerchantApikeyInput) (*model.APIResponseMerchantTransactionPagination, error)
	FindByMerchantUserID(ctx context.Context, input model.FindByMerchantUserIDInput) (*model.APIResponsesMerchant, error)
	FindByActive(ctx context.Context, input *model.FindAllMerchantInput) (*model.APIResponseMerchantDeleteAtPagination, error)
	FindByTrashed(ctx context.Context, input *model.FindAllMerchantInput) (*model.APIResponseMerchantDeleteAtPagination, error)
	FindMonthlyPaymentMethodsMerchant(ctx context.Context, input model.FindYearMerchantInput) (*model.APIResponseMerchantMonthlyPaymentMethod, error)
	FindYearlyPaymentMethodMerchant(ctx context.Context, input model.FindYearMerchantInput) (*model.APIResponseMerchantYearlyPaymentMethod, error)
	FindMonthlyAmountMerchant(ctx context.Context, input model.FindYearMerchantInput) (*model.APIResponseMerchantMonthlyAmount, error)
	FindYearlyAmountMerchant(ctx context.Context, input model.FindYearMerchantInput) (*model.APIResponseMerchantYearlyAmount, error)
	FindMonthlyTotalAmountMerchant(ctx context.Context, input model.FindYearMerchantInput) (*model.APIResponseMerchantMonthlyTotalAmount, error)
	FindYearlyTotalAmountMerchant(ctx context.Context, input model.FindYearMerchantInput) (*model.APIResponseMerchantYearlyTotalAmount, error)
	FindMonthlyPaymentMethodByMerchants(ctx context.Context, input model.FindYearMerchantByIDInput) (*model.APIResponseMerchantMonthlyPaymentMethod, error)
	FindYearlyPaymentMethodByMerchants(ctx context.Context, input model.FindYearMerchantByIDInput) (*model.APIResponseMerchantYearlyPaymentMethod, error)
	FindMonthlyAmountByMerchants(ctx context.Context, input model.FindYearMerchantByIDInput) (*model.APIResponseMerchantMonthlyAmount, error)
	FindYearlyAmountByMerchants(ctx context.Context, input model.FindYearMerchantByIDInput) (*model.APIResponseMerchantYearlyAmount, error)
	FindMonthlyTotalAmountByMerchants(ctx context.Context, input model.FindYearMerchantByIDInput) (*model.APIResponseMerchantMonthlyTotalAmount, error)
	FindYearlyTotalAmountByMerchants(ctx context.Context, input model.FindYearMerchantByIDInput) (*model.APIResponseMerchantYearlyTotalAmount, error)
	FindMonthlyPaymentMethodByApikey(ctx context.Context, input model.FindYearMerchantByApikeyInput) (*model.APIResponseMerchantMonthlyPaymentMethod, error)
	FindYearlyPaymentMethodByApikey(ctx context.Context, input model.FindYearMerchantByApikeyInput) (*model.APIResponseMerchantYearlyPaymentMethod, error)
	FindMonthlyAmountByApikey(ctx context.Context, input model.FindYearMerchantByApikeyInput) (*model.APIResponseMerchantMonthlyAmount, error)
	FindYearlyAmountByApikey(ctx context.Context, input model.FindYearMerchantByApikeyInput) (*model.APIResponseMerchantYearlyAmount, error)
	FindMonthlyTotalAmountByApikey(ctx context.Context, input model.FindYearMerchantByApikeyInput) (*model.APIResponseMerchantMonthlyTotalAmount, error)
	FindYearlyTotalAmountByApikey(ctx context.Context, input model.FindYearMerchantByApikeyInput) (*model.APIResponseMerchantYearlyTotalAmount, error)
	FindAllRole(ctx context.Context, input *model.FindAllRoleInput) (*model.APIResponsePaginationRole, error)
	FindByIDRole(ctx context.Context, input model.FindByIDRoleInput) (*model.APIResponseRole, error)
	FindByActiveRole(ctx context.Context, input *model.FindAllRoleInput) (*model.APIResponsePaginationRoleDeleteAt, error)
	FindByTrashedRole(ctx context.Context, input *model.FindAllRoleInput) (*model.APIResponsePaginationRoleDeleteAt, error)
	FindByUserIDRole(ctx context.Context, input model.FindByIDUserRoleInput) (*model.APIResponsesRole, error)
	FindAllSaldo(ctx context.Context, input *model.FindAllSaldoInput) (*model.APIResponsePaginationSaldo, error)
	FindByIDSaldo(ctx context.Context, input model.FindByIDSaldoInput) (*model.APIResponseSaldoResponse, error)
	FindMonthlyTotalSaldoBalance(ctx context.Context, input model.FindMonthlySaldoTotalBalanceInput) (*model.APIResponseMonthTotalSaldo, error)
	FindYearTotalSaldoBalance(ctx context.Context, input model.FindYearlySaldoInput) (*model.APIResponseYearTotalSaldo, error)
	FindMonthlySaldoBalances(ctx context.Context, input model.FindYearlySaldoInput) (*model.APIResponseMonthSaldoBalances, error)
	FindYearlySaldoBalances(ctx context.Context, input model.FindYearlySaldoInput) (*model.APIResponseYearSaldoBalances, error)
	FindByCardNumberSaldo(ctx context.Context, cardNumber string) (*model.APIResponseSaldoResponse, error)
	FindByActiveSaldo(ctx context.Context, input *model.FindAllSaldoInput) (*model.APIResponsePaginationSaldoDeleteAt, error)
	FindByTrashedSaldo(ctx context.Context, input *model.FindAllSaldoInput) (*model.APIResponsePaginationSaldoDeleteAt, error)
	FindAllTopup(ctx context.Context, input *model.FindAllTopupInput) (*model.APIResponsePaginationTopup, error)
	FindAllTopupByCardNumber(ctx context.Context, input *model.FindAllTopupByCardNumberInput) (*model.APIResponsePaginationTopup, error)
	FindByIDTopup(ctx context.Context, input model.FindByIDTopupInput) (*model.APIResponseTopup, error)
	FindMonthlyTopupStatusSuccess(ctx context.Context, input model.FindMonthlyTopupStatusInput) (*model.APIResponseTopupMonthStatusSuccess, error)
	FindYearlyTopupStatusSuccess(ctx context.Context, input model.FindYearTopupStatusInput) (*model.APIResponseTopupYearStatusSuccess, error)
	FindMonthlyTopupStatusFailed(ctx context.Context, input model.FindMonthlyTopupStatusInput) (*model.APIResponseTopupMonthStatusFailed, error)
	FindYearlyTopupStatusFailed(ctx context.Context, input model.FindYearTopupStatusInput) (*model.APIResponseTopupYearStatusFailed, error)
	FindMonthlyTopupStatusSuccessByCardNumber(ctx context.Context, input model.FindMonthlyTopupStatusCardNumberInput) (*model.APIResponseTopupMonthStatusSuccess, error)
	FindYearlyTopupStatusSuccessByCardNumber(ctx context.Context, input model.FindYearTopupStatusCardNumberInput) (*model.APIResponseTopupYearStatusSuccess, error)
	FindMonthlyTopupStatusFailedByCardNumber(ctx context.Context, input model.FindMonthlyTopupStatusCardNumberInput) (*model.APIResponseTopupMonthStatusFailed, error)
	FindYearlyTopupStatusFailedByCardNumber(ctx context.Context, input model.FindYearTopupStatusCardNumberInput) (*model.APIResponseTopupYearStatusFailed, error)
	FindMonthlyTopupMethods(ctx context.Context, input model.FindYearTopupStatusInput) (*model.APIResponseTopupMonthMethod, error)
	FindYearlyTopupMethods(ctx context.Context, input model.FindYearTopupStatusInput) (*model.APIResponseTopupYearMethod, error)
	FindMonthlyTopupAmounts(ctx context.Context, input model.FindYearTopupStatusInput) (*model.APIResponseTopupMonthAmount, error)
	FindYearlyTopupAmounts(ctx context.Context, input model.FindYearTopupStatusInput) (*model.APIResponseTopupYearAmount, error)
	FindMonthlyTopupMethodsByCardNumber(ctx context.Context, input model.FindYearTopupCardNumberInput) (*model.APIResponseTopupMonthMethod, error)
	FindYearlyTopupMethodsByCardNumber(ctx context.Context, input model.FindYearTopupCardNumberInput) (*model.APIResponseTopupYearMethod, error)
	FindMonthlyTopupAmountsByCardNumber(ctx context.Context, input model.FindYearTopupCardNumberInput) (*model.APIResponseTopupMonthAmount, error)
	FindYearlyTopupAmountsByCardNumber(ctx context.Context, input model.FindYearTopupCardNumberInput) (*model.APIResponseTopupYearAmount, error)
	FindByActiveTopup(ctx context.Context, input *model.FindAllTopupInput) (*model.APIResponsePaginationTopupDeleteAt, error)
	FindByTrashedTopup(ctx context.Context, input *model.FindAllTopupInput) (*model.APIResponsePaginationTopupDeleteAt, error)
	FindAllTransactions(ctx context.Context, input *model.FindAllTransactionRequest) (*model.APIResponsePaginationTransaction, error)
	FindAllTransactionsByCardNumber(ctx context.Context, input *model.FindAllTransactionCardNumberRequest) (*model.APIResponsePaginationTransaction, error)
	FindTransactionByID(ctx context.Context, input *model.FindByIDTransactionRequest) (*model.APIResponseTransaction, error)
	FindTransactionByMerchantID(ctx context.Context, input *model.FindTransactionByMerchantIDRequest) (*model.APIResponseTransactions, error)
	FindActiveTransactions(ctx context.Context, input *model.FindAllTransactionRequest) (*model.APIResponsePaginationTransactionDeleteAt, error)
	FindTrashedTransactions(ctx context.Context, input *model.FindAllTransactionRequest) (*model.APIResponsePaginationTransactionDeleteAt, error)
	FindMonthlyTransactionStatusSuccess(ctx context.Context, input model.FindMonthlyTransactionStatus) (*model.APIResponseTransactionMonthStatusSuccess, error)
	FindYearlyTransactionStatusSuccess(ctx context.Context, input model.FindYearTransactionStatus) (*model.APIResponseTransactionYearStatusSuccess, error)
	FindMonthlyTransactionStatusFailed(ctx context.Context, input model.FindMonthlyTransactionStatus) (*model.APIResponseTransactionMonthStatusFailed, error)
	FindYearlyTransactionStatusFailed(ctx context.Context, input model.FindYearTransactionStatus) (*model.APIResponseTransactionYearStatusFailed, error)
	FindMonthlyTransactionStatusSuccessByCardNumber(ctx context.Context, input model.FindMonthlyTransactionStatusCardNumber) (*model.APIResponseTransactionMonthStatusSuccess, error)
	FindYearlyTransactionStatusSuccessByCardNumber(ctx context.Context, input model.FindYearTransactionStatusCardNumber) (*model.APIResponseTransactionYearStatusSuccess, error)
	FindMonthlyTransactionStatusFailedByCardNumber(ctx context.Context, input model.FindMonthlyTransactionStatusCardNumber) (*model.APIResponseTransactionMonthStatusFailed, error)
	FindYearlyTransactionStatusFailedByCardNumber(ctx context.Context, input model.FindYearTransactionStatusCardNumber) (*model.APIResponseTransactionYearStatusFailed, error)
	FindMonthlyPaymentMethods(ctx context.Context, input model.FindYearTransactionStatus) (*model.APIResponseTransactionMonthMethod, error)
	FindYearlyPaymentMethods(ctx context.Context, input model.FindYearTransactionStatus) (*model.APIResponseTransactionYearMethod, error)
	FindMonthlyAmounts(ctx context.Context, input model.FindYearTransactionStatus) (*model.APIResponseTransactionMonthAmount, error)
	FindYearlyAmounts(ctx context.Context, input model.FindYearTransactionStatus) (*model.APIResponseTransactionYearAmount, error)
	FindMonthlyPaymentMethodsByCardNumber(ctx context.Context, input model.FindByYearCardNumberTransactionRequest) (*model.APIResponseTransactionMonthMethod, error)
	FindYearlyPaymentMethodsByCardNumber(ctx context.Context, input model.FindByYearCardNumberTransactionRequest) (*model.APIResponseTransactionYearMethod, error)
	FindMonthlyAmountsByCardNumber(ctx context.Context, input model.FindByYearCardNumberTransactionRequest) (*model.APIResponseTransactionMonthAmount, error)
	FindYearlyAmountsByCardNumber(ctx context.Context, input model.FindByYearCardNumberTransactionRequest) (*model.APIResponseTransactionYearAmount, error)
	FindAllTransfers(ctx context.Context, input *model.FindAllTransferRequest) (*model.APIResponsePaginationTransfer, error)
	FindTransferByID(ctx context.Context, input *model.FindByIDTransferRequest) (*model.APIResponseTransfer, error)
	FindTransfersBySender(ctx context.Context, input *model.FindTransferByTransferFromRequest) (*model.APIResponseTransfers, error)
	FindTransfersByReceiver(ctx context.Context, input *model.FindTransferByTransferToRequest) (*model.APIResponseTransfers, error)
	FindActiveTransfers(ctx context.Context, input *model.FindAllTransferRequest) (*model.APIResponsePaginationTransferDeleteAt, error)
	FindTrashedTransfers(ctx context.Context, input *model.FindAllTransferRequest) (*model.APIResponsePaginationTransferDeleteAt, error)
	FindMonthlyTransferStatusSuccess(ctx context.Context, input model.FindMonthlyTransferStatus) (*model.APIResponseTransferMonthStatusSuccess, error)
	FindYearlyTransferStatusSuccess(ctx context.Context, input model.FindYearTransferStatus) (*model.APIResponseTransferYearStatusSuccess, error)
	FindMonthlyTransferStatusFailed(ctx context.Context, input model.FindMonthlyTransferStatus) (*model.APIResponseTransferMonthStatusFailed, error)
	FindYearlyTransferStatusFailed(ctx context.Context, input model.FindYearTransferStatus) (*model.APIResponseTransferYearStatusFailed, error)
	FindMonthlyTransferStatusSuccessByCardNumber(ctx context.Context, input model.FindMonthlyTransferStatusCardNumber) (*model.APIResponseTransferMonthStatusSuccess, error)
	FindYearlyTransferStatusSuccessByCardNumber(ctx context.Context, input model.FindYearTransferStatusCardNumber) (*model.APIResponseTransferYearStatusSuccess, error)
	FindMonthlyTransferStatusFailedByCardNumber(ctx context.Context, input model.FindMonthlyTransferStatusCardNumber) (*model.APIResponseTransferMonthStatusFailed, error)
	FindYearlyTransferStatusFailedByCardNumber(ctx context.Context, input model.FindYearTransferStatusCardNumber) (*model.APIResponseTransferYearStatusFailed, error)
	FindMonthlyTransferAmounts(ctx context.Context, input model.FindYearTransferStatus) (*model.APIResponseTransferMonthAmount, error)
	FindYearlyTransferAmounts(ctx context.Context, input model.FindYearTransferStatus) (*model.APIResponseTransferYearAmount, error)
	FindMonthlyTransferAmountsBySenderCardNumber(ctx context.Context, input model.FindByCardNumberTransferRequest) (*model.APIResponseTransferMonthAmount, error)
	FindMonthlyTransferAmountsByReceiverCardNumber(ctx context.Context, input model.FindByCardNumberTransferRequest) (*model.APIResponseTransferMonthAmount, error)
	FindYearlyTransferAmountsBySenderCardNumber(ctx context.Context, input model.FindByCardNumberTransferRequest) (*model.APIResponseTransferYearAmount, error)
	FindYearlyTransferAmountsByReceiverCardNumber(ctx context.Context, input model.FindByCardNumberTransferRequest) (*model.APIResponseTransferYearAmount, error)
	FindAllUsers(ctx context.Context, input *model.FindAllUserInput) (*model.APIResponsePaginationUser, error)
	FindByIDUser(ctx context.Context, input model.FindByIDUserInput) (*model.APIResponseUserResponse, error)
	FindByActiveUsers(ctx context.Context, input *model.FindAllUserInput) (*model.APIResponsePaginationUserDeleteAt, error)
	FindByTrashedUsers(ctx context.Context, input *model.FindAllUserInput) (*model.APIResponsePaginationUserDeleteAt, error)
	FindAllWithdraw(ctx context.Context, input model.FindAllWithdrawInput) (*model.APIResponsePaginationWithdraw, error)
	FindAllWithdrawByCardNumber(ctx context.Context, input model.FindAllWithdrawByCardNumberInput) (*model.APIResponsePaginationWithdraw, error)
	FindByIDWithdraw(ctx context.Context, input model.FindByIDWithdrawInput) (*model.APIResponseWithdraw, error)
	FindMonthlyWithdrawStatusSuccess(ctx context.Context, input model.FindMonthlyWithdrawStatusInput) (*model.APIResponseWithdrawMonthStatusSuccess, error)
	FindYearlyWithdrawStatusSuccess(ctx context.Context, input model.FindYearWithdrawStatusInput) (*model.APIResponseWithdrawYearStatusSuccess, error)
	FindMonthlyWithdrawStatusFailed(ctx context.Context, input model.FindMonthlyWithdrawStatusInput) (*model.APIResponseWithdrawMonthStatusFailed, error)
	FindYearlyWithdrawStatusFailed(ctx context.Context, input model.FindYearWithdrawStatusInput) (*model.APIResponseWithdrawYearStatusFailed, error)
	FindMonthlyWithdrawStatusSuccessCardNumber(ctx context.Context, input model.FindMonthlyWithdrawStatusCardNumberInput) (*model.APIResponseWithdrawMonthStatusSuccess, error)
	FindYearlyWithdrawStatusSuccessCardNumber(ctx context.Context, input model.FindYearWithdrawStatusCardNumberInput) (*model.APIResponseWithdrawYearStatusSuccess, error)
	FindMonthlyWithdrawStatusFailedCardNumber(ctx context.Context, input model.FindMonthlyWithdrawStatusCardNumberInput) (*model.APIResponseWithdrawMonthStatusFailed, error)
	FindYearlyWithdrawStatusFailedCardNumber(ctx context.Context, input model.FindYearWithdrawStatusCardNumberInput) (*model.APIResponseWithdrawYearStatusFailed, error)
	FindMonthlyWithdraws(ctx context.Context, input model.FindYearWithdrawStatusInput) (*model.APIResponseWithdrawMonthAmount, error)
	FindYearlyWithdraws(ctx context.Context, input model.FindYearWithdrawStatusInput) (*model.APIResponseWithdrawYearAmount, error)
	FindMonthlyWithdrawsByCardNumber(ctx context.Context, input model.FindYearWithdrawCardNumberInput) (*model.APIResponseWithdrawMonthAmount, error)
	FindYearlyWithdrawsByCardNumber(ctx context.Context, input model.FindYearWithdrawCardNumberInput) (*model.APIResponseWithdrawYearAmount, error)
	FindByActiveWithdraw(ctx context.Context, input model.FindAllWithdrawInput) (*model.APIResponsePaginationWithdrawDeleteAt, error)
	FindByTrashedWithdraw(ctx context.Context, input model.FindAllWithdrawInput) (*model.APIResponsePaginationWithdrawDeleteAt, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "ApiResponseCard.data":
		if e.complexity.ApiResponseCard.Data == nil {
			break
		}

		return e.complexity.ApiResponseCard.Data(childComplexity), true
	case "ApiResponseCard.message":
		if e.complexity.ApiResponseCard.Message == nil {
			break
		}

		return e.complexity.ApiResponseCard.Message(childComplexity), true
	case "ApiResponseCard.status":
		if e.complexity.ApiResponseCard.Status == nil {
			break
		}

		return e.complexity.ApiResponseCard.Status(childComplexity), true

	case "ApiResponseCardAll.message":
		if e.complexity.ApiResponseCardAll.Message == nil {
			break
		}

		return e.complexity.ApiResponseCardAll.Message(childComplexity), true
	case "ApiResponseCardAll.status":
		if e.complexity.ApiResponseCardAll.Status == nil {
			break
		}

		return e.complexity.ApiResponseCardAll.Status(childComplexity), true

	case "ApiResponseCardDelete.message":
		if e.complexity.ApiResponseCardDelete.Message == nil {
			break
		}

		return e.complexity.ApiResponseCardDelete.Message(childComplexity), true
	case "ApiResponseCardDelete.status":
		if e.complexity.ApiResponseCardDelete.Status == nil {
			break
		}

		return e.complexity.ApiResponseCardDelete.Status(childComplexity), true

	case "ApiResponseCardDeleteAt.data":
		if e.complexity.ApiResponseCardDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponseCardDeleteAt.Data(childComplexity), true
	case "ApiResponseCardDeleteAt.message":
		if e.complexity.ApiResponseCardDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponseCardDeleteAt.Message(childComplexity), true
	case "ApiResponseCardDeleteAt.status":
		if e.complexity.ApiResponseCardDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponseCardDeleteAt.Status(childComplexity), true

	case "ApiResponseDashboardCard.data":
		if e.complexity.ApiResponseDashboardCard.Data == nil {
			break
		}

		return e.complexity.ApiResponseDashboardCard.Data(childComplexity), true
	case "ApiResponseDashboardCard.message":
		if e.complexity.ApiResponseDashboardCard.Message == nil {
			break
		}

		return e.complexity.ApiResponseDashboardCard.Message(childComplexity), true
	case "ApiResponseDashboardCard.status":
		if e.complexity.ApiResponseDashboardCard.Status == nil {
			break
		}

		return e.complexity.ApiResponseDashboardCard.Status(childComplexity), true

	case "ApiResponseDashboardCardNumber.data":
		if e.complexity.ApiResponseDashboardCardNumber.Data == nil {
			break
		}

		return e.complexity.ApiResponseDashboardCardNumber.Data(childComplexity), true
	case "ApiResponseDashboardCardNumber.message":
		if e.complexity.ApiResponseDashboardCardNumber.Message == nil {
			break
		}

		return e.complexity.ApiResponseDashboardCardNumber.Message(childComplexity), true
	case "ApiResponseDashboardCardNumber.status":
		if e.complexity.ApiResponseDashboardCardNumber.Status == nil {
			break
		}

		return e.complexity.ApiResponseDashboardCardNumber.Status(childComplexity), true

	case "ApiResponseGetMe.data":
		if e.complexity.ApiResponseGetMe.Data == nil {
			break
		}

		return e.complexity.ApiResponseGetMe.Data(childComplexity), true
	case "ApiResponseGetMe.message":
		if e.complexity.ApiResponseGetMe.Message == nil {
			break
		}

		return e.complexity.ApiResponseGetMe.Message(childComplexity), true
	case "ApiResponseGetMe.status":
		if e.complexity.ApiResponseGetMe.Status == nil {
			break
		}

		return e.complexity.ApiResponseGetMe.Status(childComplexity), true

	case "ApiResponseLogin.data":
		if e.complexity.ApiResponseLogin.Data == nil {
			break
		}

		return e.complexity.ApiResponseLogin.Data(childComplexity), true
	case "ApiResponseLogin.message":
		if e.complexity.ApiResponseLogin.Message == nil {
			break
		}

		return e.complexity.ApiResponseLogin.Message(childComplexity), true
	case "ApiResponseLogin.status":
		if e.complexity.ApiResponseLogin.Status == nil {
			break
		}

		return e.complexity.ApiResponseLogin.Status(childComplexity), true

	case "ApiResponseMerchant.data":
		if e.complexity.ApiResponseMerchant.Data == nil {
			break
		}

		return e.complexity.ApiResponseMerchant.Data(childComplexity), true
	case "ApiResponseMerchant.message":
		if e.complexity.ApiResponseMerchant.Message == nil {
			break
		}

		return e.complexity.ApiResponseMerchant.Message(childComplexity), true
	case "ApiResponseMerchant.status":
		if e.complexity.ApiResponseMerchant.Status == nil {
			break
		}

		return e.complexity.ApiResponseMerchant.Status(childComplexity), true

	case "ApiResponseMerchantAll.message":
		if e.complexity.ApiResponseMerchantAll.Message == nil {
			break
		}

		return e.complexity.ApiResponseMerchantAll.Message(childComplexity), true
	case "ApiResponseMerchantAll.status":
		if e.complexity.ApiResponseMerchantAll.Status == nil {
			break
		}

		return e.complexity.ApiResponseMerchantAll.Status(childComplexity), true

	case "ApiResponseMerchantDelete.message":
		if e.complexity.ApiResponseMerchantDelete.Message == nil {
			break
		}

		return e.complexity.ApiResponseMerchantDelete.Message(childComplexity), true
	case "ApiResponseMerchantDelete.status":
		if e.complexity.ApiResponseMerchantDelete.Status == nil {
			break
		}

		return e.complexity.ApiResponseMerchantDelete.Status(childComplexity), true

	case "ApiResponseMerchantDeleteAt.data":
		if e.complexity.ApiResponseMerchantDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponseMerchantDeleteAt.Data(childComplexity), true
	case "ApiResponseMerchantDeleteAt.message":
		if e.complexity.ApiResponseMerchantDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponseMerchantDeleteAt.Message(childComplexity), true
	case "ApiResponseMerchantDeleteAt.status":
		if e.complexity.ApiResponseMerchantDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponseMerchantDeleteAt.Status(childComplexity), true

	case "ApiResponseMerchantDeleteAtPagination.data":
		if e.complexity.ApiResponseMerchantDeleteAtPagination.Data == nil {
			break
		}

		return e.complexity.ApiResponseMerchantDeleteAtPagination.Data(childComplexity), true
	case "ApiResponseMerchantDeleteAtPagination.message":
		if e.complexity.ApiResponseMerchantDeleteAtPagination.Message == nil {
			break
		}

		return e.complexity.ApiResponseMerchantDeleteAtPagination.Message(childComplexity), true
	case "ApiResponseMerchantDeleteAtPagination.pagination":
		if e.complexity.ApiResponseMerchantDeleteAtPagination.Pagination == nil {
			break
		}

		return e.complexity.ApiResponseMerchantDeleteAtPagination.Pagination(childComplexity), true
	case "ApiResponseMerchantDeleteAtPagination.status":
		if e.complexity.ApiResponseMerchantDeleteAtPagination.Status == nil {
			break
		}

		return e.complexity.ApiResponseMerchantDeleteAtPagination.Status(childComplexity), true

	case "ApiResponseMerchantMonthlyAmount.data":
		if e.complexity.ApiResponseMerchantMonthlyAmount.Data == nil {
			break
		}

		return e.complexity.ApiResponseMerchantMonthlyAmount.Data(childComplexity), true
	case "ApiResponseMerchantMonthlyAmount.message":
		if e.complexity.ApiResponseMerchantMonthlyAmount.Message == nil {
			break
		}

		return e.complexity.ApiResponseMerchantMonthlyAmount.Message(childComplexity), true
	case "ApiResponseMerchantMonthlyAmount.status":
		if e.complexity.ApiResponseMerchantMonthlyAmount.Status == nil {
			break
		}

		return e.complexity.ApiResponseMerchantMonthlyAmount.Status(childComplexity), true

	case "ApiResponseMerchantMonthlyPaymentMethod.data":
		if e.complexity.ApiResponseMerchantMonthlyPaymentMethod.Data == nil {
			break
		}

		return e.complexity.ApiResponseMerchantMonthlyPaymentMethod.Data(childComplexity), true
	case "ApiResponseMerchantMonthlyPaymentMethod.message":
		if e.complexity.ApiResponseMerchantMonthlyPaymentMethod.Message == nil {
			break
		}

		return e.complexity.ApiResponseMerchantMonthlyPaymentMethod.Message(childComplexity), true
	case "ApiResponseMerchantMonthlyPaymentMethod.status":
		if e.complexity.ApiResponseMerchantMonthlyPaymentMethod.Status == nil {
			break
		}

		return e.complexity.ApiResponseMerchantMonthlyPaymentMethod.Status(childComplexity), true

	case "ApiResponseMerchantMonthlyTotalAmount.data":
		if e.complexity.ApiResponseMerchantMonthlyTotalAmount.Data == nil {
			break
		}

		return e.complexity.ApiResponseMerchantMonthlyTotalAmount.Data(childComplexity), true
	case "ApiResponseMerchantMonthlyTotalAmount.message":
		if e.complexity.ApiResponseMerchantMonthlyTotalAmount.Message == nil {
			break
		}

		return e.complexity.ApiResponseMerchantMonthlyTotalAmount.Message(childComplexity), true
	case "ApiResponseMerchantMonthlyTotalAmount.status":
		if e.complexity.ApiResponseMerchantMonthlyTotalAmount.Status == nil {
			break
		}

		return e.complexity.ApiResponseMerchantMonthlyTotalAmount.Status(childComplexity), true

	case "ApiResponseMerchantPagination.data":
		if e.complexity.ApiResponseMerchantPagination.Data == nil {
			break
		}

		return e.complexity.ApiResponseMerchantPagination.Data(childComplexity), true
	case "ApiResponseMerchantPagination.message":
		if e.complexity.ApiResponseMerchantPagination.Message == nil {
			break
		}

		return e.complexity.ApiResponseMerchantPagination.Message(childComplexity), true
	case "ApiResponseMerchantPagination.pagination":
		if e.complexity.ApiResponseMerchantPagination.Pagination == nil {
			break
		}

		return e.complexity.ApiResponseMerchantPagination.Pagination(childComplexity), true
	case "ApiResponseMerchantPagination.status":
		if e.complexity.ApiResponseMerchantPagination.Status == nil {
			break
		}

		return e.complexity.ApiResponseMerchantPagination.Status(childComplexity), true

	case "ApiResponseMerchantTransactionPagination.data":
		if e.complexity.ApiResponseMerchantTransactionPagination.Data == nil {
			break
		}

		return e.complexity.ApiResponseMerchantTransactionPagination.Data(childComplexity), true
	case "ApiResponseMerchantTransactionPagination.message":
		if e.complexity.ApiResponseMerchantTransactionPagination.Message == nil {
			break
		}

		return e.complexity.ApiResponseMerchantTransactionPagination.Message(childComplexity), true
	case "ApiResponseMerchantTransactionPagination.pagination":
		if e.complexity.ApiResponseMerchantTransactionPagination.Pagination == nil {
			break
		}

		return e.complexity.ApiResponseMerchantTransactionPagination.Pagination(childComplexity), true
	case "ApiResponseMerchantTransactionPagination.status":
		if e.complexity.ApiResponseMerchantTransactionPagination.Status == nil {
			break
		}

		return e.complexity.ApiResponseMerchantTransactionPagination.Status(childComplexity), true

	case "ApiResponseMerchantYearlyAmount.data":
		if e.complexity.ApiResponseMerchantYearlyAmount.Data == nil {
			break
		}

		return e.complexity.ApiResponseMerchantYearlyAmount.Data(childComplexity), true
	case "ApiResponseMerchantYearlyAmount.message":
		if e.complexity.ApiResponseMerchantYearlyAmount.Message == nil {
			break
		}

		return e.complexity.ApiResponseMerchantYearlyAmount.Message(childComplexity), true
	case "ApiResponseMerchantYearlyAmount.status":
		if e.complexity.ApiResponseMerchantYearlyAmount.Status == nil {
			break
		}

		return e.complexity.ApiResponseMerchantYearlyAmount.Status(childComplexity), true

	case "ApiResponseMerchantYearlyPaymentMethod.data":
		if e.complexity.ApiResponseMerchantYearlyPaymentMethod.Data == nil {
			break
		}

		return e.complexity.ApiResponseMerchantYearlyPaymentMethod.Data(childComplexity), true
	case "ApiResponseMerchantYearlyPaymentMethod.message":
		if e.complexity.ApiResponseMerchantYearlyPaymentMethod.Message == nil {
			break
		}

		return e.complexity.ApiResponseMerchantYearlyPaymentMethod.Message(childComplexity), true
	case "ApiResponseMerchantYearlyPaymentMethod.status":
		if e.complexity.ApiResponseMerchantYearlyPaymentMethod.Status == nil {
			break
		}

		return e.complexity.ApiResponseMerchantYearlyPaymentMethod.Status(childComplexity), true

	case "ApiResponseMerchantYearlyTotalAmount.data":
		if e.complexity.ApiResponseMerchantYearlyTotalAmount.Data == nil {
			break
		}

		return e.complexity.ApiResponseMerchantYearlyTotalAmount.Data(childComplexity), true
	case "ApiResponseMerchantYearlyTotalAmount.message":
		if e.complexity.ApiResponseMerchantYearlyTotalAmount.Message == nil {
			break
		}

		return e.complexity.ApiResponseMerchantYearlyTotalAmount.Message(childComplexity), true
	case "ApiResponseMerchantYearlyTotalAmount.status":
		if e.complexity.ApiResponseMerchantYearlyTotalAmount.Status == nil {
			break
		}

		return e.complexity.ApiResponseMerchantYearlyTotalAmount.Status(childComplexity), true

	case "ApiResponseMonthSaldoBalances.data":
		if e.complexity.ApiResponseMonthSaldoBalances.Data == nil {
			break
		}

		return e.complexity.ApiResponseMonthSaldoBalances.Data(childComplexity), true
	case "ApiResponseMonthSaldoBalances.message":
		if e.complexity.ApiResponseMonthSaldoBalances.Message == nil {
			break
		}

		return e.complexity.ApiResponseMonthSaldoBalances.Message(childComplexity), true
	case "ApiResponseMonthSaldoBalances.status":
		if e.complexity.ApiResponseMonthSaldoBalances.Status == nil {
			break
		}

		return e.complexity.ApiResponseMonthSaldoBalances.Status(childComplexity), true

	case "ApiResponseMonthTotalSaldo.data":
		if e.complexity.ApiResponseMonthTotalSaldo.Data == nil {
			break
		}

		return e.complexity.ApiResponseMonthTotalSaldo.Data(childComplexity), true
	case "ApiResponseMonthTotalSaldo.message":
		if e.complexity.ApiResponseMonthTotalSaldo.Message == nil {
			break
		}

		return e.complexity.ApiResponseMonthTotalSaldo.Message(childComplexity), true
	case "ApiResponseMonthTotalSaldo.status":
		if e.complexity.ApiResponseMonthTotalSaldo.Status == nil {
			break
		}

		return e.complexity.ApiResponseMonthTotalSaldo.Status(childComplexity), true

	case "ApiResponseMonthlyAmount.data":
		if e.complexity.ApiResponseMonthlyAmount.Data == nil {
			break
		}

		return e.complexity.ApiResponseMonthlyAmount.Data(childComplexity), true
	case "ApiResponseMonthlyAmount.message":
		if e.complexity.ApiResponseMonthlyAmount.Message == nil {
			break
		}

		return e.complexity.ApiResponseMonthlyAmount.Message(childComplexity), true
	case "ApiResponseMonthlyAmount.status":
		if e.complexity.ApiResponseMonthlyAmount.Status == nil {
			break
		}

		return e.complexity.ApiResponseMonthlyAmount.Status(childComplexity), true

	case "ApiResponseMonthlyBalance.data":
		if e.complexity.ApiResponseMonthlyBalance.Data == nil {
			break
		}

		return e.complexity.ApiResponseMonthlyBalance.Data(childComplexity), true
	case "ApiResponseMonthlyBalance.message":
		if e.complexity.ApiResponseMonthlyBalance.Message == nil {
			break
		}

		return e.complexity.ApiResponseMonthlyBalance.Message(childComplexity), true
	case "ApiResponseMonthlyBalance.status":
		if e.complexity.ApiResponseMonthlyBalance.Status == nil {
			break
		}

		return e.complexity.ApiResponseMonthlyBalance.Status(childComplexity), true

	case "ApiResponsePaginationCard.data":
		if e.complexity.ApiResponsePaginationCard.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationCard.Data(childComplexity), true
	case "ApiResponsePaginationCard.message":
		if e.complexity.ApiResponsePaginationCard.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationCard.Message(childComplexity), true
	case "ApiResponsePaginationCard.pagination":
		if e.complexity.ApiResponsePaginationCard.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationCard.Pagination(childComplexity), true
	case "ApiResponsePaginationCard.status":
		if e.complexity.ApiResponsePaginationCard.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationCard.Status(childComplexity), true

	case "ApiResponsePaginationCardDeleteAt.data":
		if e.complexity.ApiResponsePaginationCardDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationCardDeleteAt.Data(childComplexity), true
	case "ApiResponsePaginationCardDeleteAt.message":
		if e.complexity.ApiResponsePaginationCardDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationCardDeleteAt.Message(childComplexity), true
	case "ApiResponsePaginationCardDeleteAt.pagination":
		if e.complexity.ApiResponsePaginationCardDeleteAt.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationCardDeleteAt.Pagination(childComplexity), true
	case "ApiResponsePaginationCardDeleteAt.status":
		if e.complexity.ApiResponsePaginationCardDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationCardDeleteAt.Status(childComplexity), true

	case "ApiResponsePaginationRole.data":
		if e.complexity.ApiResponsePaginationRole.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationRole.Data(childComplexity), true
	case "ApiResponsePaginationRole.message":
		if e.complexity.ApiResponsePaginationRole.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationRole.Message(childComplexity), true
	case "ApiResponsePaginationRole.pagination":
		if e.complexity.ApiResponsePaginationRole.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationRole.Pagination(childComplexity), true
	case "ApiResponsePaginationRole.status":
		if e.complexity.ApiResponsePaginationRole.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationRole.Status(childComplexity), true

	case "ApiResponsePaginationRoleDeleteAt.data":
		if e.complexity.ApiResponsePaginationRoleDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationRoleDeleteAt.Data(childComplexity), true
	case "ApiResponsePaginationRoleDeleteAt.message":
		if e.complexity.ApiResponsePaginationRoleDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationRoleDeleteAt.Message(childComplexity), true
	case "ApiResponsePaginationRoleDeleteAt.pagination":
		if e.complexity.ApiResponsePaginationRoleDeleteAt.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationRoleDeleteAt.Pagination(childComplexity), true
	case "ApiResponsePaginationRoleDeleteAt.status":
		if e.complexity.ApiResponsePaginationRoleDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationRoleDeleteAt.Status(childComplexity), true

	case "ApiResponsePaginationSaldo.data":
		if e.complexity.ApiResponsePaginationSaldo.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationSaldo.Data(childComplexity), true
	case "ApiResponsePaginationSaldo.message":
		if e.complexity.ApiResponsePaginationSaldo.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationSaldo.Message(childComplexity), true
	case "ApiResponsePaginationSaldo.pagination":
		if e.complexity.ApiResponsePaginationSaldo.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationSaldo.Pagination(childComplexity), true
	case "ApiResponsePaginationSaldo.status":
		if e.complexity.ApiResponsePaginationSaldo.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationSaldo.Status(childComplexity), true

	case "ApiResponsePaginationSaldoDeleteAt.data":
		if e.complexity.ApiResponsePaginationSaldoDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationSaldoDeleteAt.Data(childComplexity), true
	case "ApiResponsePaginationSaldoDeleteAt.message":
		if e.complexity.ApiResponsePaginationSaldoDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationSaldoDeleteAt.Message(childComplexity), true
	case "ApiResponsePaginationSaldoDeleteAt.pagination":
		if e.complexity.ApiResponsePaginationSaldoDeleteAt.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationSaldoDeleteAt.Pagination(childComplexity), true
	case "ApiResponsePaginationSaldoDeleteAt.status":
		if e.complexity.ApiResponsePaginationSaldoDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationSaldoDeleteAt.Status(childComplexity), true

	case "ApiResponsePaginationTopup.data":
		if e.complexity.ApiResponsePaginationTopup.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTopup.Data(childComplexity), true
	case "ApiResponsePaginationTopup.message":
		if e.complexity.ApiResponsePaginationTopup.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTopup.Message(childComplexity), true
	case "ApiResponsePaginationTopup.pagination":
		if e.complexity.ApiResponsePaginationTopup.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTopup.Pagination(childComplexity), true
	case "ApiResponsePaginationTopup.status":
		if e.complexity.ApiResponsePaginationTopup.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTopup.Status(childComplexity), true

	case "ApiResponsePaginationTopupDeleteAt.data":
		if e.complexity.ApiResponsePaginationTopupDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTopupDeleteAt.Data(childComplexity), true
	case "ApiResponsePaginationTopupDeleteAt.message":
		if e.complexity.ApiResponsePaginationTopupDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTopupDeleteAt.Message(childComplexity), true
	case "ApiResponsePaginationTopupDeleteAt.pagination":
		if e.complexity.ApiResponsePaginationTopupDeleteAt.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTopupDeleteAt.Pagination(childComplexity), true
	case "ApiResponsePaginationTopupDeleteAt.status":
		if e.complexity.ApiResponsePaginationTopupDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTopupDeleteAt.Status(childComplexity), true

	case "ApiResponsePaginationTransaction.data":
		if e.complexity.ApiResponsePaginationTransaction.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransaction.Data(childComplexity), true
	case "ApiResponsePaginationTransaction.message":
		if e.complexity.ApiResponsePaginationTransaction.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransaction.Message(childComplexity), true
	case "ApiResponsePaginationTransaction.pagination":
		if e.complexity.ApiResponsePaginationTransaction.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransaction.Pagination(childComplexity), true
	case "ApiResponsePaginationTransaction.status":
		if e.complexity.ApiResponsePaginationTransaction.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransaction.Status(childComplexity), true

	case "ApiResponsePaginationTransactionDeleteAt.data":
		if e.complexity.ApiResponsePaginationTransactionDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransactionDeleteAt.Data(childComplexity), true
	case "ApiResponsePaginationTransactionDeleteAt.message":
		if e.complexity.ApiResponsePaginationTransactionDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransactionDeleteAt.Message(childComplexity), true
	case "ApiResponsePaginationTransactionDeleteAt.pagination":
		if e.complexity.ApiResponsePaginationTransactionDeleteAt.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransactionDeleteAt.Pagination(childComplexity), true
	case "ApiResponsePaginationTransactionDeleteAt.status":
		if e.complexity.ApiResponsePaginationTransactionDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransactionDeleteAt.Status(childComplexity), true

	case "ApiResponsePaginationTransfer.data":
		if e.complexity.ApiResponsePaginationTransfer.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransfer.Data(childComplexity), true
	case "ApiResponsePaginationTransfer.message":
		if e.complexity.ApiResponsePaginationTransfer.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransfer.Message(childComplexity), true
	case "ApiResponsePaginationTransfer.pagination":
		if e.complexity.ApiResponsePaginationTransfer.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransfer.Pagination(childComplexity), true
	case "ApiResponsePaginationTransfer.status":
		if e.complexity.ApiResponsePaginationTransfer.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransfer.Status(childComplexity), true

	case "ApiResponsePaginationTransferDeleteAt.data":
		if e.complexity.ApiResponsePaginationTransferDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransferDeleteAt.Data(childComplexity), true
	case "ApiResponsePaginationTransferDeleteAt.message":
		if e.complexity.ApiResponsePaginationTransferDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransferDeleteAt.Message(childComplexity), true
	case "ApiResponsePaginationTransferDeleteAt.pagination":
		if e.complexity.ApiResponsePaginationTransferDeleteAt.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransferDeleteAt.Pagination(childComplexity), true
	case "ApiResponsePaginationTransferDeleteAt.status":
		if e.complexity.ApiResponsePaginationTransferDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationTransferDeleteAt.Status(childComplexity), true

	case "ApiResponsePaginationUser.data":
		if e.complexity.ApiResponsePaginationUser.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationUser.Data(childComplexity), true
	case "ApiResponsePaginationUser.message":
		if e.complexity.ApiResponsePaginationUser.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationUser.Message(childComplexity), true
	case "ApiResponsePaginationUser.pagination":
		if e.complexity.ApiResponsePaginationUser.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationUser.Pagination(childComplexity), true
	case "ApiResponsePaginationUser.status":
		if e.complexity.ApiResponsePaginationUser.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationUser.Status(childComplexity), true

	case "ApiResponsePaginationUserDeleteAt.data":
		if e.complexity.ApiResponsePaginationUserDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationUserDeleteAt.Data(childComplexity), true
	case "ApiResponsePaginationUserDeleteAt.message":
		if e.complexity.ApiResponsePaginationUserDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationUserDeleteAt.Message(childComplexity), true
	case "ApiResponsePaginationUserDeleteAt.pagination":
		if e.complexity.ApiResponsePaginationUserDeleteAt.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationUserDeleteAt.Pagination(childComplexity), true
	case "ApiResponsePaginationUserDeleteAt.status":
		if e.complexity.ApiResponsePaginationUserDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationUserDeleteAt.Status(childComplexity), true

	case "ApiResponsePaginationWithdraw.data":
		if e.complexity.ApiResponsePaginationWithdraw.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationWithdraw.Data(childComplexity), true
	case "ApiResponsePaginationWithdraw.message":
		if e.complexity.ApiResponsePaginationWithdraw.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationWithdraw.Message(childComplexity), true
	case "ApiResponsePaginationWithdraw.pagination":
		if e.complexity.ApiResponsePaginationWithdraw.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationWithdraw.Pagination(childComplexity), true
	case "ApiResponsePaginationWithdraw.status":
		if e.complexity.ApiResponsePaginationWithdraw.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationWithdraw.Status(childComplexity), true

	case "ApiResponsePaginationWithdrawDeleteAt.data":
		if e.complexity.ApiResponsePaginationWithdrawDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponsePaginationWithdrawDeleteAt.Data(childComplexity), true
	case "ApiResponsePaginationWithdrawDeleteAt.message":
		if e.complexity.ApiResponsePaginationWithdrawDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponsePaginationWithdrawDeleteAt.Message(childComplexity), true
	case "ApiResponsePaginationWithdrawDeleteAt.pagination":
		if e.complexity.ApiResponsePaginationWithdrawDeleteAt.Pagination == nil {
			break
		}

		return e.complexity.ApiResponsePaginationWithdrawDeleteAt.Pagination(childComplexity), true
	case "ApiResponsePaginationWithdrawDeleteAt.status":
		if e.complexity.ApiResponsePaginationWithdrawDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponsePaginationWithdrawDeleteAt.Status(childComplexity), true

	case "ApiResponseRefreshToken.data":
		if e.complexity.ApiResponseRefreshToken.Data == nil {
			break
		}

		return e.complexity.ApiResponseRefreshToken.Data(childComplexity), true
	case "ApiResponseRefreshToken.message":
		if e.complexity.ApiResponseRefreshToken.Message == nil {
			break
		}

		return e.complexity.ApiResponseRefreshToken.Message(childComplexity), true
	case "ApiResponseRefreshToken.status":
		if e.complexity.ApiResponseRefreshToken.Status == nil {
			break
		}

		return e.complexity.ApiResponseRefreshToken.Status(childComplexity), true

	case "ApiResponseRegister.data":
		if e.complexity.ApiResponseRegister.Data == nil {
			break
		}

		return e.complexity.ApiResponseRegister.Data(childComplexity), true
	case "ApiResponseRegister.message":
		if e.complexity.ApiResponseRegister.Message == nil {
			break
		}

		return e.complexity.ApiResponseRegister.Message(childComplexity), true
	case "ApiResponseRegister.status":
		if e.complexity.ApiResponseRegister.Status == nil {
			break
		}

		return e.complexity.ApiResponseRegister.Status(childComplexity), true

	case "ApiResponseRole.data":
		if e.complexity.ApiResponseRole.Data == nil {
			break
		}

		return e.complexity.ApiResponseRole.Data(childComplexity), true
	case "ApiResponseRole.message":
		if e.complexity.ApiResponseRole.Message == nil {
			break
		}

		return e.complexity.ApiResponseRole.Message(childComplexity), true
	case "ApiResponseRole.status":
		if e.complexity.ApiResponseRole.Status == nil {
			break
		}

		return e.complexity.ApiResponseRole.Status(childComplexity), true

	case "ApiResponseRoleAll.message":
		if e.complexity.ApiResponseRoleAll.Message == nil {
			break
		}

		return e.complexity.ApiResponseRoleAll.Message(childComplexity), true
	case "ApiResponseRoleAll.status":
		if e.complexity.ApiResponseRoleAll.Status == nil {
			break
		}

		return e.complexity.ApiResponseRoleAll.Status(childComplexity), true

	case "ApiResponseRoleDelete.message":
		if e.complexity.ApiResponseRoleDelete.Message == nil {
			break
		}

		return e.complexity.ApiResponseRoleDelete.Message(childComplexity), true
	case "ApiResponseRoleDelete.status":
		if e.complexity.ApiResponseRoleDelete.Status == nil {
			break
		}

		return e.complexity.ApiResponseRoleDelete.Status(childComplexity), true

	case "ApiResponseRoleDeleteAt.data":
		if e.complexity.ApiResponseRoleDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponseRoleDeleteAt.Data(childComplexity), true
	case "ApiResponseRoleDeleteAt.message":
		if e.complexity.ApiResponseRoleDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponseRoleDeleteAt.Message(childComplexity), true
	case "ApiResponseRoleDeleteAt.status":
		if e.complexity.ApiResponseRoleDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponseRoleDeleteAt.Status(childComplexity), true

	case "ApiResponseSaldoAll.message":
		if e.complexity.ApiResponseSaldoAll.Message == nil {
			break
		}

		return e.complexity.ApiResponseSaldoAll.Message(childComplexity), true
	case "ApiResponseSaldoAll.status":
		if e.complexity.ApiResponseSaldoAll.Status == nil {
			break
		}

		return e.complexity.ApiResponseSaldoAll.Status(childComplexity), true

	case "ApiResponseSaldoDelete.message":
		if e.complexity.ApiResponseSaldoDelete.Message == nil {
			break
		}

		return e.complexity.ApiResponseSaldoDelete.Message(childComplexity), true
	case "ApiResponseSaldoDelete.status":
		if e.complexity.ApiResponseSaldoDelete.Status == nil {
			break
		}

		return e.complexity.ApiResponseSaldoDelete.Status(childComplexity), true

	case "ApiResponseSaldoResponse.data":
		if e.complexity.ApiResponseSaldoResponse.Data == nil {
			break
		}

		return e.complexity.ApiResponseSaldoResponse.Data(childComplexity), true
	case "ApiResponseSaldoResponse.message":
		if e.complexity.ApiResponseSaldoResponse.Message == nil {
			break
		}

		return e.complexity.ApiResponseSaldoResponse.Message(childComplexity), true
	case "ApiResponseSaldoResponse.status":
		if e.complexity.ApiResponseSaldoResponse.Status == nil {
			break
		}

		return e.complexity.ApiResponseSaldoResponse.Status(childComplexity), true

	case "ApiResponseSaldoResponseDeleteAt.data":
		if e.complexity.ApiResponseSaldoResponseDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponseSaldoResponseDeleteAt.Data(childComplexity), true
	case "ApiResponseSaldoResponseDeleteAt.message":
		if e.complexity.ApiResponseSaldoResponseDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponseSaldoResponseDeleteAt.Message(childComplexity), true
	case "ApiResponseSaldoResponseDeleteAt.status":
		if e.complexity.ApiResponseSaldoResponseDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponseSaldoResponseDeleteAt.Status(childComplexity), true

	case "ApiResponseTopup.data":
		if e.complexity.ApiResponseTopup.Data == nil {
			break
		}

		return e.complexity.ApiResponseTopup.Data(childComplexity), true
	case "ApiResponseTopup.message":
		if e.complexity.ApiResponseTopup.Message == nil {
			break
		}

		return e.complexity.ApiResponseTopup.Message(childComplexity), true
	case "ApiResponseTopup.status":
		if e.complexity.ApiResponseTopup.Status == nil {
			break
		}

		return e.complexity.ApiResponseTopup.Status(childComplexity), true

	case "ApiResponseTopupAll.message":
		if e.complexity.ApiResponseTopupAll.Message == nil {
			break
		}

		return e.complexity.ApiResponseTopupAll.Message(childComplexity), true
	case "ApiResponseTopupAll.status":
		if e.complexity.ApiResponseTopupAll.Status == nil {
			break
		}

		return e.complexity.ApiResponseTopupAll.Status(childComplexity), true

	case "ApiResponseTopupDelete.message":
		if e.complexity.ApiResponseTopupDelete.Message == nil {
			break
		}

		return e.complexity.ApiResponseTopupDelete.Message(childComplexity), true
	case "ApiResponseTopupDelete.status":
		if e.complexity.ApiResponseTopupDelete.Status == nil {
			break
		}

		return e.complexity.ApiResponseTopupDelete.Status(childComplexity), true

	case "ApiResponseTopupDeleteAt.data":
		if e.complexity.ApiResponseTopupDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponseTopupDeleteAt.Data(childComplexity), true
	case "ApiResponseTopupDeleteAt.message":
		if e.complexity.ApiResponseTopupDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponseTopupDeleteAt.Message(childComplexity), true
	case "ApiResponseTopupDeleteAt.status":
		if e.complexity.ApiResponseTopupDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponseTopupDeleteAt.Status(childComplexity), true

	case "ApiResponseTopupMonthAmount.data":
		if e.complexity.ApiResponseTopupMonthAmount.Data == nil {
			break
		}

		return e.complexity.ApiResponseTopupMonthAmount.Data(childComplexity), true
	case "ApiResponseTopupMonthAmount.message":
		if e.complexity.ApiResponseTopupMonthAmount.Message == nil {
			break
		}

		return e.complexity.ApiResponseTopupMonthAmount.Message(childComplexity), true
	case "ApiResponseTopupMonthAmount.status":
		if e.complexity.ApiResponseTopupMonthAmount.Status == nil {
			break
		}

		return e.complexity.ApiResponseTopupMonthAmount.Status(childComplexity), true

	case "ApiResponseTopupMonthMethod.data":
		if e.complexity.ApiResponseTopupMonthMethod.Data == nil {
			break
		}

		return e.complexity.ApiResponseTopupMonthMethod.Data(childComplexity), true
	case "ApiResponseTopupMonthMethod.message":
		if e.complexity.ApiResponseTopupMonthMethod.Message == nil {
			break
		}

		return e.complexity.ApiResponseTopupMonthMethod.Message(childComplexity), true
	case "ApiResponseTopupMonthMethod.status":
		if e.complexity.ApiResponseTopupMonthMethod.Status == nil {
			break
		}

		return e.complexity.ApiResponseTopupMonthMethod.Status(childComplexity), true

	case "ApiResponseTopupMonthStatusFailed.data":
		if e.complexity.ApiResponseTopupMonthStatusFailed.Data == nil {
			break
		}

		return e.complexity.ApiResponseTopupMonthStatusFailed.Data(childComplexity), true
	case "ApiResponseTopupMonthStatusFailed.message":
		if e.complexity.ApiResponseTopupMonthStatusFailed.Message == nil {
			break
		}

		return e.complexity.ApiResponseTopupMonthStatusFailed.Message(childComplexity), true
	case "ApiResponseTopupMonthStatusFailed.status":
		if e.complexity.ApiResponseTopupMonthStatusFailed.Status == nil {
			break
		}

		return e.complexity.ApiResponseTopupMonthStatusFailed.Status(childComplexity), true

	case "ApiResponseTopupMonthStatusSuccess.data":
		if e.complexity.ApiResponseTopupMonthStatusSuccess.Data == nil {
			break
		}

		return e.complexity.ApiResponseTopupMonthStatusSuccess.Data(childComplexity), true
	case "ApiResponseTopupMonthStatusSuccess.message":
		if e.complexity.ApiResponseTopupMonthStatusSuccess.Message == nil {
			break
		}

		return e.complexity.ApiResponseTopupMonthStatusSuccess.Message(childComplexity), true
	case "ApiResponseTopupMonthStatusSuccess.status":
		if e.complexity.ApiResponseTopupMonthStatusSuccess.Status == nil {
			break
		}

		return e.complexity.ApiResponseTopupMonthStatusSuccess.Status(childComplexity), true

	case "ApiResponseTopupYearAmount.data":
		if e.complexity.ApiResponseTopupYearAmount.Data == nil {
			break
		}

		return e.complexity.ApiResponseTopupYearAmount.Data(childComplexity), true
	case "ApiResponseTopupYearAmount.message":
		if e.complexity.ApiResponseTopupYearAmount.Message == nil {
			break
		}

		return e.complexity.ApiResponseTopupYearAmount.Message(childComplexity), true
	case "ApiResponseTopupYearAmount.status":
		if e.complexity.ApiResponseTopupYearAmount.Status == nil {
			break
		}

		return e.complexity.ApiResponseTopupYearAmount.Status(childComplexity), true

	case "ApiResponseTopupYearMethod.data":
		if e.complexity.ApiResponseTopupYearMethod.Data == nil {
			break
		}

		return e.complexity.ApiResponseTopupYearMethod.Data(childComplexity), true
	case "ApiResponseTopupYearMethod.message":
		if e.complexity.ApiResponseTopupYearMethod.Message == nil {
			break
		}

		return e.complexity.ApiResponseTopupYearMethod.Message(childComplexity), true
	case "ApiResponseTopupYearMethod.status":
		if e.complexity.ApiResponseTopupYearMethod.Status == nil {
			break
		}

		return e.complexity.ApiResponseTopupYearMethod.Status(childComplexity), true

	case "ApiResponseTopupYearStatusFailed.data":
		if e.complexity.ApiResponseTopupYearStatusFailed.Data == nil {
			break
		}

		return e.complexity.ApiResponseTopupYearStatusFailed.Data(childComplexity), true
	case "ApiResponseTopupYearStatusFailed.message":
		if e.complexity.ApiResponseTopupYearStatusFailed.Message == nil {
			break
		}

		return e.complexity.ApiResponseTopupYearStatusFailed.Message(childComplexity), true
	case "ApiResponseTopupYearStatusFailed.status":
		if e.complexity.ApiResponseTopupYearStatusFailed.Status == nil {
			break
		}

		return e.complexity.ApiResponseTopupYearStatusFailed.Status(childComplexity), true

	case "ApiResponseTopupYearStatusSuccess.data":
		if e.complexity.ApiResponseTopupYearStatusSuccess.Data == nil {
			break
		}

		return e.complexity.ApiResponseTopupYearStatusSuccess.Data(childComplexity), true
	case "ApiResponseTopupYearStatusSuccess.message":
		if e.complexity.ApiResponseTopupYearStatusSuccess.Message == nil {
			break
		}

		return e.complexity.ApiResponseTopupYearStatusSuccess.Message(childComplexity), true
	case "ApiResponseTopupYearStatusSuccess.status":
		if e.complexity.ApiResponseTopupYearStatusSuccess.Status == nil {
			break
		}

		return e.complexity.ApiResponseTopupYearStatusSuccess.Status(childComplexity), true

	case "ApiResponseTransaction.data":
		if e.complexity.ApiResponseTransaction.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransaction.Data(childComplexity), true
	case "ApiResponseTransaction.message":
		if e.complexity.ApiResponseTransaction.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransaction.Message(childComplexity), true
	case "ApiResponseTransaction.status":
		if e.complexity.ApiResponseTransaction.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransaction.Status(childComplexity), true

	case "ApiResponseTransactionAll.message":
		if e.complexity.ApiResponseTransactionAll.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransactionAll.Message(childComplexity), true
	case "ApiResponseTransactionAll.status":
		if e.complexity.ApiResponseTransactionAll.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransactionAll.Status(childComplexity), true

	case "ApiResponseTransactionDelete.message":
		if e.complexity.ApiResponseTransactionDelete.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransactionDelete.Message(childComplexity), true
	case "ApiResponseTransactionDelete.status":
		if e.complexity.ApiResponseTransactionDelete.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransactionDelete.Status(childComplexity), true

	case "ApiResponseTransactionDeleteAt.data":
		if e.complexity.ApiResponseTransactionDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransactionDeleteAt.Data(childComplexity), true
	case "ApiResponseTransactionDeleteAt.message":
		if e.complexity.ApiResponseTransactionDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransactionDeleteAt.Message(childComplexity), true
	case "ApiResponseTransactionDeleteAt.status":
		if e.complexity.ApiResponseTransactionDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransactionDeleteAt.Status(childComplexity), true

	case "ApiResponseTransactionMonthAmount.data":
		if e.complexity.ApiResponseTransactionMonthAmount.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransactionMonthAmount.Data(childComplexity), true
	case "ApiResponseTransactionMonthAmount.message":
		if e.complexity.ApiResponseTransactionMonthAmount.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransactionMonthAmount.Message(childComplexity), true
	case "ApiResponseTransactionMonthAmount.status":
		if e.complexity.ApiResponseTransactionMonthAmount.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransactionMonthAmount.Status(childComplexity), true

	case "ApiResponseTransactionMonthMethod.data":
		if e.complexity.ApiResponseTransactionMonthMethod.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransactionMonthMethod.Data(childComplexity), true
	case "ApiResponseTransactionMonthMethod.message":
		if e.complexity.ApiResponseTransactionMonthMethod.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransactionMonthMethod.Message(childComplexity), true
	case "ApiResponseTransactionMonthMethod.status":
		if e.complexity.ApiResponseTransactionMonthMethod.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransactionMonthMethod.Status(childComplexity), true

	case "ApiResponseTransactionMonthStatusFailed.data":
		if e.complexity.ApiResponseTransactionMonthStatusFailed.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransactionMonthStatusFailed.Data(childComplexity), true
	case "ApiResponseTransactionMonthStatusFailed.message":
		if e.complexity.ApiResponseTransactionMonthStatusFailed.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransactionMonthStatusFailed.Message(childComplexity), true
	case "ApiResponseTransactionMonthStatusFailed.status":
		if e.complexity.ApiResponseTransactionMonthStatusFailed.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransactionMonthStatusFailed.Status(childComplexity), true

	case "ApiResponseTransactionMonthStatusSuccess.data":
		if e.complexity.ApiResponseTransactionMonthStatusSuccess.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransactionMonthStatusSuccess.Data(childComplexity), true
	case "ApiResponseTransactionMonthStatusSuccess.message":
		if e.complexity.ApiResponseTransactionMonthStatusSuccess.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransactionMonthStatusSuccess.Message(childComplexity), true
	case "ApiResponseTransactionMonthStatusSuccess.status":
		if e.complexity.ApiResponseTransactionMonthStatusSuccess.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransactionMonthStatusSuccess.Status(childComplexity), true

	case "ApiResponseTransactionYearAmount.data":
		if e.complexity.ApiResponseTransactionYearAmount.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransactionYearAmount.Data(childComplexity), true
	case "ApiResponseTransactionYearAmount.message":
		if e.complexity.ApiResponseTransactionYearAmount.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransactionYearAmount.Message(childComplexity), true
	case "ApiResponseTransactionYearAmount.status":
		if e.complexity.ApiResponseTransactionYearAmount.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransactionYearAmount.Status(childComplexity), true

	case "ApiResponseTransactionYearMethod.data":
		if e.complexity.ApiResponseTransactionYearMethod.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransactionYearMethod.Data(childComplexity), true
	case "ApiResponseTransactionYearMethod.message":
		if e.complexity.ApiResponseTransactionYearMethod.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransactionYearMethod.Message(childComplexity), true
	case "ApiResponseTransactionYearMethod.status":
		if e.complexity.ApiResponseTransactionYearMethod.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransactionYearMethod.Status(childComplexity), true

	case "ApiResponseTransactionYearStatusFailed.data":
		if e.complexity.ApiResponseTransactionYearStatusFailed.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransactionYearStatusFailed.Data(childComplexity), true
	case "ApiResponseTransactionYearStatusFailed.message":
		if e.complexity.ApiResponseTransactionYearStatusFailed.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransactionYearStatusFailed.Message(childComplexity), true
	case "ApiResponseTransactionYearStatusFailed.status":
		if e.complexity.ApiResponseTransactionYearStatusFailed.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransactionYearStatusFailed.Status(childComplexity), true

	case "ApiResponseTransactionYearStatusSuccess.data":
		if e.complexity.ApiResponseTransactionYearStatusSuccess.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransactionYearStatusSuccess.Data(childComplexity), true
	case "ApiResponseTransactionYearStatusSuccess.message":
		if e.complexity.ApiResponseTransactionYearStatusSuccess.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransactionYearStatusSuccess.Message(childComplexity), true
	case "ApiResponseTransactionYearStatusSuccess.status":
		if e.complexity.ApiResponseTransactionYearStatusSuccess.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransactionYearStatusSuccess.Status(childComplexity), true

	case "ApiResponseTransactions.data":
		if e.complexity.ApiResponseTransactions.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransactions.Data(childComplexity), true
	case "ApiResponseTransactions.message":
		if e.complexity.ApiResponseTransactions.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransactions.Message(childComplexity), true
	case "ApiResponseTransactions.status":
		if e.complexity.ApiResponseTransactions.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransactions.Status(childComplexity), true

	case "ApiResponseTransfer.data":
		if e.complexity.ApiResponseTransfer.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransfer.Data(childComplexity), true
	case "ApiResponseTransfer.message":
		if e.complexity.ApiResponseTransfer.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransfer.Message(childComplexity), true
	case "ApiResponseTransfer.status":
		if e.complexity.ApiResponseTransfer.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransfer.Status(childComplexity), true

	case "ApiResponseTransferAll.message":
		if e.complexity.ApiResponseTransferAll.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransferAll.Message(childComplexity), true
	case "ApiResponseTransferAll.status":
		if e.complexity.ApiResponseTransferAll.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransferAll.Status(childComplexity), true

	case "ApiResponseTransferDelete.message":
		if e.complexity.ApiResponseTransferDelete.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransferDelete.Message(childComplexity), true
	case "ApiResponseTransferDelete.status":
		if e.complexity.ApiResponseTransferDelete.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransferDelete.Status(childComplexity), true

	case "ApiResponseTransferDeleteAt.data":
		if e.complexity.ApiResponseTransferDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransferDeleteAt.Data(childComplexity), true
	case "ApiResponseTransferDeleteAt.message":
		if e.complexity.ApiResponseTransferDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransferDeleteAt.Message(childComplexity), true
	case "ApiResponseTransferDeleteAt.status":
		if e.complexity.ApiResponseTransferDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransferDeleteAt.Status(childComplexity), true

	case "ApiResponseTransferMonthAmount.data":
		if e.complexity.ApiResponseTransferMonthAmount.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransferMonthAmount.Data(childComplexity), true
	case "ApiResponseTransferMonthAmount.message":
		if e.complexity.ApiResponseTransferMonthAmount.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransferMonthAmount.Message(childComplexity), true
	case "ApiResponseTransferMonthAmount.status":
		if e.complexity.ApiResponseTransferMonthAmount.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransferMonthAmount.Status(childComplexity), true

	case "ApiResponseTransferMonthStatusFailed.data":
		if e.complexity.ApiResponseTransferMonthStatusFailed.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransferMonthStatusFailed.Data(childComplexity), true
	case "ApiResponseTransferMonthStatusFailed.message":
		if e.complexity.ApiResponseTransferMonthStatusFailed.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransferMonthStatusFailed.Message(childComplexity), true
	case "ApiResponseTransferMonthStatusFailed.status":
		if e.complexity.ApiResponseTransferMonthStatusFailed.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransferMonthStatusFailed.Status(childComplexity), true

	case "ApiResponseTransferMonthStatusSuccess.data":
		if e.complexity.ApiResponseTransferMonthStatusSuccess.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransferMonthStatusSuccess.Data(childComplexity), true
	case "ApiResponseTransferMonthStatusSuccess.message":
		if e.complexity.ApiResponseTransferMonthStatusSuccess.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransferMonthStatusSuccess.Message(childComplexity), true
	case "ApiResponseTransferMonthStatusSuccess.status":
		if e.complexity.ApiResponseTransferMonthStatusSuccess.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransferMonthStatusSuccess.Status(childComplexity), true

	case "ApiResponseTransferYearAmount.data":
		if e.complexity.ApiResponseTransferYearAmount.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransferYearAmount.Data(childComplexity), true
	case "ApiResponseTransferYearAmount.message":
		if e.complexity.ApiResponseTransferYearAmount.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransferYearAmount.Message(childComplexity), true
	case "ApiResponseTransferYearAmount.status":
		if e.complexity.ApiResponseTransferYearAmount.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransferYearAmount.Status(childComplexity), true

	case "ApiResponseTransferYearStatusFailed.data":
		if e.complexity.ApiResponseTransferYearStatusFailed.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransferYearStatusFailed.Data(childComplexity), true
	case "ApiResponseTransferYearStatusFailed.message":
		if e.complexity.ApiResponseTransferYearStatusFailed.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransferYearStatusFailed.Message(childComplexity), true
	case "ApiResponseTransferYearStatusFailed.status":
		if e.complexity.ApiResponseTransferYearStatusFailed.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransferYearStatusFailed.Status(childComplexity), true

	case "ApiResponseTransferYearStatusSuccess.data":
		if e.complexity.ApiResponseTransferYearStatusSuccess.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransferYearStatusSuccess.Data(childComplexity), true
	case "ApiResponseTransferYearStatusSuccess.message":
		if e.complexity.ApiResponseTransferYearStatusSuccess.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransferYearStatusSuccess.Message(childComplexity), true
	case "ApiResponseTransferYearStatusSuccess.status":
		if e.complexity.ApiResponseTransferYearStatusSuccess.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransferYearStatusSuccess.Status(childComplexity), true

	case "ApiResponseTransfers.data":
		if e.complexity.ApiResponseTransfers.Data == nil {
			break
		}

		return e.complexity.ApiResponseTransfers.Data(childComplexity), true
	case "ApiResponseTransfers.message":
		if e.complexity.ApiResponseTransfers.Message == nil {
			break
		}

		return e.complexity.ApiResponseTransfers.Message(childComplexity), true
	case "ApiResponseTransfers.status":
		if e.complexity.ApiResponseTransfers.Status == nil {
			break
		}

		return e.complexity.ApiResponseTransfers.Status(childComplexity), true

	case "ApiResponseUserAll.message":
		if e.complexity.ApiResponseUserAll.Message == nil {
			break
		}

		return e.complexity.ApiResponseUserAll.Message(childComplexity), true
	case "ApiResponseUserAll.status":
		if e.complexity.ApiResponseUserAll.Status == nil {
			break
		}

		return e.complexity.ApiResponseUserAll.Status(childComplexity), true

	case "ApiResponseUserDelete.message":
		if e.complexity.ApiResponseUserDelete.Message == nil {
			break
		}

		return e.complexity.ApiResponseUserDelete.Message(childComplexity), true
	case "ApiResponseUserDelete.status":
		if e.complexity.ApiResponseUserDelete.Status == nil {
			break
		}

		return e.complexity.ApiResponseUserDelete.Status(childComplexity), true

	case "ApiResponseUserResponse.data":
		if e.complexity.ApiResponseUserResponse.Data == nil {
			break
		}

		return e.complexity.ApiResponseUserResponse.Data(childComplexity), true
	case "ApiResponseUserResponse.message":
		if e.complexity.ApiResponseUserResponse.Message == nil {
			break
		}

		return e.complexity.ApiResponseUserResponse.Message(childComplexity), true
	case "ApiResponseUserResponse.status":
		if e.complexity.ApiResponseUserResponse.Status == nil {
			break
		}

		return e.complexity.ApiResponseUserResponse.Status(childComplexity), true

	case "ApiResponseUserResponseDeleteAt.data":
		if e.complexity.ApiResponseUserResponseDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponseUserResponseDeleteAt.Data(childComplexity), true
	case "ApiResponseUserResponseDeleteAt.message":
		if e.complexity.ApiResponseUserResponseDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponseUserResponseDeleteAt.Message(childComplexity), true
	case "ApiResponseUserResponseDeleteAt.status":
		if e.complexity.ApiResponseUserResponseDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponseUserResponseDeleteAt.Status(childComplexity), true

	case "ApiResponseWithdraw.data":
		if e.complexity.ApiResponseWithdraw.Data == nil {
			break
		}

		return e.complexity.ApiResponseWithdraw.Data(childComplexity), true
	case "ApiResponseWithdraw.message":
		if e.complexity.ApiResponseWithdraw.Message == nil {
			break
		}

		return e.complexity.ApiResponseWithdraw.Message(childComplexity), true
	case "ApiResponseWithdraw.status":
		if e.complexity.ApiResponseWithdraw.Status == nil {
			break
		}

		return e.complexity.ApiResponseWithdraw.Status(childComplexity), true

	case "ApiResponseWithdrawAll.message":
		if e.complexity.ApiResponseWithdrawAll.Message == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawAll.Message(childComplexity), true
	case "ApiResponseWithdrawAll.status":
		if e.complexity.ApiResponseWithdrawAll.Status == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawAll.Status(childComplexity), true

	case "ApiResponseWithdrawDelete.message":
		if e.complexity.ApiResponseWithdrawDelete.Message == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawDelete.Message(childComplexity), true
	case "ApiResponseWithdrawDelete.status":
		if e.complexity.ApiResponseWithdrawDelete.Status == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawDelete.Status(childComplexity), true

	case "ApiResponseWithdrawDeleteAt.data":
		if e.complexity.ApiResponseWithdrawDeleteAt.Data == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawDeleteAt.Data(childComplexity), true
	case "ApiResponseWithdrawDeleteAt.message":
		if e.complexity.ApiResponseWithdrawDeleteAt.Message == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawDeleteAt.Message(childComplexity), true
	case "ApiResponseWithdrawDeleteAt.status":
		if e.complexity.ApiResponseWithdrawDeleteAt.Status == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawDeleteAt.Status(childComplexity), true

	case "ApiResponseWithdrawMonthAmount.data":
		if e.complexity.ApiResponseWithdrawMonthAmount.Data == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawMonthAmount.Data(childComplexity), true
	case "ApiResponseWithdrawMonthAmount.message":
		if e.complexity.ApiResponseWithdrawMonthAmount.Message == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawMonthAmount.Message(childComplexity), true
	case "ApiResponseWithdrawMonthAmount.status":
		if e.complexity.ApiResponseWithdrawMonthAmount.Status == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawMonthAmount.Status(childComplexity), true

	case "ApiResponseWithdrawMonthStatusFailed.data":
		if e.complexity.ApiResponseWithdrawMonthStatusFailed.Data == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawMonthStatusFailed.Data(childComplexity), true
	case "ApiResponseWithdrawMonthStatusFailed.message":
		if e.complexity.ApiResponseWithdrawMonthStatusFailed.Message == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawMonthStatusFailed.Message(childComplexity), true
	case "ApiResponseWithdrawMonthStatusFailed.status":
		if e.complexity.ApiResponseWithdrawMonthStatusFailed.Status == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawMonthStatusFailed.Status(childComplexity), true

	case "ApiResponseWithdrawMonthStatusSuccess.data":
		if e.complexity.ApiResponseWithdrawMonthStatusSuccess.Data == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawMonthStatusSuccess.Data(childComplexity), true
	case "ApiResponseWithdrawMonthStatusSuccess.message":
		if e.complexity.ApiResponseWithdrawMonthStatusSuccess.Message == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawMonthStatusSuccess.Message(childComplexity), true
	case "ApiResponseWithdrawMonthStatusSuccess.status":
		if e.complexity.ApiResponseWithdrawMonthStatusSuccess.Status == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawMonthStatusSuccess.Status(childComplexity), true

	case "ApiResponseWithdrawYearAmount.data":
		if e.complexity.ApiResponseWithdrawYearAmount.Data == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawYearAmount.Data(childComplexity), true
	case "ApiResponseWithdrawYearAmount.message":
		if e.complexity.ApiResponseWithdrawYearAmount.Message == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawYearAmount.Message(childComplexity), true
	case "ApiResponseWithdrawYearAmount.status":
		if e.complexity.ApiResponseWithdrawYearAmount.Status == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawYearAmount.Status(childComplexity), true

	case "ApiResponseWithdrawYearStatusFailed.data":
		if e.complexity.ApiResponseWithdrawYearStatusFailed.Data == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawYearStatusFailed.Data(childComplexity), true
	case "ApiResponseWithdrawYearStatusFailed.message":
		if e.complexity.ApiResponseWithdrawYearStatusFailed.Message == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawYearStatusFailed.Message(childComplexity), true
	case "ApiResponseWithdrawYearStatusFailed.status":
		if e.complexity.ApiResponseWithdrawYearStatusFailed.Status == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawYearStatusFailed.Status(childComplexity), true

	case "ApiResponseWithdrawYearStatusSuccess.data":
		if e.complexity.ApiResponseWithdrawYearStatusSuccess.Data == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawYearStatusSuccess.Data(childComplexity), true
	case "ApiResponseWithdrawYearStatusSuccess.message":
		if e.complexity.ApiResponseWithdrawYearStatusSuccess.Message == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawYearStatusSuccess.Message(childComplexity), true
	case "ApiResponseWithdrawYearStatusSuccess.status":
		if e.complexity.ApiResponseWithdrawYearStatusSuccess.Status == nil {
			break
		}

		return e.complexity.ApiResponseWithdrawYearStatusSuccess.Status(childComplexity), true

	case "ApiResponseYearSaldoBalances.data":
		if e.complexity.ApiResponseYearSaldoBalances.Data == nil {
			break
		}

		return e.complexity.ApiResponseYearSaldoBalances.Data(childComplexity), true
	case "ApiResponseYearSaldoBalances.message":
		if e.complexity.ApiResponseYearSaldoBalances.Message == nil {
			break
		}

		return e.complexity.ApiResponseYearSaldoBalances.Message(childComplexity), true
	case "ApiResponseYearSaldoBalances.status":
		if e.complexity.ApiResponseYearSaldoBalances.Status == nil {
			break
		}

		return e.complexity.ApiResponseYearSaldoBalances.Status(childComplexity), true

	case "ApiResponseYearTotalSaldo.data":
		if e.complexity.ApiResponseYearTotalSaldo.Data == nil {
			break
		}

		return e.complexity.ApiResponseYearTotalSaldo.Data(childComplexity), true
	case "ApiResponseYearTotalSaldo.message":
		if e.complexity.ApiResponseYearTotalSaldo.Message == nil {
			break
		}

		return e.complexity.ApiResponseYearTotalSaldo.Message(childComplexity), true
	case "ApiResponseYearTotalSaldo.status":
		if e.complexity.ApiResponseYearTotalSaldo.Status == nil {
			break
		}

		return e.complexity.ApiResponseYearTotalSaldo.Status(childComplexity), true

	case "ApiResponseYearlyAmount.data":
		if e.complexity.ApiResponseYearlyAmount.Data == nil {
			break
		}

		return e.complexity.ApiResponseYearlyAmount.Data(childComplexity), true
	case "ApiResponseYearlyAmount.message":
		if e.complexity.ApiResponseYearlyAmount.Message == nil {
			break
		}

		return e.complexity.ApiResponseYearlyAmount.Message(childComplexity), true
	case "ApiResponseYearlyAmount.status":
		if e.complexity.ApiResponseYearlyAmount.Status == nil {
			break
		}

		return e.complexity.ApiResponseYearlyAmount.Status(childComplexity), true

	case "ApiResponseYearlyBalance.data":
		if e.complexity.ApiResponseYearlyBalance.Data == nil {
			break
		}

		return e.complexity.ApiResponseYearlyBalance.Data(childComplexity), true
	case "ApiResponseYearlyBalance.message":
		if e.complexity.ApiResponseYearlyBalance.Message == nil {
			break
		}

		return e.complexity.ApiResponseYearlyBalance.Message(childComplexity), true
	case "ApiResponseYearlyBalance.status":
		if e.complexity.ApiResponseYearlyBalance.Status == nil {
			break
		}

		return e.complexity.ApiResponseYearlyBalance.Status(childComplexity), true

	case "ApiResponsesMerchant.data":
		if e.complexity.ApiResponsesMerchant.Data == nil {
			break
		}

		return e.complexity.ApiResponsesMerchant.Data(childComplexity), true
	case "ApiResponsesMerchant.message":
		if e.complexity.ApiResponsesMerchant.Message == nil {
			break
		}

		return e.complexity.ApiResponsesMerchant.Message(childComplexity), true
	case "ApiResponsesMerchant.status":
		if e.complexity.ApiResponsesMerchant.Status == nil {
			break
		}

		return e.complexity.ApiResponsesMerchant.Status(childComplexity), true

	case "ApiResponsesRole.data":
		if e.complexity.ApiResponsesRole.Data == nil {
			break
		}

		return e.complexity.ApiResponsesRole.Data(childComplexity), true
	case "ApiResponsesRole.message":
		if e.complexity.ApiResponsesRole.Message == nil {
			break
		}

		return e.complexity.ApiResponsesRole.Message(childComplexity), true
	case "ApiResponsesRole.status":
		if e.complexity.ApiResponsesRole.Status == nil {
			break
		}

		return e.complexity.ApiResponsesRole.Status(childComplexity), true

	case "ApiResponsesSaldo.data":
		if e.complexity.ApiResponsesSaldo.Data == nil {
			break
		}

		return e.complexity.ApiResponsesSaldo.Data(childComplexity), true
	case "ApiResponsesSaldo.message":
		if e.complexity.ApiResponsesSaldo.Message == nil {
			break
		}

		return e.complexity.ApiResponsesSaldo.Message(childComplexity), true
	case "ApiResponsesSaldo.status":
		if e.complexity.ApiResponsesSaldo.Status == nil {
			break
		}

		return e.complexity.ApiResponsesSaldo.Status(childComplexity), true

	case "ApiResponsesTopup.data":
		if e.complexity.ApiResponsesTopup.Data == nil {
			break
		}

		return e.complexity.ApiResponsesTopup.Data(childComplexity), true
	case "ApiResponsesTopup.message":
		if e.complexity.ApiResponsesTopup.Message == nil {
			break
		}

		return e.complexity.ApiResponsesTopup.Message(childComplexity), true
	case "ApiResponsesTopup.status":
		if e.complexity.ApiResponsesTopup.Status == nil {
			break
		}

		return e.complexity.ApiResponsesTopup.Status(childComplexity), true

	case "ApiResponsesUser.data":
		if e.complexity.ApiResponsesUser.Data == nil {
			break
		}

		return e.complexity.ApiResponsesUser.Data(childComplexity), true
	case "ApiResponsesUser.message":
		if e.complexity.ApiResponsesUser.Message == nil {
			break
		}

		return e.complexity.ApiResponsesUser.Message(childComplexity), true
	case "ApiResponsesUser.status":
		if e.complexity.ApiResponsesUser.Status == nil {
			break
		}

		return e.complexity.ApiResponsesUser.Status(childComplexity), true

	case "ApiResponsesWithdraw.data":
		if e.complexity.ApiResponsesWithdraw.Data == nil {
			break
		}

		return e.complexity.ApiResponsesWithdraw.Data(childComplexity), true
	case "ApiResponsesWithdraw.message":
		if e.complexity.ApiResponsesWithdraw.Message == nil {
			break
		}

		return e.complexity.ApiResponsesWithdraw.Message(childComplexity), true
	case "ApiResponsesWithdraw.status":
		if e.complexity.ApiResponsesWithdraw.Status == nil {
			break
		}

		return e.complexity.ApiResponsesWithdraw.Status(childComplexity), true

	case "CardDashboardByNumberResponse.total_balance":
		if e.complexity.CardDashboardByNumberResponse.TotalBalance == nil {
			break
		}

		return e.complexity.CardDashboardByNumberResponse.TotalBalance(childComplexity), true
	case "CardDashboardByNumberResponse.total_topup":
		if e.complexity.CardDashboardByNumberResponse.TotalTopup == nil {
			break
		}

		return e.complexity.CardDashboardByNumberResponse.TotalTopup(childComplexity), true
	case "CardDashboardByNumberResponse.total_transaction":
		if e.complexity.CardDashboardByNumberResponse.TotalTransaction == nil {
			break
		}

		return e.complexity.CardDashboardByNumberResponse.TotalTransaction(childComplexity), true
	case "CardDashboardByNumberResponse.total_transfer_receiver":
		if e.complexity.CardDashboardByNumberResponse.TotalTransferReceiver == nil {
			break
		}

		return e.complexity.CardDashboardByNumberResponse.TotalTransferReceiver(childComplexity), true
	case "CardDashboardByNumberResponse.total_transfer_send":
		if e.complexity.CardDashboardByNumberResponse.TotalTransferSend == nil {
			break
		}

		return e.complexity.CardDashboardByNumberResponse.TotalTransferSend(childComplexity), true
	case "CardDashboardByNumberResponse.total_withdraw":
		if e.complexity.CardDashboardByNumberResponse.TotalWithdraw == nil {
			break
		}

		return e.complexity.CardDashboardByNumberResponse.TotalWithdraw(childComplexity), true

	case "CardDashboardResponse.total_balance":
		if e.complexity.CardDashboardResponse.TotalBalance == nil {
			break
		}

		return e.complexity.CardDashboardResponse.TotalBalance(childComplexity), true
	case "CardDashboardResponse.total_topup":
		if e.complexity.CardDashboardResponse.TotalTopup == nil {
			break
		}

		return e.complexity.CardDashboardResponse.TotalTopup(childComplexity), true
	case "CardDashboardResponse.total_transaction":
		if e.complexity.CardDashboardResponse.TotalTransaction == nil {
			break
		}

		return e.complexity.CardDashboardResponse.TotalTransaction(childComplexity), true
	case "CardDashboardResponse.total_transfer":
		if e.complexity.CardDashboardResponse.TotalTransfer == nil {
			break
		}

		return e.complexity.CardDashboardResponse.TotalTransfer(childComplexity), true
	case "CardDashboardResponse.total_withdraw":
		if e.complexity.CardDashboardResponse.TotalWithdraw == nil {
			break
		}

		return e.complexity.CardDashboardResponse.TotalWithdraw(childComplexity), true

	case "CardMonthlyAmountResponse.month":
		if e.complexity.CardMonthlyAmountResponse.Month == nil {
			break
		}

		return e.complexity.CardMonthlyAmountResponse.Month(childComplexity), true
	case "CardMonthlyAmountResponse.total_amount":
		if e.complexity.CardMonthlyAmountResponse.TotalAmount == nil {
			break
		}

		return e.complexity.CardMonthlyAmountResponse.TotalAmount(childComplexity), true

	case "CardMonthlyBalanceResponse.month":
		if e.complexity.CardMonthlyBalanceResponse.Month == nil {
			break
		}

		return e.complexity.CardMonthlyBalanceResponse.Month(childComplexity), true
	case "CardMonthlyBalanceResponse.total_balance":
		if e.complexity.CardMonthlyBalanceResponse.TotalBalance == nil {
			break
		}

		return e.complexity.CardMonthlyBalanceResponse.TotalBalance(childComplexity), true

	case "CardResponse.card_number":
		if e.complexity.CardResponse.CardNumber == nil {
			break
		}

		return e.complexity.CardResponse.CardNumber(childComplexity), true
	case "CardResponse.card_provider":
		if e.complexity.CardResponse.CardProvider == nil {
			break
		}

		return e.complexity.CardResponse.CardProvider(childComplexity), true
	case "CardResponse.card_type":
		if e.complexity.CardResponse.CardType == nil {
			break
		}

		return e.complexity.CardResponse.CardType(childComplexity), true
	case "CardResponse.created_at":
		if e.complexity.CardResponse.CreatedAt == nil {
			break
		}

		return e.complexity.CardResponse.CreatedAt(childComplexity), true
	case "CardResponse.cvv":
		if e.complexity.CardResponse.Cvv == nil {
			break
		}

		return e.complexity.CardResponse.Cvv(childComplexity), true
	case "CardResponse.expire_date":
		if e.complexity.CardResponse.ExpireDate == nil {
			break
		}

		return e.complexity.CardResponse.ExpireDate(childComplexity), true
	case "CardResponse.id":
		if e.complexity.CardResponse.ID == nil {
			break
		}

		return e.complexity.CardResponse.ID(childComplexity), true
	case "CardResponse.updated_at":
		if e.complexity.CardResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.CardResponse.UpdatedAt(childComplexity), true
	case "CardResponse.user_id":
		if e.complexity.CardResponse.UserID == nil {
			break
		}

		return e.complexity.CardResponse.UserID(childComplexity), true

	case "CardResponseDeleteAt.card_number":
		if e.complexity.CardResponseDeleteAt.CardNumber == nil {
			break
		}

		return e.complexity.CardResponseDeleteAt.CardNumber(childComplexity), true
	case "CardResponseDeleteAt.card_provider":
		if e.complexity.CardResponseDeleteAt.CardProvider == nil {
			break
		}

		return e.complexity.CardResponseDeleteAt.CardProvider(childComplexity), true
	case "CardResponseDeleteAt.card_type":
		if e.complexity.CardResponseDeleteAt.CardType == nil {
			break
		}

		return e.complexity.CardResponseDeleteAt.CardType(childComplexity), true
	case "CardResponseDeleteAt.created_at":
		if e.complexity.CardResponseDeleteAt.CreatedAt == nil {
			break
		}

		return e.complexity.CardResponseDeleteAt.CreatedAt(childComplexity), true
	case "CardResponseDeleteAt.cvv":
		if e.complexity.CardResponseDeleteAt.Cvv == nil {
			break
		}

		return e.complexity.CardResponseDeleteAt.Cvv(childComplexity), true
	case "CardResponseDeleteAt.deleted_at":
		if e.complexity.CardResponseDeleteAt.DeletedAt == nil {
			break
		}

		return e.complexity.CardResponseDeleteAt.DeletedAt(childComplexity), true
	case "CardResponseDeleteAt.expire_date":
		if e.complexity.CardResponseDeleteAt.ExpireDate == nil {
			break
		}

		return e.complexity.CardResponseDeleteAt.ExpireDate(childComplexity), true
	case "CardResponseDeleteAt.id":
		if e.complexity.CardResponseDeleteAt.ID == nil {
			break
		}

		return e.complexity.CardResponseDeleteAt.ID(childComplexity), true
	case "CardResponseDeleteAt.updated_at":
		if e.complexity.CardResponseDeleteAt.UpdatedAt == nil {
			break
		}

		return e.complexity.CardResponseDeleteAt.UpdatedAt(childComplexity), true
	case "CardResponseDeleteAt.user_id":
		if e.complexity.CardResponseDeleteAt.UserID == nil {
			break
		}

		return e.complexity.CardResponseDeleteAt.UserID(childComplexity), true

	case "CardYearlyAmountResponse.total_amount":
		if e.complexity.CardYearlyAmountResponse.TotalAmount == nil {
			break
		}

		return e.complexity.CardYearlyAmountResponse.TotalAmount(childComplexity), true
	case "CardYearlyAmountResponse.year":
		if e.complexity.CardYearlyAmountResponse.Year == nil {
			break
		}

		return e.complexity.CardYearlyAmountResponse.Year(childComplexity), true

	case "CardYearlyBalanceResponse.total_balance":
		if e.complexity.CardYearlyBalanceResponse.TotalBalance == nil {
			break
		}

		return e.complexity.CardYearlyBalanceResponse.TotalBalance(childComplexity), true
	case "CardYearlyBalanceResponse.year":
		if e.complexity.CardYearlyBalanceResponse.Year == nil {
			break
		}

		return e.complexity.CardYearlyBalanceResponse.Year(childComplexity), true

	case "MerchantMonthlyAmountResponse.month":
		if e.complexity.MerchantMonthlyAmountResponse.Month == nil {
			break
		}

		return e.complexity.MerchantMonthlyAmountResponse.Month(childComplexity), true
	case "MerchantMonthlyAmountResponse.totalAmount":
		if e.complexity.MerchantMonthlyAmountResponse.TotalAmount == nil {
			break
		}

		return e.complexity.MerchantMonthlyAmountResponse.TotalAmount(childComplexity), true

	case "MerchantMonthlyPaymentMethodResponse.month":
		if e.complexity.MerchantMonthlyPaymentMethodResponse.Month == nil {
			break
		}

		return e.complexity.MerchantMonthlyPaymentMethodResponse.Month(childComplexity), true
	case "MerchantMonthlyPaymentMethodResponse.paymentMethod":
		if e.complexity.MerchantMonthlyPaymentMethodResponse.PaymentMethod == nil {
			break
		}

		return e.complexity.MerchantMonthlyPaymentMethodResponse.PaymentMethod(childComplexity), true
	case "MerchantMonthlyPaymentMethodResponse.totalAmount":
		if e.complexity.MerchantMonthlyPaymentMethodResponse.TotalAmount == nil {
			break
		}

		return e.complexity.MerchantMonthlyPaymentMethodResponse.TotalAmount(childComplexity), true

	case "MerchantMonthlyTotalAmountResponse.month":
		if e.complexity.MerchantMonthlyTotalAmountResponse.Month == nil {
			break
		}

		return e.complexity.MerchantMonthlyTotalAmountResponse.Month(childComplexity), true
	case "MerchantMonthlyTotalAmountResponse.totalAmount":
		if e.complexity.MerchantMonthlyTotalAmountResponse.TotalAmount == nil {
			break
		}

		return e.complexity.MerchantMonthlyTotalAmountResponse.TotalAmount(childComplexity), true
	case "MerchantMonthlyTotalAmountResponse.year":
		if e.complexity.MerchantMonthlyTotalAmountResponse.Year == nil {
			break
		}

		return e.complexity.MerchantMonthlyTotalAmountResponse.Year(childComplexity), true

	case "MerchantResponse.apiKey":
		if e.complexity.MerchantResponse.APIKey == nil {
			break
		}

		return e.complexity.MerchantResponse.APIKey(childComplexity), true
	case "MerchantResponse.createdAt":
		if e.complexity.MerchantResponse.CreatedAt == nil {
			break
		}

		return e.complexity.MerchantResponse.CreatedAt(childComplexity), true
	case "MerchantResponse.id":
		if e.complexity.MerchantResponse.ID == nil {
			break
		}

		return e.complexity.MerchantResponse.ID(childComplexity), true
	case "MerchantResponse.name":
		if e.complexity.MerchantResponse.Name == nil {
			break
		}

		return e.complexity.MerchantResponse.Name(childComplexity), true
	case "MerchantResponse.status":
		if e.complexity.MerchantResponse.Status == nil {
			break
		}

		return e.complexity.MerchantResponse.Status(childComplexity), true
	case "MerchantResponse.updatedAt":
		if e.complexity.MerchantResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.MerchantResponse.UpdatedAt(childComplexity), true
	case "MerchantResponse.userId":
		if e.complexity.MerchantResponse.UserID == nil {
			break
		}

		return e.complexity.MerchantResponse.UserID(childComplexity), true

	case "MerchantResponseDeleteAt.apiKey":
		if e.complexity.MerchantResponseDeleteAt.APIKey == nil {
			break
		}

		return e.complexity.MerchantResponseDeleteAt.APIKey(childComplexity), true
	case "MerchantResponseDeleteAt.createdAt":
		if e.complexity.MerchantResponseDeleteAt.CreatedAt == nil {
			break
		}

		return e.complexity.MerchantResponseDeleteAt.CreatedAt(childComplexity), true
	case "MerchantResponseDeleteAt.deletedAt":
		if e.complexity.MerchantResponseDeleteAt.DeletedAt == nil {
			break
		}

		return e.complexity.MerchantResponseDeleteAt.DeletedAt(childComplexity), true
	case "MerchantResponseDeleteAt.id":
		if e.complexity.MerchantResponseDeleteAt.ID == nil {
			break
		}

		return e.complexity.MerchantResponseDeleteAt.ID(childComplexity), true
	case "MerchantResponseDeleteAt.name":
		if e.complexity.MerchantResponseDeleteAt.Name == nil {
			break
		}

		return e.complexity.MerchantResponseDeleteAt.Name(childComplexity), true
	case "MerchantResponseDeleteAt.status":
		if e.complexity.MerchantResponseDeleteAt.Status == nil {
			break
		}

		return e.complexity.MerchantResponseDeleteAt.Status(childComplexity), true
	case "MerchantResponseDeleteAt.updatedAt":
		if e.complexity.MerchantResponseDeleteAt.UpdatedAt == nil {
			break
		}

		return e.complexity.MerchantResponseDeleteAt.UpdatedAt(childComplexity), true
	case "MerchantResponseDeleteAt.userId":
		if e.complexity.MerchantResponseDeleteAt.UserID == nil {
			break
		}

		return e.complexity.MerchantResponseDeleteAt.UserID(childComplexity), true

	case "MerchantTransactionResponse.amount":
		if e.complexity.MerchantTransactionResponse.Amount == nil {
			break
		}

		return e.complexity.MerchantTransactionResponse.Amount(childComplexity), true
	case "MerchantTransactionResponse.cardNumber":
		if e.complexity.MerchantTransactionResponse.CardNumber == nil {
			break
		}

		return e.complexity.MerchantTransactionResponse.CardNumber(childComplexity), true
	case "MerchantTransactionResponse.createdAt":
		if e.complexity.MerchantTransactionResponse.CreatedAt == nil {
			break
		}

		return e.complexity.MerchantTransactionResponse.CreatedAt(childComplexity), true
	case "MerchantTransactionResponse.deletedAt":
		if e.complexity.MerchantTransactionResponse.DeletedAt == nil {
			break
		}

		return e.complexity.MerchantTransactionResponse.DeletedAt(childComplexity), true
	case "MerchantTransactionResponse.id":
		if e.complexity.MerchantTransactionResponse.ID == nil {
			break
		}

		return e.complexity.MerchantTransactionResponse.ID(childComplexity), true
	case "MerchantTransactionResponse.merchantId":
		if e.complexity.MerchantTransactionResponse.MerchantID == nil {
			break
		}

		return e.complexity.MerchantTransactionResponse.MerchantID(childComplexity), true
	case "MerchantTransactionResponse.merchantName":
		if e.complexity.MerchantTransactionResponse.MerchantName == nil {
			break
		}

		return e.complexity.MerchantTransactionResponse.MerchantName(childComplexity), true
	case "MerchantTransactionResponse.paymentMethod":
		if e.complexity.MerchantTransactionResponse.PaymentMethod == nil {
			break
		}

		return e.complexity.MerchantTransactionResponse.PaymentMethod(childComplexity), true
	case "MerchantTransactionResponse.transactionTime":
		if e.complexity.MerchantTransactionResponse.TransactionTime == nil {
			break
		}

		return e.complexity.MerchantTransactionResponse.TransactionTime(childComplexity), true
	case "MerchantTransactionResponse.updatedAt":
		if e.complexity.MerchantTransactionResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.MerchantTransactionResponse.UpdatedAt(childComplexity), true

	case "MerchantYearlyAmountResponse.totalAmount":
		if e.complexity.MerchantYearlyAmountResponse.TotalAmount == nil {
			break
		}

		return e.complexity.MerchantYearlyAmountResponse.TotalAmount(childComplexity), true
	case "MerchantYearlyAmountResponse.year":
		if e.complexity.MerchantYearlyAmountResponse.Year == nil {
			break
		}

		return e.complexity.MerchantYearlyAmountResponse.Year(childComplexity), true

	case "MerchantYearlyPaymentMethodResponse.paymentMethod":
		if e.complexity.MerchantYearlyPaymentMethodResponse.PaymentMethod == nil {
			break
		}

		return e.complexity.MerchantYearlyPaymentMethodResponse.PaymentMethod(childComplexity), true
	case "MerchantYearlyPaymentMethodResponse.totalAmount":
		if e.complexity.MerchantYearlyPaymentMethodResponse.TotalAmount == nil {
			break
		}

		return e.complexity.MerchantYearlyPaymentMethodResponse.TotalAmount(childComplexity), true
	case "MerchantYearlyPaymentMethodResponse.year":
		if e.complexity.MerchantYearlyPaymentMethodResponse.Year == nil {
			break
		}

		return e.complexity.MerchantYearlyPaymentMethodResponse.Year(childComplexity), true

	case "MerchantYearlyTotalAmountResponse.totalAmount":
		if e.complexity.MerchantYearlyTotalAmountResponse.TotalAmount == nil {
			break
		}

		return e.complexity.MerchantYearlyTotalAmountResponse.TotalAmount(childComplexity), true
	case "MerchantYearlyTotalAmountResponse.year":
		if e.complexity.MerchantYearlyTotalAmountResponse.Year == nil {
			break
		}

		return e.complexity.MerchantYearlyTotalAmountResponse.Year(childComplexity), true

	case "Mutation.createCard":
		if e.complexity.Mutation.CreateCard == nil {
			break
		}

		args, err := ec.field_Mutation_createCard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCard(childComplexity, args["input"].(model.CreateCardInput)), true
	case "Mutation.createMerchant":
		if e.complexity.Mutation.CreateMerchant == nil {
			break
		}

		args, err := ec.field_Mutation_createMerchant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMerchant(childComplexity, args["input"].(model.CreateMerchantInput)), true
	case "Mutation.createRole":
		if e.complexity.Mutation.CreateRole == nil {
			break
		}

		args, err := ec.field_Mutation_createRole_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRole(childComplexity, args["input"].(model.CreateRoleInput)), true
	case "Mutation.createSaldo":
		if e.complexity.Mutation.CreateSaldo == nil {
			break
		}

		args, err := ec.field_Mutation_createSaldo_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSaldo(childComplexity, args["input"].(model.CreateSaldoInput)), true
	case "Mutation.createTopup":
		if e.complexity.Mutation.CreateTopup == nil {
			break
		}

		args, err := ec.field_Mutation_createTopup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTopup(childComplexity, args["input"].(model.CreateTopupInput)), true
	case "Mutation.createTransaction":
		if e.complexity.Mutation.CreateTransaction == nil {
			break
		}

		args, err := ec.field_Mutation_createTransaction_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTransaction(childComplexity, args["input"].(model.CreateTransactionRequest)), true
	case "Mutation.createTransfer":
		if e.complexity.Mutation.CreateTransfer == nil {
			break
		}

		args, err := ec.field_Mutation_createTransfer_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTransfer(childComplexity, args["input"].(model.CreateTransferRequest)), true
	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(model.CreateUserInput)), true
	case "Mutation.createWithdraw":
		if e.complexity.Mutation.CreateWithdraw == nil {
			break
		}

		args, err := ec.field_Mutation_createWithdraw_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateWithdraw(childComplexity, args["input"].(model.CreateWithdrawInput)), true
	case "Mutation.deleteAllCardPermanent":
		if e.complexity.Mutation.DeleteAllCardPermanent == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllCardPermanent(childComplexity), true
	case "Mutation.deleteAllMerchantPermanent":
		if e.complexity.Mutation.DeleteAllMerchantPermanent == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllMerchantPermanent(childComplexity), true
	case "Mutation.deleteAllRolePermanent":
		if e.complexity.Mutation.DeleteAllRolePermanent == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllRolePermanent(childComplexity), true
	case "Mutation.deleteAllSaldoPermanent":
		if e.complexity.Mutation.DeleteAllSaldoPermanent == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllSaldoPermanent(childComplexity), true
	case "Mutation.deleteAllTopupPermanent":
		if e.complexity.Mutation.DeleteAllTopupPermanent == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllTopupPermanent(childComplexity), true
	case "Mutation.deleteAllTransactionsPermanent":
		if e.complexity.Mutation.DeleteAllTransactionsPermanent == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllTransactionsPermanent(childComplexity), true
	case "Mutation.deleteAllTransfersPermanent":
		if e.complexity.Mutation.DeleteAllTransfersPermanent == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllTransfersPermanent(childComplexity), true
	case "Mutation.deleteAllUserPermanent":
		if e.complexity.Mutation.DeleteAllUserPermanent == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllUserPermanent(childComplexity), true
	case "Mutation.deleteAllWithdrawPermanent":
		if e.complexity.Mutation.DeleteAllWithdrawPermanent == nil {
			break
		}

		return e.complexity.Mutation.DeleteAllWithdrawPermanent(childComplexity), true
	case "Mutation.deleteCardPermanent":
		if e.complexity.Mutation.DeleteCardPermanent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCardPermanent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCardPermanent(childComplexity, args["input"].(model.FindByIDCardInput)), true
	case "Mutation.deleteMerchantPermanent":
		if e.complexity.Mutation.DeleteMerchantPermanent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMerchantPermanent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMerchantPermanent(childComplexity, args["input"].(model.FindByIDMerchantInput)), true
	case "Mutation.deleteRolePermanent":
		if e.complexity.Mutation.DeleteRolePermanent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRolePermanent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRolePermanent(childComplexity, args["input"].(model.FindByIDRoleInput)), true
	case "Mutation.deleteSaldoPermanent":
		if e.complexity.Mutation.DeleteSaldoPermanent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSaldoPermanent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSaldoPermanent(childComplexity, args["input"].(model.FindByIDSaldoInput)), true
	case "Mutation.deleteTopupPermanent":
		if e.complexity.Mutation.DeleteTopupPermanent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTopupPermanent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTopupPermanent(childComplexity, args["input"].(model.FindByIDTopupInput)), true
	case "Mutation.deleteTransactionPermanent":
		if e.complexity.Mutation.DeleteTransactionPermanent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTransactionPermanent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTransactionPermanent(childComplexity, args["input"].(model.FindByIDTransactionRequest)), true
	case "Mutation.deleteTransferPermanent":
		if e.complexity.Mutation.DeleteTransferPermanent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTransferPermanent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTransferPermanent(childComplexity, args["input"].(model.FindByIDTransferRequest)), true
	case "Mutation.deleteUserPermanent":
		if e.complexity.Mutation.DeleteUserPermanent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUserPermanent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUserPermanent(childComplexity, args["input"].(model.FindByIDUserInput)), true
	case "Mutation.deleteWithdrawPermanent":
		if e.complexity.Mutation.DeleteWithdrawPermanent == nil {
			break
		}

		args, err := ec.field_Mutation_deleteWithdrawPermanent_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteWithdrawPermanent(childComplexity, args["input"].(model.FindByIDWithdrawInput)), true
	case "Mutation.loginUser":
		if e.complexity.Mutation.LoginUser == nil {
			break
		}

		args, err := ec.field_Mutation_loginUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LoginUser(childComplexity, args["input"].(model.LoginInput)), true
	case "Mutation.refreshToken":
		if e.complexity.Mutation.RefreshToken == nil {
			break
		}

		args, err := ec.field_Mutation_refreshToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RefreshToken(childComplexity, args["input"].(model.RefreshTokenInput)), true
	case "Mutation.registerUser":
		if e.complexity.Mutation.RegisterUser == nil {
			break
		}

		args, err := ec.field_Mutation_registerUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterUser(childComplexity, args["input"].(model.RegisterInput)), true
	case "Mutation.restoreAllCard":
		if e.complexity.Mutation.RestoreAllCard == nil {
			break
		}

		return e.complexity.Mutation.RestoreAllCard(childComplexity), true
	case "Mutation.restoreAllMerchant":
		if e.complexity.Mutation.RestoreAllMerchant == nil {
			break
		}

		return e.complexity.Mutation.RestoreAllMerchant(childComplexity), true
	case "Mutation.restoreAllRole":
		if e.complexity.Mutation.RestoreAllRole == nil {
			break
		}

		return e.complexity.Mutation.RestoreAllRole(childComplexity), true
	case "Mutation.restoreAllSaldo":
		if e.complexity.Mutation.RestoreAllSaldo == nil {
			break
		}

		return e.complexity.Mutation.RestoreAllSaldo(childComplexity), true
	case "Mutation.restoreAllTopup":
		if e.complexity.Mutation.RestoreAllTopup == nil {
			break
		}

		return e.complexity.Mutation.RestoreAllTopup(childComplexity), true
	case "Mutation.restoreAllTransactions":
		if e.complexity.Mutation.RestoreAllTransactions == nil {
			break
		}

		return e.complexity.Mutation.RestoreAllTransactions(childComplexity), true
	case "Mutation.restoreAllTransfers":
		if e.complexity.Mutation.RestoreAllTransfers == nil {
			break
		}

		return e.complexity.Mutation.RestoreAllTransfers(childComplexity), true
	case "Mutation.restoreAllUser":
		if e.complexity.Mutation.RestoreAllUser == nil {
			break
		}

		return e.complexity.Mutation.RestoreAllUser(childComplexity), true
	case "Mutation.restoreAllWithdraw":
		if e.complexity.Mutation.RestoreAllWithdraw == nil {
			break
		}

		return e.complexity.Mutation.RestoreAllWithdraw(childComplexity), true
	case "Mutation.restoreCard":
		if e.complexity.Mutation.RestoreCard == nil {
			break
		}

		args, err := ec.field_Mutation_restoreCard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RestoreCard(childComplexity, args["input"].(model.FindByIDCardInput)), true
	case "Mutation.restoreMerchant":
		if e.complexity.Mutation.RestoreMerchant == nil {
			break
		}

		args, err := ec.field_Mutation_restoreMerchant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RestoreMerchant(childComplexity, args["input"].(model.FindByIDMerchantInput)), true
	case "Mutation.restoreRole":
		if e.complexity.Mutation.RestoreRole == nil {
			break
		}

		args, err := ec.field_Mutation_restoreRole_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RestoreRole(childComplexity, args["input"].(model.FindByIDRoleInput)), true
	case "Mutation.restoreSaldo":
		if e.complexity.Mutation.RestoreSaldo == nil {
			break
		}

		args, err := ec.field_Mutation_restoreSaldo_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RestoreSaldo(childComplexity, args["input"].(model.FindByIDSaldoInput)), true
	case "Mutation.restoreTopup":
		if e.complexity.Mutation.RestoreTopup == nil {
			break
		}

		args, err := ec.field_Mutation_restoreTopup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RestoreTopup(childComplexity, args["input"].(model.FindByIDTopupInput)), true
	case "Mutation.restoreTransaction":
		if e.complexity.Mutation.RestoreTransaction == nil {
			break
		}

		args, err := ec.field_Mutation_restoreTransaction_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RestoreTransaction(childComplexity, args["input"].(model.FindByIDTransactionRequest)), true
	case "Mutation.restoreTransfer":
		if e.complexity.Mutation.RestoreTransfer == nil {
			break
		}

		args, err := ec.field_Mutation_restoreTransfer_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RestoreTransfer(childComplexity, args["input"].(model.FindByIDTransferRequest)), true
	case "Mutation.restoreUser":
		if e.complexity.Mutation.RestoreUser == nil {
			break
		}

		args, err := ec.field_Mutation_restoreUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RestoreUser(childComplexity, args["input"].(model.FindByIDUserInput)), true
	case "Mutation.restoreWithdraw":
		if e.complexity.Mutation.RestoreWithdraw == nil {
			break
		}

		args, err := ec.field_Mutation_restoreWithdraw_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RestoreWithdraw(childComplexity, args["input"].(model.FindByIDWithdrawInput)), true
	case "Mutation.trashedCard":
		if e.complexity.Mutation.TrashedCard == nil {
			break
		}

		args, err := ec.field_Mutation_trashedCard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrashedCard(childComplexity, args["input"].(model.FindByIDCardInput)), true
	case "Mutation.trashedMerchant":
		if e.complexity.Mutation.TrashedMerchant == nil {
			break
		}

		args, err := ec.field_Mutation_trashedMerchant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrashedMerchant(childComplexity, args["input"].(model.FindByIDMerchantInput)), true
	case "Mutation.trashedRole":
		if e.complexity.Mutation.TrashedRole == nil {
			break
		}

		args, err := ec.field_Mutation_trashedRole_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrashedRole(childComplexity, args["input"].(model.FindByIDRoleInput)), true
	case "Mutation.trashedSaldo":
		if e.complexity.Mutation.TrashedSaldo == nil {
			break
		}

		args, err := ec.field_Mutation_trashedSaldo_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrashedSaldo(childComplexity, args["input"].(model.FindByIDSaldoInput)), true
	case "Mutation.trashedTopup":
		if e.complexity.Mutation.TrashedTopup == nil {
			break
		}

		args, err := ec.field_Mutation_trashedTopup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrashedTopup(childComplexity, args["input"].(model.FindByIDTopupInput)), true
	case "Mutation.trashedTransaction":
		if e.complexity.Mutation.TrashedTransaction == nil {
			break
		}

		args, err := ec.field_Mutation_trashedTransaction_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrashedTransaction(childComplexity, args["input"].(model.FindByIDTransactionRequest)), true
	case "Mutation.trashedTransfer":
		if e.complexity.Mutation.TrashedTransfer == nil {
			break
		}

		args, err := ec.field_Mutation_trashedTransfer_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrashedTransfer(childComplexity, args["input"].(model.FindByIDTransferRequest)), true
	case "Mutation.trashedUser":
		if e.complexity.Mutation.TrashedUser == nil {
			break
		}

		args, err := ec.field_Mutation_trashedUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrashedUser(childComplexity, args["input"].(model.FindByIDUserInput)), true
	case "Mutation.trashedWithdraw":
		if e.complexity.Mutation.TrashedWithdraw == nil {
			break
		}

		args, err := ec.field_Mutation_trashedWithdraw_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TrashedWithdraw(childComplexity, args["input"].(model.FindByIDWithdrawInput)), true
	case "Mutation.updateCard":
		if e.complexity.Mutation.UpdateCard == nil {
			break
		}

		args, err := ec.field_Mutation_updateCard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCard(childComplexity, args["input"].(model.UpdateCardInput)), true
	case "Mutation.updateMerchant":
		if e.complexity.Mutation.UpdateMerchant == nil {
			break
		}

		args, err := ec.field_Mutation_updateMerchant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMerchant(childComplexity, args["input"].(model.UpdateMerchantInput)), true
	case "Mutation.updateRole":
		if e.complexity.Mutation.UpdateRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateRole_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRole(childComplexity, args["input"].(model.UpdateRoleInput)), true
	case "Mutation.updateSaldo":
		if e.complexity.Mutation.UpdateSaldo == nil {
			break
		}

		args, err := ec.field_Mutation_updateSaldo_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSaldo(childComplexity, args["input"].(model.UpdateSaldoInput)), true
	case "Mutation.updateTopup":
		if e.complexity.Mutation.UpdateTopup == nil {
			break
		}

		args, err := ec.field_Mutation_updateTopup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTopup(childComplexity, args["input"].(model.UpdateTopupInput)), true
	case "Mutation.updateTransaction":
		if e.complexity.Mutation.UpdateTransaction == nil {
			break
		}

		args, err := ec.field_Mutation_updateTransaction_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTransaction(childComplexity, args["input"].(model.UpdateTransactionRequest)), true
	case "Mutation.updateTransfer":
		if e.complexity.Mutation.UpdateTransfer == nil {
			break
		}

		args, err := ec.field_Mutation_updateTransfer_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTransfer(childComplexity, args["input"].(model.UpdateTransferRequest)), true
	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(model.UpdateUserInput)), true
	case "Mutation.updateWithdraw":
		if e.complexity.Mutation.UpdateWithdraw == nil {
			break
		}

		args, err := ec.field_Mutation_updateWithdraw_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateWithdraw(childComplexity, args["input"].(model.UpdateWithdrawInput)), true

	case "PaginationMeta.current_page":
		if e.complexity.PaginationMeta.CurrentPage == nil {
			break
		}

		return e.complexity.PaginationMeta.CurrentPage(childComplexity), true
	case "PaginationMeta.page_size":
		if e.complexity.PaginationMeta.PageSize == nil {
			break
		}

		return e.complexity.PaginationMeta.PageSize(childComplexity), true
	case "PaginationMeta.total_pages":
		if e.complexity.PaginationMeta.TotalPages == nil {
			break
		}

		return e.complexity.PaginationMeta.TotalPages(childComplexity), true
	case "PaginationMeta.total_records":
		if e.complexity.PaginationMeta.TotalRecords == nil {
			break
		}

		return e.complexity.PaginationMeta.TotalRecords(childComplexity), true

	case "Query.dashboardCard":
		if e.complexity.Query.DashboardCard == nil {
			break
		}

		return e.complexity.Query.DashboardCard(childComplexity), true
	case "Query.dashboardCardNumber":
		if e.complexity.Query.DashboardCardNumber == nil {
			break
		}

		args, err := ec.field_Query_dashboardCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DashboardCardNumber(childComplexity, args["input"].(model.FindByCardNumberInput)), true
	case "Query.findActiveTransactions":
		if e.complexity.Query.FindActiveTransactions == nil {
			break
		}

		args, err := ec.field_Query_findActiveTransactions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindActiveTransactions(childComplexity, args["input"].(*model.FindAllTransactionRequest)), true
	case "Query.findActiveTransfers":
		if e.complexity.Query.FindActiveTransfers == nil {
			break
		}

		args, err := ec.field_Query_findActiveTransfers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindActiveTransfers(childComplexity, args["input"].(*model.FindAllTransferRequest)), true
	case "Query.findAllCard":
		if e.complexity.Query.FindAllCard == nil {
			break
		}

		args, err := ec.field_Query_findAllCard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllCard(childComplexity, args["input"].(*model.FindAllCardInput)), true
	case "Query.findAllMerchant":
		if e.complexity.Query.FindAllMerchant == nil {
			break
		}

		args, err := ec.field_Query_findAllMerchant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllMerchant(childComplexity, args["input"].(*model.FindAllMerchantInput)), true
	case "Query.findAllRole":
		if e.complexity.Query.FindAllRole == nil {
			break
		}

		args, err := ec.field_Query_findAllRole_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllRole(childComplexity, args["input"].(*model.FindAllRoleInput)), true
	case "Query.findAllSaldo":
		if e.complexity.Query.FindAllSaldo == nil {
			break
		}

		args, err := ec.field_Query_findAllSaldo_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllSaldo(childComplexity, args["input"].(*model.FindAllSaldoInput)), true
	case "Query.findAllTopup":
		if e.complexity.Query.FindAllTopup == nil {
			break
		}

		args, err := ec.field_Query_findAllTopup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllTopup(childComplexity, args["input"].(*model.FindAllTopupInput)), true
	case "Query.findAllTopupByCardNumber":
		if e.complexity.Query.FindAllTopupByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findAllTopupByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllTopupByCardNumber(childComplexity, args["input"].(*model.FindAllTopupByCardNumberInput)), true
	case "Query.findAllTransactionByApikey":
		if e.complexity.Query.FindAllTransactionByApikey == nil {
			break
		}

		args, err := ec.field_Query_findAllTransactionByApikey_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllTransactionByApikey(childComplexity, args["input"].(*model.FindAllMerchantApikeyInput)), true
	case "Query.findAllTransactionByMerchant":
		if e.complexity.Query.FindAllTransactionByMerchant == nil {
			break
		}

		args, err := ec.field_Query_findAllTransactionByMerchant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllTransactionByMerchant(childComplexity, args["input"].(*model.FindAllMerchantTransactionInput)), true
	case "Query.findAllTransactionMerchant":
		if e.complexity.Query.FindAllTransactionMerchant == nil {
			break
		}

		args, err := ec.field_Query_findAllTransactionMerchant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllTransactionMerchant(childComplexity, args["input"].(*model.FindAllMerchantInput)), true
	case "Query.findAllTransactions":
		if e.complexity.Query.FindAllTransactions == nil {
			break
		}

		args, err := ec.field_Query_findAllTransactions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllTransactions(childComplexity, args["input"].(*model.FindAllTransactionRequest)), true
	case "Query.findAllTransactionsByCardNumber":
		if e.complexity.Query.FindAllTransactionsByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findAllTransactionsByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllTransactionsByCardNumber(childComplexity, args["input"].(*model.FindAllTransactionCardNumberRequest)), true
	case "Query.findAllTransfers":
		if e.complexity.Query.FindAllTransfers == nil {
			break
		}

		args, err := ec.field_Query_findAllTransfers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllTransfers(childComplexity, args["input"].(*model.FindAllTransferRequest)), true
	case "Query.findAllUsers":
		if e.complexity.Query.FindAllUsers == nil {
			break
		}

		args, err := ec.field_Query_findAllUsers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllUsers(childComplexity, args["input"].(*model.FindAllUserInput)), true
	case "Query.findAllWithdraw":
		if e.complexity.Query.FindAllWithdraw == nil {
			break
		}

		args, err := ec.field_Query_findAllWithdraw_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllWithdraw(childComplexity, args["input"].(model.FindAllWithdrawInput)), true
	case "Query.findAllWithdrawByCardNumber":
		if e.complexity.Query.FindAllWithdrawByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findAllWithdrawByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAllWithdrawByCardNumber(childComplexity, args["input"].(model.FindAllWithdrawByCardNumberInput)), true
	case "Query.findByApiKey":
		if e.complexity.Query.FindByAPIKey == nil {
			break
		}

		args, err := ec.field_Query_findByApiKey_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByAPIKey(childComplexity, args["input"].(model.FindByAPIKeyInput)), true
	case "Query.findByActive":
		if e.complexity.Query.FindByActive == nil {
			break
		}

		args, err := ec.field_Query_findByActive_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByActive(childComplexity, args["input"].(*model.FindAllMerchantInput)), true
	case "Query.findByActiveCard":
		if e.complexity.Query.FindByActiveCard == nil {
			break
		}

		args, err := ec.field_Query_findByActiveCard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByActiveCard(childComplexity, args["input"].(*model.FindAllCardInput)), true
	case "Query.findByActiveRole":
		if e.complexity.Query.FindByActiveRole == nil {
			break
		}

		args, err := ec.field_Query_findByActiveRole_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByActiveRole(childComplexity, args["input"].(*model.FindAllRoleInput)), true
	case "Query.findByActiveSaldo":
		if e.complexity.Query.FindByActiveSaldo == nil {
			break
		}

		args, err := ec.field_Query_findByActiveSaldo_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByActiveSaldo(childComplexity, args["input"].(*model.FindAllSaldoInput)), true
	case "Query.findByActiveTopup":
		if e.complexity.Query.FindByActiveTopup == nil {
			break
		}

		args, err := ec.field_Query_findByActiveTopup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByActiveTopup(childComplexity, args["input"].(*model.FindAllTopupInput)), true
	case "Query.findByActiveUsers":
		if e.complexity.Query.FindByActiveUsers == nil {
			break
		}

		args, err := ec.field_Query_findByActiveUsers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByActiveUsers(childComplexity, args["input"].(*model.FindAllUserInput)), true
	case "Query.findByActiveWithdraw":
		if e.complexity.Query.FindByActiveWithdraw == nil {
			break
		}

		args, err := ec.field_Query_findByActiveWithdraw_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByActiveWithdraw(childComplexity, args["input"].(model.FindAllWithdrawInput)), true
	case "Query.findByCardNumberCard":
		if e.complexity.Query.FindByCardNumberCard == nil {
			break
		}

		args, err := ec.field_Query_findByCardNumberCard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByCardNumberCard(childComplexity, args["input"].(model.FindByCardNumberInput)), true
	case "Query.findByCardNumberSaldo":
		if e.complexity.Query.FindByCardNumberSaldo == nil {
			break
		}

		args, err := ec.field_Query_findByCardNumberSaldo_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByCardNumberSaldo(childComplexity, args["card_number"].(string)), true
	case "Query.findByIdCard":
		if e.complexity.Query.FindByIDCard == nil {
			break
		}

		args, err := ec.field_Query_findByIdCard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByIDCard(childComplexity, args["input"].(model.FindByIDCardInput)), true
	case "Query.findByIdMerchant":
		if e.complexity.Query.FindByIDMerchant == nil {
			break
		}

		args, err := ec.field_Query_findByIdMerchant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByIDMerchant(childComplexity, args["input"].(model.FindByIDMerchantInput)), true
	case "Query.findByIdRole":
		if e.complexity.Query.FindByIDRole == nil {
			break
		}

		args, err := ec.field_Query_findByIdRole_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByIDRole(childComplexity, args["input"].(model.FindByIDRoleInput)), true
	case "Query.findByIdSaldo":
		if e.complexity.Query.FindByIDSaldo == nil {
			break
		}

		args, err := ec.field_Query_findByIdSaldo_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByIDSaldo(childComplexity, args["input"].(model.FindByIDSaldoInput)), true
	case "Query.findByIdTopup":
		if e.complexity.Query.FindByIDTopup == nil {
			break
		}

		args, err := ec.field_Query_findByIdTopup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByIDTopup(childComplexity, args["input"].(model.FindByIDTopupInput)), true
	case "Query.findByIdUser":
		if e.complexity.Query.FindByIDUser == nil {
			break
		}

		args, err := ec.field_Query_findByIdUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByIDUser(childComplexity, args["input"].(model.FindByIDUserInput)), true
	case "Query.findByIdWithdraw":
		if e.complexity.Query.FindByIDWithdraw == nil {
			break
		}

		args, err := ec.field_Query_findByIdWithdraw_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByIDWithdraw(childComplexity, args["input"].(model.FindByIDWithdrawInput)), true
	case "Query.findByMerchantUserId":
		if e.complexity.Query.FindByMerchantUserID == nil {
			break
		}

		args, err := ec.field_Query_findByMerchantUserId_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByMerchantUserID(childComplexity, args["input"].(model.FindByMerchantUserIDInput)), true
	case "Query.findByTrashed":
		if e.complexity.Query.FindByTrashed == nil {
			break
		}

		args, err := ec.field_Query_findByTrashed_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByTrashed(childComplexity, args["input"].(*model.FindAllMerchantInput)), true
	case "Query.findByTrashedCard":
		if e.complexity.Query.FindByTrashedCard == nil {
			break
		}

		args, err := ec.field_Query_findByTrashedCard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByTrashedCard(childComplexity, args["input"].(*model.FindAllCardInput)), true
	case "Query.findByTrashedRole":
		if e.complexity.Query.FindByTrashedRole == nil {
			break
		}

		args, err := ec.field_Query_findByTrashedRole_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByTrashedRole(childComplexity, args["input"].(*model.FindAllRoleInput)), true
	case "Query.findByTrashedSaldo":
		if e.complexity.Query.FindByTrashedSaldo == nil {
			break
		}

		args, err := ec.field_Query_findByTrashedSaldo_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByTrashedSaldo(childComplexity, args["input"].(*model.FindAllSaldoInput)), true
	case "Query.findByTrashedTopup":
		if e.complexity.Query.FindByTrashedTopup == nil {
			break
		}

		args, err := ec.field_Query_findByTrashedTopup_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByTrashedTopup(childComplexity, args["input"].(*model.FindAllTopupInput)), true
	case "Query.findByTrashedUsers":
		if e.complexity.Query.FindByTrashedUsers == nil {
			break
		}

		args, err := ec.field_Query_findByTrashedUsers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByTrashedUsers(childComplexity, args["input"].(*model.FindAllUserInput)), true
	case "Query.findByTrashedWithdraw":
		if e.complexity.Query.FindByTrashedWithdraw == nil {
			break
		}

		args, err := ec.field_Query_findByTrashedWithdraw_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByTrashedWithdraw(childComplexity, args["input"].(model.FindAllWithdrawInput)), true
	case "Query.findByUserIdCard":
		if e.complexity.Query.FindByUserIDCard == nil {
			break
		}

		args, err := ec.field_Query_findByUserIdCard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByUserIDCard(childComplexity, args["input"].(model.FindByUserIDCardInput)), true
	case "Query.findByUserIdRole":
		if e.complexity.Query.FindByUserIDRole == nil {
			break
		}

		args, err := ec.field_Query_findByUserIdRole_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindByUserIDRole(childComplexity, args["input"].(model.FindByIDUserRoleInput)), true
	case "Query.findMonthlyAmountByApikey":
		if e.complexity.Query.FindMonthlyAmountByApikey == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyAmountByApikey_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyAmountByApikey(childComplexity, args["input"].(model.FindYearMerchantByApikeyInput)), true
	case "Query.findMonthlyAmountByMerchants":
		if e.complexity.Query.FindMonthlyAmountByMerchants == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyAmountByMerchants_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyAmountByMerchants(childComplexity, args["input"].(model.FindYearMerchantByIDInput)), true
	case "Query.findMonthlyAmountMerchant":
		if e.complexity.Query.FindMonthlyAmountMerchant == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyAmountMerchant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyAmountMerchant(childComplexity, args["input"].(model.FindYearMerchantInput)), true
	case "Query.findMonthlyAmounts":
		if e.complexity.Query.FindMonthlyAmounts == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyAmounts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyAmounts(childComplexity, args["input"].(model.FindYearTransactionStatus)), true
	case "Query.findMonthlyAmountsByCardNumber":
		if e.complexity.Query.FindMonthlyAmountsByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyAmountsByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyAmountsByCardNumber(childComplexity, args["input"].(model.FindByYearCardNumberTransactionRequest)), true
	case "Query.findMonthlyBalance":
		if e.complexity.Query.FindMonthlyBalance == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyBalance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyBalance(childComplexity, args["input"].(model.FindYearBalanceInput)), true
	case "Query.findMonthlyBalanceByCardNumber":
		if e.complexity.Query.FindMonthlyBalanceByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyBalanceByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyBalanceByCardNumber(childComplexity, args["input"].(model.FindYearBalanceCardNumberInput)), true
	case "Query.findMonthlyPaymentMethodByApikey":
		if e.complexity.Query.FindMonthlyPaymentMethodByApikey == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyPaymentMethodByApikey_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyPaymentMethodByApikey(childComplexity, args["input"].(model.FindYearMerchantByApikeyInput)), true
	case "Query.findMonthlyPaymentMethodByMerchants":
		if e.complexity.Query.FindMonthlyPaymentMethodByMerchants == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyPaymentMethodByMerchants_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyPaymentMethodByMerchants(childComplexity, args["input"].(model.FindYearMerchantByIDInput)), true
	case "Query.findMonthlyPaymentMethods":
		if e.complexity.Query.FindMonthlyPaymentMethods == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyPaymentMethods_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyPaymentMethods(childComplexity, args["input"].(model.FindYearTransactionStatus)), true
	case "Query.findMonthlyPaymentMethodsByCardNumber":
		if e.complexity.Query.FindMonthlyPaymentMethodsByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyPaymentMethodsByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyPaymentMethodsByCardNumber(childComplexity, args["input"].(model.FindByYearCardNumberTransactionRequest)), true
	case "Query.findMonthlyPaymentMethodsMerchant":
		if e.complexity.Query.FindMonthlyPaymentMethodsMerchant == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyPaymentMethodsMerchant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyPaymentMethodsMerchant(childComplexity, args["input"].(model.FindYearMerchantInput)), true
	case "Query.findMonthlySaldoBalances":
		if e.complexity.Query.FindMonthlySaldoBalances == nil {
			break
		}

		args, err := ec.field_Query_findMonthlySaldoBalances_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlySaldoBalances(childComplexity, args["input"].(model.FindYearlySaldoInput)), true
	case "Query.findMonthlyTopupAmount":
		if e.complexity.Query.FindMonthlyTopupAmount == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTopupAmount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTopupAmount(childComplexity, args["input"].(model.FindYearAmountInput)), true
	case "Query.findMonthlyTopupAmountByCardNumber":
		if e.complexity.Query.FindMonthlyTopupAmountByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTopupAmountByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTopupAmountByCardNumber(childComplexity, args["input"].(model.FindYearAmountCardNumberInput)), true
	case "Query.findMonthlyTopupAmounts":
		if e.complexity.Query.FindMonthlyTopupAmounts == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTopupAmounts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTopupAmounts(childComplexity, args["input"].(model.FindYearTopupStatusInput)), true
	case "Query.findMonthlyTopupAmountsByCardNumber":
		if e.complexity.Query.FindMonthlyTopupAmountsByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTopupAmountsByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTopupAmountsByCardNumber(childComplexity, args["input"].(model.FindYearTopupCardNumberInput)), true
	case "Query.findMonthlyTopupMethods":
		if e.complexity.Query.FindMonthlyTopupMethods == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTopupMethods_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTopupMethods(childComplexity, args["input"].(model.FindYearTopupStatusInput)), true
	case "Query.findMonthlyTopupMethodsByCardNumber":
		if e.complexity.Query.FindMonthlyTopupMethodsByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTopupMethodsByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTopupMethodsByCardNumber(childComplexity, args["input"].(model.FindYearTopupCardNumberInput)), true
	case "Query.findMonthlyTopupStatusFailed":
		if e.complexity.Query.FindMonthlyTopupStatusFailed == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTopupStatusFailed_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTopupStatusFailed(childComplexity, args["input"].(model.FindMonthlyTopupStatusInput)), true
	case "Query.findMonthlyTopupStatusFailedByCardNumber":
		if e.complexity.Query.FindMonthlyTopupStatusFailedByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTopupStatusFailedByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTopupStatusFailedByCardNumber(childComplexity, args["input"].(model.FindMonthlyTopupStatusCardNumberInput)), true
	case "Query.findMonthlyTopupStatusSuccess":
		if e.complexity.Query.FindMonthlyTopupStatusSuccess == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTopupStatusSuccess_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTopupStatusSuccess(childComplexity, args["input"].(model.FindMonthlyTopupStatusInput)), true
	case "Query.findMonthlyTopupStatusSuccessByCardNumber":
		if e.complexity.Query.FindMonthlyTopupStatusSuccessByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTopupStatusSuccessByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTopupStatusSuccessByCardNumber(childComplexity, args["input"].(model.FindMonthlyTopupStatusCardNumberInput)), true
	case "Query.findMonthlyTotalAmountByApikey":
		if e.complexity.Query.FindMonthlyTotalAmountByApikey == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTotalAmountByApikey_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTotalAmountByApikey(childComplexity, args["input"].(model.FindYearMerchantByApikeyInput)), true
	case "Query.findMonthlyTotalAmountByMerchants":
		if e.complexity.Query.FindMonthlyTotalAmountByMerchants == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTotalAmountByMerchants_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTotalAmountByMerchants(childComplexity, args["input"].(model.FindYearMerchantByIDInput)), true
	case "Query.findMonthlyTotalAmountMerchant":
		if e.complexity.Query.FindMonthlyTotalAmountMerchant == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTotalAmountMerchant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTotalAmountMerchant(childComplexity, args["input"].(model.FindYearMerchantInput)), true
	case "Query.findMonthlyTotalSaldoBalance":
		if e.complexity.Query.FindMonthlyTotalSaldoBalance == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTotalSaldoBalance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTotalSaldoBalance(childComplexity, args["input"].(model.FindMonthlySaldoTotalBalanceInput)), true
	case "Query.findMonthlyTransactionAmount":
		if e.complexity.Query.FindMonthlyTransactionAmount == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransactionAmount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransactionAmount(childComplexity, args["input"].(model.FindYearAmountInput)), true
	case "Query.findMonthlyTransactionAmountByCardNumber":
		if e.complexity.Query.FindMonthlyTransactionAmountByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransactionAmountByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransactionAmountByCardNumber(childComplexity, args["input"].(model.FindYearAmountCardNumberInput)), true
	case "Query.findMonthlyTransactionStatusFailed":
		if e.complexity.Query.FindMonthlyTransactionStatusFailed == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransactionStatusFailed_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransactionStatusFailed(childComplexity, args["input"].(model.FindMonthlyTransactionStatus)), true
	case "Query.findMonthlyTransactionStatusFailedByCardNumber":
		if e.complexity.Query.FindMonthlyTransactionStatusFailedByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransactionStatusFailedByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransactionStatusFailedByCardNumber(childComplexity, args["input"].(model.FindMonthlyTransactionStatusCardNumber)), true
	case "Query.findMonthlyTransactionStatusSuccess":
		if e.complexity.Query.FindMonthlyTransactionStatusSuccess == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransactionStatusSuccess_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransactionStatusSuccess(childComplexity, args["input"].(model.FindMonthlyTransactionStatus)), true
	case "Query.findMonthlyTransactionStatusSuccessByCardNumber":
		if e.complexity.Query.FindMonthlyTransactionStatusSuccessByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransactionStatusSuccessByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransactionStatusSuccessByCardNumber(childComplexity, args["input"].(model.FindMonthlyTransactionStatusCardNumber)), true
	case "Query.findMonthlyTransferAmounts":
		if e.complexity.Query.FindMonthlyTransferAmounts == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransferAmounts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransferAmounts(childComplexity, args["input"].(model.FindYearTransferStatus)), true
	case "Query.findMonthlyTransferAmountsByReceiverCardNumber":
		if e.complexity.Query.FindMonthlyTransferAmountsByReceiverCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransferAmountsByReceiverCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransferAmountsByReceiverCardNumber(childComplexity, args["input"].(model.FindByCardNumberTransferRequest)), true
	case "Query.findMonthlyTransferAmountsBySenderCardNumber":
		if e.complexity.Query.FindMonthlyTransferAmountsBySenderCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransferAmountsBySenderCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransferAmountsBySenderCardNumber(childComplexity, args["input"].(model.FindByCardNumberTransferRequest)), true
	case "Query.findMonthlyTransferReceiverAmount":
		if e.complexity.Query.FindMonthlyTransferReceiverAmount == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransferReceiverAmount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransferReceiverAmount(childComplexity, args["input"].(model.FindYearAmountInput)), true
	case "Query.findMonthlyTransferReceiverAmountByCardNumber":
		if e.complexity.Query.FindMonthlyTransferReceiverAmountByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransferReceiverAmountByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransferReceiverAmountByCardNumber(childComplexity, args["input"].(model.FindYearAmountCardNumberInput)), true
	case "Query.findMonthlyTransferSenderAmount":
		if e.complexity.Query.FindMonthlyTransferSenderAmount == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransferSenderAmount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransferSenderAmount(childComplexity, args["input"].(model.FindYearAmountInput)), true
	case "Query.findMonthlyTransferSenderAmountByCardNumber":
		if e.complexity.Query.FindMonthlyTransferSenderAmountByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransferSenderAmountByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransferSenderAmountByCardNumber(childComplexity, args["input"].(model.FindYearAmountCardNumberInput)), true
	case "Query.findMonthlyTransferStatusFailed":
		if e.complexity.Query.FindMonthlyTransferStatusFailed == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransferStatusFailed_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransferStatusFailed(childComplexity, args["input"].(model.FindMonthlyTransferStatus)), true
	case "Query.findMonthlyTransferStatusFailedByCardNumber":
		if e.complexity.Query.FindMonthlyTransferStatusFailedByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransferStatusFailedByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransferStatusFailedByCardNumber(childComplexity, args["input"].(model.FindMonthlyTransferStatusCardNumber)), true
	case "Query.findMonthlyTransferStatusSuccess":
		if e.complexity.Query.FindMonthlyTransferStatusSuccess == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransferStatusSuccess_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransferStatusSuccess(childComplexity, args["input"].(model.FindMonthlyTransferStatus)), true
	case "Query.findMonthlyTransferStatusSuccessByCardNumber":
		if e.complexity.Query.FindMonthlyTransferStatusSuccessByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyTransferStatusSuccessByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyTransferStatusSuccessByCardNumber(childComplexity, args["input"].(model.FindMonthlyTransferStatusCardNumber)), true
	case "Query.findMonthlyWithdrawAmount":
		if e.complexity.Query.FindMonthlyWithdrawAmount == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyWithdrawAmount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyWithdrawAmount(childComplexity, args["input"].(model.FindYearAmountInput)), true
	case "Query.findMonthlyWithdrawAmountByCardNumber":
		if e.complexity.Query.FindMonthlyWithdrawAmountByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyWithdrawAmountByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyWithdrawAmountByCardNumber(childComplexity, args["input"].(model.FindYearAmountCardNumberInput)), true
	case "Query.findMonthlyWithdrawStatusFailed":
		if e.complexity.Query.FindMonthlyWithdrawStatusFailed == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyWithdrawStatusFailed_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyWithdrawStatusFailed(childComplexity, args["input"].(model.FindMonthlyWithdrawStatusInput)), true
	case "Query.findMonthlyWithdrawStatusFailedCardNumber":
		if e.complexity.Query.FindMonthlyWithdrawStatusFailedCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyWithdrawStatusFailedCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyWithdrawStatusFailedCardNumber(childComplexity, args["input"].(model.FindMonthlyWithdrawStatusCardNumberInput)), true
	case "Query.findMonthlyWithdrawStatusSuccess":
		if e.complexity.Query.FindMonthlyWithdrawStatusSuccess == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyWithdrawStatusSuccess_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyWithdrawStatusSuccess(childComplexity, args["input"].(model.FindMonthlyWithdrawStatusInput)), true
	case "Query.findMonthlyWithdrawStatusSuccessCardNumber":
		if e.complexity.Query.FindMonthlyWithdrawStatusSuccessCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyWithdrawStatusSuccessCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyWithdrawStatusSuccessCardNumber(childComplexity, args["input"].(model.FindMonthlyWithdrawStatusCardNumberInput)), true
	case "Query.findMonthlyWithdraws":
		if e.complexity.Query.FindMonthlyWithdraws == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyWithdraws_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyWithdraws(childComplexity, args["input"].(model.FindYearWithdrawStatusInput)), true
	case "Query.findMonthlyWithdrawsByCardNumber":
		if e.complexity.Query.FindMonthlyWithdrawsByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findMonthlyWithdrawsByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMonthlyWithdrawsByCardNumber(childComplexity, args["input"].(model.FindYearWithdrawCardNumberInput)), true
	case "Query.findTransactionById":
		if e.complexity.Query.FindTransactionByID == nil {
			break
		}

		args, err := ec.field_Query_findTransactionById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTransactionByID(childComplexity, args["input"].(*model.FindByIDTransactionRequest)), true
	case "Query.findTransactionByMerchantId":
		if e.complexity.Query.FindTransactionByMerchantID == nil {
			break
		}

		args, err := ec.field_Query_findTransactionByMerchantId_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTransactionByMerchantID(childComplexity, args["input"].(*model.FindTransactionByMerchantIDRequest)), true
	case "Query.findTransferById":
		if e.complexity.Query.FindTransferByID == nil {
			break
		}

		args, err := ec.field_Query_findTransferById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTransferByID(childComplexity, args["input"].(*model.FindByIDTransferRequest)), true
	case "Query.findTransfersByReceiver":
		if e.complexity.Query.FindTransfersByReceiver == nil {
			break
		}

		args, err := ec.field_Query_findTransfersByReceiver_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTransfersByReceiver(childComplexity, args["input"].(*model.FindTransferByTransferToRequest)), true
	case "Query.findTransfersBySender":
		if e.complexity.Query.FindTransfersBySender == nil {
			break
		}

		args, err := ec.field_Query_findTransfersBySender_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTransfersBySender(childComplexity, args["input"].(*model.FindTransferByTransferFromRequest)), true
	case "Query.findTrashedTransactions":
		if e.complexity.Query.FindTrashedTransactions == nil {
			break
		}

		args, err := ec.field_Query_findTrashedTransactions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTrashedTransactions(childComplexity, args["input"].(*model.FindAllTransactionRequest)), true
	case "Query.findTrashedTransfers":
		if e.complexity.Query.FindTrashedTransfers == nil {
			break
		}

		args, err := ec.field_Query_findTrashedTransfers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTrashedTransfers(childComplexity, args["input"].(*model.FindAllTransferRequest)), true
	case "Query.findYearTotalSaldoBalance":
		if e.complexity.Query.FindYearTotalSaldoBalance == nil {
			break
		}

		args, err := ec.field_Query_findYearTotalSaldoBalance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearTotalSaldoBalance(childComplexity, args["input"].(model.FindYearlySaldoInput)), true
	case "Query.findYearlyAmountByApikey":
		if e.complexity.Query.FindYearlyAmountByApikey == nil {
			break
		}

		args, err := ec.field_Query_findYearlyAmountByApikey_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyAmountByApikey(childComplexity, args["input"].(model.FindYearMerchantByApikeyInput)), true
	case "Query.findYearlyAmountByMerchants":
		if e.complexity.Query.FindYearlyAmountByMerchants == nil {
			break
		}

		args, err := ec.field_Query_findYearlyAmountByMerchants_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyAmountByMerchants(childComplexity, args["input"].(model.FindYearMerchantByIDInput)), true
	case "Query.findYearlyAmountMerchant":
		if e.complexity.Query.FindYearlyAmountMerchant == nil {
			break
		}

		args, err := ec.field_Query_findYearlyAmountMerchant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyAmountMerchant(childComplexity, args["input"].(model.FindYearMerchantInput)), true
	case "Query.findYearlyAmounts":
		if e.complexity.Query.FindYearlyAmounts == nil {
			break
		}

		args, err := ec.field_Query_findYearlyAmounts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyAmounts(childComplexity, args["input"].(model.FindYearTransactionStatus)), true
	case "Query.findYearlyAmountsByCardNumber":
		if e.complexity.Query.FindYearlyAmountsByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyAmountsByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyAmountsByCardNumber(childComplexity, args["input"].(model.FindByYearCardNumberTransactionRequest)), true
	case "Query.findYearlyBalance":
		if e.complexity.Query.FindYearlyBalance == nil {
			break
		}

		args, err := ec.field_Query_findYearlyBalance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyBalance(childComplexity, args["input"].(model.FindYearBalanceInput)), true
	case "Query.findYearlyBalanceByCardNumber":
		if e.complexity.Query.FindYearlyBalanceByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyBalanceByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyBalanceByCardNumber(childComplexity, args["input"].(model.FindYearBalanceCardNumberInput)), true
	case "Query.findYearlyPaymentMethodByApikey":
		if e.complexity.Query.FindYearlyPaymentMethodByApikey == nil {
			break
		}

		args, err := ec.field_Query_findYearlyPaymentMethodByApikey_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyPaymentMethodByApikey(childComplexity, args["input"].(model.FindYearMerchantByApikeyInput)), true
	case "Query.findYearlyPaymentMethodByMerchants":
		if e.complexity.Query.FindYearlyPaymentMethodByMerchants == nil {
			break
		}

		args, err := ec.field_Query_findYearlyPaymentMethodByMerchants_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyPaymentMethodByMerchants(childComplexity, args["input"].(model.FindYearMerchantByIDInput)), true
	case "Query.findYearlyPaymentMethodMerchant":
		if e.complexity.Query.FindYearlyPaymentMethodMerchant == nil {
			break
		}

		args, err := ec.field_Query_findYearlyPaymentMethodMerchant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyPaymentMethodMerchant(childComplexity, args["input"].(model.FindYearMerchantInput)), true
	case "Query.findYearlyPaymentMethods":
		if e.complexity.Query.FindYearlyPaymentMethods == nil {
			break
		}

		args, err := ec.field_Query_findYearlyPaymentMethods_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyPaymentMethods(childComplexity, args["input"].(model.FindYearTransactionStatus)), true
	case "Query.findYearlyPaymentMethodsByCardNumber":
		if e.complexity.Query.FindYearlyPaymentMethodsByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyPaymentMethodsByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyPaymentMethodsByCardNumber(childComplexity, args["input"].(model.FindByYearCardNumberTransactionRequest)), true
	case "Query.findYearlySaldoBalances":
		if e.complexity.Query.FindYearlySaldoBalances == nil {
			break
		}

		args, err := ec.field_Query_findYearlySaldoBalances_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlySaldoBalances(childComplexity, args["input"].(model.FindYearlySaldoInput)), true
	case "Query.findYearlyTopupAmount":
		if e.complexity.Query.FindYearlyTopupAmount == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTopupAmount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTopupAmount(childComplexity, args["input"].(model.FindYearAmountInput)), true
	case "Query.findYearlyTopupAmountByCardNumber":
		if e.complexity.Query.FindYearlyTopupAmountByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTopupAmountByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTopupAmountByCardNumber(childComplexity, args["input"].(model.FindYearAmountCardNumberInput)), true
	case "Query.findYearlyTopupAmounts":
		if e.complexity.Query.FindYearlyTopupAmounts == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTopupAmounts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTopupAmounts(childComplexity, args["input"].(model.FindYearTopupStatusInput)), true
	case "Query.findYearlyTopupAmountsByCardNumber":
		if e.complexity.Query.FindYearlyTopupAmountsByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTopupAmountsByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTopupAmountsByCardNumber(childComplexity, args["input"].(model.FindYearTopupCardNumberInput)), true
	case "Query.findYearlyTopupMethods":
		if e.complexity.Query.FindYearlyTopupMethods == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTopupMethods_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTopupMethods(childComplexity, args["input"].(model.FindYearTopupStatusInput)), true
	case "Query.findYearlyTopupMethodsByCardNumber":
		if e.complexity.Query.FindYearlyTopupMethodsByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTopupMethodsByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTopupMethodsByCardNumber(childComplexity, args["input"].(model.FindYearTopupCardNumberInput)), true
	case "Query.findYearlyTopupStatusFailed":
		if e.complexity.Query.FindYearlyTopupStatusFailed == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTopupStatusFailed_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTopupStatusFailed(childComplexity, args["input"].(model.FindYearTopupStatusInput)), true
	case "Query.findYearlyTopupStatusFailedByCardNumber":
		if e.complexity.Query.FindYearlyTopupStatusFailedByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTopupStatusFailedByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTopupStatusFailedByCardNumber(childComplexity, args["input"].(model.FindYearTopupStatusCardNumberInput)), true
	case "Query.findYearlyTopupStatusSuccess":
		if e.complexity.Query.FindYearlyTopupStatusSuccess == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTopupStatusSuccess_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTopupStatusSuccess(childComplexity, args["input"].(model.FindYearTopupStatusInput)), true
	case "Query.findYearlyTopupStatusSuccessByCardNumber":
		if e.complexity.Query.FindYearlyTopupStatusSuccessByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTopupStatusSuccessByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTopupStatusSuccessByCardNumber(childComplexity, args["input"].(model.FindYearTopupStatusCardNumberInput)), true
	case "Query.findYearlyTotalAmountByApikey":
		if e.complexity.Query.FindYearlyTotalAmountByApikey == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTotalAmountByApikey_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTotalAmountByApikey(childComplexity, args["input"].(model.FindYearMerchantByApikeyInput)), true
	case "Query.findYearlyTotalAmountByMerchants":
		if e.complexity.Query.FindYearlyTotalAmountByMerchants == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTotalAmountByMerchants_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTotalAmountByMerchants(childComplexity, args["input"].(model.FindYearMerchantByIDInput)), true
	case "Query.findYearlyTotalAmountMerchant":
		if e.complexity.Query.FindYearlyTotalAmountMerchant == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTotalAmountMerchant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTotalAmountMerchant(childComplexity, args["input"].(model.FindYearMerchantInput)), true
	case "Query.findYearlyTransactionAmount":
		if e.complexity.Query.FindYearlyTransactionAmount == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransactionAmount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransactionAmount(childComplexity, args["input"].(model.FindYearAmountInput)), true
	case "Query.findYearlyTransactionAmountByCardNumber":
		if e.complexity.Query.FindYearlyTransactionAmountByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransactionAmountByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransactionAmountByCardNumber(childComplexity, args["input"].(model.FindYearAmountCardNumberInput)), true
	case "Query.findYearlyTransactionStatusFailed":
		if e.complexity.Query.FindYearlyTransactionStatusFailed == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransactionStatusFailed_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransactionStatusFailed(childComplexity, args["input"].(model.FindYearTransactionStatus)), true
	case "Query.findYearlyTransactionStatusFailedByCardNumber":
		if e.complexity.Query.FindYearlyTransactionStatusFailedByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransactionStatusFailedByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransactionStatusFailedByCardNumber(childComplexity, args["input"].(model.FindYearTransactionStatusCardNumber)), true
	case "Query.findYearlyTransactionStatusSuccess":
		if e.complexity.Query.FindYearlyTransactionStatusSuccess == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransactionStatusSuccess_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransactionStatusSuccess(childComplexity, args["input"].(model.FindYearTransactionStatus)), true
	case "Query.findYearlyTransactionStatusSuccessByCardNumber":
		if e.complexity.Query.FindYearlyTransactionStatusSuccessByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransactionStatusSuccessByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransactionStatusSuccessByCardNumber(childComplexity, args["input"].(model.FindYearTransactionStatusCardNumber)), true
	case "Query.findYearlyTransferAmounts":
		if e.complexity.Query.FindYearlyTransferAmounts == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransferAmounts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransferAmounts(childComplexity, args["input"].(model.FindYearTransferStatus)), true
	case "Query.findYearlyTransferAmountsByReceiverCardNumber":
		if e.complexity.Query.FindYearlyTransferAmountsByReceiverCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransferAmountsByReceiverCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransferAmountsByReceiverCardNumber(childComplexity, args["input"].(model.FindByCardNumberTransferRequest)), true
	case "Query.findYearlyTransferAmountsBySenderCardNumber":
		if e.complexity.Query.FindYearlyTransferAmountsBySenderCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransferAmountsBySenderCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransferAmountsBySenderCardNumber(childComplexity, args["input"].(model.FindByCardNumberTransferRequest)), true
	case "Query.findYearlyTransferReceiverAmount":
		if e.complexity.Query.FindYearlyTransferReceiverAmount == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransferReceiverAmount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransferReceiverAmount(childComplexity, args["input"].(model.FindYearAmountInput)), true
	case "Query.findYearlyTransferReceiverAmountByCardNumber":
		if e.complexity.Query.FindYearlyTransferReceiverAmountByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransferReceiverAmountByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransferReceiverAmountByCardNumber(childComplexity, args["input"].(model.FindYearAmountCardNumberInput)), true
	case "Query.findYearlyTransferSenderAmount":
		if e.complexity.Query.FindYearlyTransferSenderAmount == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransferSenderAmount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransferSenderAmount(childComplexity, args["input"].(model.FindYearAmountInput)), true
	case "Query.findYearlyTransferSenderAmountByCardNumber":
		if e.complexity.Query.FindYearlyTransferSenderAmountByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransferSenderAmountByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransferSenderAmountByCardNumber(childComplexity, args["input"].(model.FindYearAmountCardNumberInput)), true
	case "Query.findYearlyTransferStatusFailed":
		if e.complexity.Query.FindYearlyTransferStatusFailed == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransferStatusFailed_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransferStatusFailed(childComplexity, args["input"].(model.FindYearTransferStatus)), true
	case "Query.findYearlyTransferStatusFailedByCardNumber":
		if e.complexity.Query.FindYearlyTransferStatusFailedByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransferStatusFailedByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransferStatusFailedByCardNumber(childComplexity, args["input"].(model.FindYearTransferStatusCardNumber)), true
	case "Query.findYearlyTransferStatusSuccess":
		if e.complexity.Query.FindYearlyTransferStatusSuccess == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransferStatusSuccess_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransferStatusSuccess(childComplexity, args["input"].(model.FindYearTransferStatus)), true
	case "Query.findYearlyTransferStatusSuccessByCardNumber":
		if e.complexity.Query.FindYearlyTransferStatusSuccessByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyTransferStatusSuccessByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyTransferStatusSuccessByCardNumber(childComplexity, args["input"].(model.FindYearTransferStatusCardNumber)), true
	case "Query.findYearlyWithdrawAmount":
		if e.complexity.Query.FindYearlyWithdrawAmount == nil {
			break
		}

		args, err := ec.field_Query_findYearlyWithdrawAmount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyWithdrawAmount(childComplexity, args["input"].(model.FindYearAmountInput)), true
	case "Query.findYearlyWithdrawAmountByCardNumber":
		if e.complexity.Query.FindYearlyWithdrawAmountByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyWithdrawAmountByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyWithdrawAmountByCardNumber(childComplexity, args["input"].(model.FindYearAmountCardNumberInput)), true
	case "Query.findYearlyWithdrawStatusFailed":
		if e.complexity.Query.FindYearlyWithdrawStatusFailed == nil {
			break
		}

		args, err := ec.field_Query_findYearlyWithdrawStatusFailed_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyWithdrawStatusFailed(childComplexity, args["input"].(model.FindYearWithdrawStatusInput)), true
	case "Query.findYearlyWithdrawStatusFailedCardNumber":
		if e.complexity.Query.FindYearlyWithdrawStatusFailedCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyWithdrawStatusFailedCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyWithdrawStatusFailedCardNumber(childComplexity, args["input"].(model.FindYearWithdrawStatusCardNumberInput)), true
	case "Query.findYearlyWithdrawStatusSuccess":
		if e.complexity.Query.FindYearlyWithdrawStatusSuccess == nil {
			break
		}

		args, err := ec.field_Query_findYearlyWithdrawStatusSuccess_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyWithdrawStatusSuccess(childComplexity, args["input"].(model.FindYearWithdrawStatusInput)), true
	case "Query.findYearlyWithdrawStatusSuccessCardNumber":
		if e.complexity.Query.FindYearlyWithdrawStatusSuccessCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyWithdrawStatusSuccessCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyWithdrawStatusSuccessCardNumber(childComplexity, args["input"].(model.FindYearWithdrawStatusCardNumberInput)), true
	case "Query.findYearlyWithdraws":
		if e.complexity.Query.FindYearlyWithdraws == nil {
			break
		}

		args, err := ec.field_Query_findYearlyWithdraws_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyWithdraws(childComplexity, args["input"].(model.FindYearWithdrawStatusInput)), true
	case "Query.findYearlyWithdrawsByCardNumber":
		if e.complexity.Query.FindYearlyWithdrawsByCardNumber == nil {
			break
		}

		args, err := ec.field_Query_findYearlyWithdrawsByCardNumber_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindYearlyWithdrawsByCardNumber(childComplexity, args["input"].(model.FindYearWithdrawCardNumberInput)), true
	case "Query.getMe":
		if e.complexity.Query.GetMe == nil {
			break
		}

		return e.complexity.Query.GetMe(childComplexity), true

	case "RoleResponse.created_at":
		if e.complexity.RoleResponse.CreatedAt == nil {
			break
		}

		return e.complexity.RoleResponse.CreatedAt(childComplexity), true
	case "RoleResponse.id":
		if e.complexity.RoleResponse.ID == nil {
			break
		}

		return e.complexity.RoleResponse.ID(childComplexity), true
	case "RoleResponse.name":
		if e.complexity.RoleResponse.Name == nil {
			break
		}

		return e.complexity.RoleResponse.Name(childComplexity), true
	case "RoleResponse.updated_at":
		if e.complexity.RoleResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.RoleResponse.UpdatedAt(childComplexity), true

	case "RoleResponseDeleteAt.created_at":
		if e.complexity.RoleResponseDeleteAt.CreatedAt == nil {
			break
		}

		return e.complexity.RoleResponseDeleteAt.CreatedAt(childComplexity), true
	case "RoleResponseDeleteAt.deleted_at":
		if e.complexity.RoleResponseDeleteAt.DeletedAt == nil {
			break
		}

		return e.complexity.RoleResponseDeleteAt.DeletedAt(childComplexity), true
	case "RoleResponseDeleteAt.id":
		if e.complexity.RoleResponseDeleteAt.ID == nil {
			break
		}

		return e.complexity.RoleResponseDeleteAt.ID(childComplexity), true
	case "RoleResponseDeleteAt.name":
		if e.complexity.RoleResponseDeleteAt.Name == nil {
			break
		}

		return e.complexity.RoleResponseDeleteAt.Name(childComplexity), true
	case "RoleResponseDeleteAt.updated_at":
		if e.complexity.RoleResponseDeleteAt.UpdatedAt == nil {
			break
		}

		return e.complexity.RoleResponseDeleteAt.UpdatedAt(childComplexity), true

	case "SaldoMonthBalanceResponse.month":
		if e.complexity.SaldoMonthBalanceResponse.Month == nil {
			break
		}

		return e.complexity.SaldoMonthBalanceResponse.Month(childComplexity), true
	case "SaldoMonthBalanceResponse.total_balance":
		if e.complexity.SaldoMonthBalanceResponse.TotalBalance == nil {
			break
		}

		return e.complexity.SaldoMonthBalanceResponse.TotalBalance(childComplexity), true

	case "SaldoMonthTotalBalanceResponse.month":
		if e.complexity.SaldoMonthTotalBalanceResponse.Month == nil {
			break
		}

		return e.complexity.SaldoMonthTotalBalanceResponse.Month(childComplexity), true
	case "SaldoMonthTotalBalanceResponse.total_balance":
		if e.complexity.SaldoMonthTotalBalanceResponse.TotalBalance == nil {
			break
		}

		return e.complexity.SaldoMonthTotalBalanceResponse.TotalBalance(childComplexity), true
	case "SaldoMonthTotalBalanceResponse.year":
		if e.complexity.SaldoMonthTotalBalanceResponse.Year == nil {
			break
		}

		return e.complexity.SaldoMonthTotalBalanceResponse.Year(childComplexity), true

	case "SaldoResponse.card_number":
		if e.complexity.SaldoResponse.CardNumber == nil {
			break
		}

		return e.complexity.SaldoResponse.CardNumber(childComplexity), true
	case "SaldoResponse.created_at":
		if e.complexity.SaldoResponse.CreatedAt == nil {
			break
		}

		return e.complexity.SaldoResponse.CreatedAt(childComplexity), true
	case "SaldoResponse.id":
		if e.complexity.SaldoResponse.ID == nil {
			break
		}

		return e.complexity.SaldoResponse.ID(childComplexity), true
	case "SaldoResponse.total_balance":
		if e.complexity.SaldoResponse.TotalBalance == nil {
			break
		}

		return e.complexity.SaldoResponse.TotalBalance(childComplexity), true
	case "SaldoResponse.updated_at":
		if e.complexity.SaldoResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.SaldoResponse.UpdatedAt(childComplexity), true
	case "SaldoResponse.withdraw_amount":
		if e.complexity.SaldoResponse.WithdrawAmount == nil {
			break
		}

		return e.complexity.SaldoResponse.WithdrawAmount(childComplexity), true
	case "SaldoResponse.withdraw_time":
		if e.complexity.SaldoResponse.WithdrawTime == nil {
			break
		}

		return e.complexity.SaldoResponse.WithdrawTime(childComplexity), true

	case "SaldoResponseDeleteAt.card_number":
		if e.complexity.SaldoResponseDeleteAt.CardNumber == nil {
			break
		}

		return e.complexity.SaldoResponseDeleteAt.CardNumber(childComplexity), true
	case "SaldoResponseDeleteAt.created_at":
		if e.complexity.SaldoResponseDeleteAt.CreatedAt == nil {
			break
		}

		return e.complexity.SaldoResponseDeleteAt.CreatedAt(childComplexity), true
	case "SaldoResponseDeleteAt.deleted_at":
		if e.complexity.SaldoResponseDeleteAt.DeletedAt == nil {
			break
		}

		return e.complexity.SaldoResponseDeleteAt.DeletedAt(childComplexity), true
	case "SaldoResponseDeleteAt.id":
		if e.complexity.SaldoResponseDeleteAt.ID == nil {
			break
		}

		return e.complexity.SaldoResponseDeleteAt.ID(childComplexity), true
	case "SaldoResponseDeleteAt.total_balance":
		if e.complexity.SaldoResponseDeleteAt.TotalBalance == nil {
			break
		}

		return e.complexity.SaldoResponseDeleteAt.TotalBalance(childComplexity), true
	case "SaldoResponseDeleteAt.updated_at":
		if e.complexity.SaldoResponseDeleteAt.UpdatedAt == nil {
			break
		}

		return e.complexity.SaldoResponseDeleteAt.UpdatedAt(childComplexity), true
	case "SaldoResponseDeleteAt.withdraw_amount":
		if e.complexity.SaldoResponseDeleteAt.WithdrawAmount == nil {
			break
		}

		return e.complexity.SaldoResponseDeleteAt.WithdrawAmount(childComplexity), true
	case "SaldoResponseDeleteAt.withdraw_time":
		if e.complexity.SaldoResponseDeleteAt.WithdrawTime == nil {
			break
		}

		return e.complexity.SaldoResponseDeleteAt.WithdrawTime(childComplexity), true

	case "SaldoYearBalanceResponse.total_balance":
		if e.complexity.SaldoYearBalanceResponse.TotalBalance == nil {
			break
		}

		return e.complexity.SaldoYearBalanceResponse.TotalBalance(childComplexity), true
	case "SaldoYearBalanceResponse.year":
		if e.complexity.SaldoYearBalanceResponse.Year == nil {
			break
		}

		return e.complexity.SaldoYearBalanceResponse.Year(childComplexity), true

	case "SaldoYearTotalBalanceResponse.total_balance":
		if e.complexity.SaldoYearTotalBalanceResponse.TotalBalance == nil {
			break
		}

		return e.complexity.SaldoYearTotalBalanceResponse.TotalBalance(childComplexity), true
	case "SaldoYearTotalBalanceResponse.year":
		if e.complexity.SaldoYearTotalBalanceResponse.Year == nil {
			break
		}

		return e.complexity.SaldoYearTotalBalanceResponse.Year(childComplexity), true

	case "TokenResponse.access_token":
		if e.complexity.TokenResponse.AccessToken == nil {
			break
		}

		return e.complexity.TokenResponse.AccessToken(childComplexity), true
	case "TokenResponse.refresh_token":
		if e.complexity.TokenResponse.RefreshToken == nil {
			break
		}

		return e.complexity.TokenResponse.RefreshToken(childComplexity), true

	case "TopupMonthAmountResponse.month":
		if e.complexity.TopupMonthAmountResponse.Month == nil {
			break
		}

		return e.complexity.TopupMonthAmountResponse.Month(childComplexity), true
	case "TopupMonthAmountResponse.total_amount":
		if e.complexity.TopupMonthAmountResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TopupMonthAmountResponse.TotalAmount(childComplexity), true

	case "TopupMonthMethodResponse.month":
		if e.complexity.TopupMonthMethodResponse.Month == nil {
			break
		}

		return e.complexity.TopupMonthMethodResponse.Month(childComplexity), true
	case "TopupMonthMethodResponse.topup_method":
		if e.complexity.TopupMonthMethodResponse.TopupMethod == nil {
			break
		}

		return e.complexity.TopupMonthMethodResponse.TopupMethod(childComplexity), true
	case "TopupMonthMethodResponse.total_amount":
		if e.complexity.TopupMonthMethodResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TopupMonthMethodResponse.TotalAmount(childComplexity), true
	case "TopupMonthMethodResponse.total_topups":
		if e.complexity.TopupMonthMethodResponse.TotalTopups == nil {
			break
		}

		return e.complexity.TopupMonthMethodResponse.TotalTopups(childComplexity), true

	case "TopupMonthStatusFailedResponse.month":
		if e.complexity.TopupMonthStatusFailedResponse.Month == nil {
			break
		}

		return e.complexity.TopupMonthStatusFailedResponse.Month(childComplexity), true
	case "TopupMonthStatusFailedResponse.total_amount":
		if e.complexity.TopupMonthStatusFailedResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TopupMonthStatusFailedResponse.TotalAmount(childComplexity), true
	case "TopupMonthStatusFailedResponse.total_failed":
		if e.complexity.TopupMonthStatusFailedResponse.TotalFailed == nil {
			break
		}

		return e.complexity.TopupMonthStatusFailedResponse.TotalFailed(childComplexity), true
	case "TopupMonthStatusFailedResponse.year":
		if e.complexity.TopupMonthStatusFailedResponse.Year == nil {
			break
		}

		return e.complexity.TopupMonthStatusFailedResponse.Year(childComplexity), true

	case "TopupMonthStatusSuccessResponse.month":
		if e.complexity.TopupMonthStatusSuccessResponse.Month == nil {
			break
		}

		return e.complexity.TopupMonthStatusSuccessResponse.Month(childComplexity), true
	case "TopupMonthStatusSuccessResponse.total_amount":
		if e.complexity.TopupMonthStatusSuccessResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TopupMonthStatusSuccessResponse.TotalAmount(childComplexity), true
	case "TopupMonthStatusSuccessResponse.total_success":
		if e.complexity.TopupMonthStatusSuccessResponse.TotalSuccess == nil {
			break
		}

		return e.complexity.TopupMonthStatusSuccessResponse.TotalSuccess(childComplexity), true
	case "TopupMonthStatusSuccessResponse.year":
		if e.complexity.TopupMonthStatusSuccessResponse.Year == nil {
			break
		}

		return e.complexity.TopupMonthStatusSuccessResponse.Year(childComplexity), true

	case "TopupResponse.card_number":
		if e.complexity.TopupResponse.CardNumber == nil {
			break
		}

		return e.complexity.TopupResponse.CardNumber(childComplexity), true
	case "TopupResponse.created_at":
		if e.complexity.TopupResponse.CreatedAt == nil {
			break
		}

		return e.complexity.TopupResponse.CreatedAt(childComplexity), true
	case "TopupResponse.id":
		if e.complexity.TopupResponse.ID == nil {
			break
		}

		return e.complexity.TopupResponse.ID(childComplexity), true
	case "TopupResponse.topup_amount":
		if e.complexity.TopupResponse.TopupAmount == nil {
			break
		}

		return e.complexity.TopupResponse.TopupAmount(childComplexity), true
	case "TopupResponse.topup_method":
		if e.complexity.TopupResponse.TopupMethod == nil {
			break
		}

		return e.complexity.TopupResponse.TopupMethod(childComplexity), true
	case "TopupResponse.topup_no":
		if e.complexity.TopupResponse.TopupNo == nil {
			break
		}

		return e.complexity.TopupResponse.TopupNo(childComplexity), true
	case "TopupResponse.topup_time":
		if e.complexity.TopupResponse.TopupTime == nil {
			break
		}

		return e.complexity.TopupResponse.TopupTime(childComplexity), true
	case "TopupResponse.updated_at":
		if e.complexity.TopupResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.TopupResponse.UpdatedAt(childComplexity), true

	case "TopupResponseDeleteAt.card_number":
		if e.complexity.TopupResponseDeleteAt.CardNumber == nil {
			break
		}

		return e.complexity.TopupResponseDeleteAt.CardNumber(childComplexity), true
	case "TopupResponseDeleteAt.created_at":
		if e.complexity.TopupResponseDeleteAt.CreatedAt == nil {
			break
		}

		return e.complexity.TopupResponseDeleteAt.CreatedAt(childComplexity), true
	case "TopupResponseDeleteAt.deleted_at":
		if e.complexity.TopupResponseDeleteAt.DeletedAt == nil {
			break
		}

		return e.complexity.TopupResponseDeleteAt.DeletedAt(childComplexity), true
	case "TopupResponseDeleteAt.id":
		if e.complexity.TopupResponseDeleteAt.ID == nil {
			break
		}

		return e.complexity.TopupResponseDeleteAt.ID(childComplexity), true
	case "TopupResponseDeleteAt.topup_amount":
		if e.complexity.TopupResponseDeleteAt.TopupAmount == nil {
			break
		}

		return e.complexity.TopupResponseDeleteAt.TopupAmount(childComplexity), true
	case "TopupResponseDeleteAt.topup_method":
		if e.complexity.TopupResponseDeleteAt.TopupMethod == nil {
			break
		}

		return e.complexity.TopupResponseDeleteAt.TopupMethod(childComplexity), true
	case "TopupResponseDeleteAt.topup_no":
		if e.complexity.TopupResponseDeleteAt.TopupNo == nil {
			break
		}

		return e.complexity.TopupResponseDeleteAt.TopupNo(childComplexity), true
	case "TopupResponseDeleteAt.topup_time":
		if e.complexity.TopupResponseDeleteAt.TopupTime == nil {
			break
		}

		return e.complexity.TopupResponseDeleteAt.TopupTime(childComplexity), true
	case "TopupResponseDeleteAt.updated_at":
		if e.complexity.TopupResponseDeleteAt.UpdatedAt == nil {
			break
		}

		return e.complexity.TopupResponseDeleteAt.UpdatedAt(childComplexity), true

	case "TopupYearAmountResponse.total_amount":
		if e.complexity.TopupYearAmountResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TopupYearAmountResponse.TotalAmount(childComplexity), true
	case "TopupYearAmountResponse.year":
		if e.complexity.TopupYearAmountResponse.Year == nil {
			break
		}

		return e.complexity.TopupYearAmountResponse.Year(childComplexity), true

	case "TopupYearMethodResponse.topup_method":
		if e.complexity.TopupYearMethodResponse.TopupMethod == nil {
			break
		}

		return e.complexity.TopupYearMethodResponse.TopupMethod(childComplexity), true
	case "TopupYearMethodResponse.total_amount":
		if e.complexity.TopupYearMethodResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TopupYearMethodResponse.TotalAmount(childComplexity), true
	case "TopupYearMethodResponse.total_topups":
		if e.complexity.TopupYearMethodResponse.TotalTopups == nil {
			break
		}

		return e.complexity.TopupYearMethodResponse.TotalTopups(childComplexity), true
	case "TopupYearMethodResponse.year":
		if e.complexity.TopupYearMethodResponse.Year == nil {
			break
		}

		return e.complexity.TopupYearMethodResponse.Year(childComplexity), true

	case "TopupYearStatusFailedResponse.total_amount":
		if e.complexity.TopupYearStatusFailedResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TopupYearStatusFailedResponse.TotalAmount(childComplexity), true
	case "TopupYearStatusFailedResponse.total_failed":
		if e.complexity.TopupYearStatusFailedResponse.TotalFailed == nil {
			break
		}

		return e.complexity.TopupYearStatusFailedResponse.TotalFailed(childComplexity), true
	case "TopupYearStatusFailedResponse.year":
		if e.complexity.TopupYearStatusFailedResponse.Year == nil {
			break
		}

		return e.complexity.TopupYearStatusFailedResponse.Year(childComplexity), true

	case "TopupYearStatusSuccessResponse.total_amount":
		if e.complexity.TopupYearStatusSuccessResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TopupYearStatusSuccessResponse.TotalAmount(childComplexity), true
	case "TopupYearStatusSuccessResponse.total_success":
		if e.complexity.TopupYearStatusSuccessResponse.TotalSuccess == nil {
			break
		}

		return e.complexity.TopupYearStatusSuccessResponse.TotalSuccess(childComplexity), true
	case "TopupYearStatusSuccessResponse.year":
		if e.complexity.TopupYearStatusSuccessResponse.Year == nil {
			break
		}

		return e.complexity.TopupYearStatusSuccessResponse.Year(childComplexity), true

	case "TransactionMonthAmountResponse.month":
		if e.complexity.TransactionMonthAmountResponse.Month == nil {
			break
		}

		return e.complexity.TransactionMonthAmountResponse.Month(childComplexity), true
	case "TransactionMonthAmountResponse.total_amount":
		if e.complexity.TransactionMonthAmountResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TransactionMonthAmountResponse.TotalAmount(childComplexity), true

	case "TransactionMonthMethodResponse.month":
		if e.complexity.TransactionMonthMethodResponse.Month == nil {
			break
		}

		return e.complexity.TransactionMonthMethodResponse.Month(childComplexity), true
	case "TransactionMonthMethodResponse.payment_method":
		if e.complexity.TransactionMonthMethodResponse.PaymentMethod == nil {
			break
		}

		return e.complexity.TransactionMonthMethodResponse.PaymentMethod(childComplexity), true
	case "TransactionMonthMethodResponse.total_amount":
		if e.complexity.TransactionMonthMethodResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TransactionMonthMethodResponse.TotalAmount(childComplexity), true
	case "TransactionMonthMethodResponse.total_transactions":
		if e.complexity.TransactionMonthMethodResponse.TotalTransactions == nil {
			break
		}

		return e.complexity.TransactionMonthMethodResponse.TotalTransactions(childComplexity), true

	case "TransactionMonthStatusFailedResponse.month":
		if e.complexity.TransactionMonthStatusFailedResponse.Month == nil {
			break
		}

		return e.complexity.TransactionMonthStatusFailedResponse.Month(childComplexity), true
	case "TransactionMonthStatusFailedResponse.total_amount":
		if e.complexity.TransactionMonthStatusFailedResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TransactionMonthStatusFailedResponse.TotalAmount(childComplexity), true
	case "TransactionMonthStatusFailedResponse.total_failed":
		if e.complexity.TransactionMonthStatusFailedResponse.TotalFailed == nil {
			break
		}

		return e.complexity.TransactionMonthStatusFailedResponse.TotalFailed(childComplexity), true
	case "TransactionMonthStatusFailedResponse.year":
		if e.complexity.TransactionMonthStatusFailedResponse.Year == nil {
			break
		}

		return e.complexity.TransactionMonthStatusFailedResponse.Year(childComplexity), true

	case "TransactionMonthStatusSuccessResponse.month":
		if e.complexity.TransactionMonthStatusSuccessResponse.Month == nil {
			break
		}

		return e.complexity.TransactionMonthStatusSuccessResponse.Month(childComplexity), true
	case "TransactionMonthStatusSuccessResponse.total_amount":
		if e.complexity.TransactionMonthStatusSuccessResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TransactionMonthStatusSuccessResponse.TotalAmount(childComplexity), true
	case "TransactionMonthStatusSuccessResponse.total_success":
		if e.complexity.TransactionMonthStatusSuccessResponse.TotalSuccess == nil {
			break
		}

		return e.complexity.TransactionMonthStatusSuccessResponse.TotalSuccess(childComplexity), true
	case "TransactionMonthStatusSuccessResponse.year":
		if e.complexity.TransactionMonthStatusSuccessResponse.Year == nil {
			break
		}

		return e.complexity.TransactionMonthStatusSuccessResponse.Year(childComplexity), true

	case "TransactionResponse.amount":
		if e.complexity.TransactionResponse.Amount == nil {
			break
		}

		return e.complexity.TransactionResponse.Amount(childComplexity), true
	case "TransactionResponse.card_number":
		if e.complexity.TransactionResponse.CardNumber == nil {
			break
		}

		return e.complexity.TransactionResponse.CardNumber(childComplexity), true
	case "TransactionResponse.created_at":
		if e.complexity.TransactionResponse.CreatedAt == nil {
			break
		}

		return e.complexity.TransactionResponse.CreatedAt(childComplexity), true
	case "TransactionResponse.id":
		if e.complexity.TransactionResponse.ID == nil {
			break
		}

		return e.complexity.TransactionResponse.ID(childComplexity), true
	case "TransactionResponse.merchant_id":
		if e.complexity.TransactionResponse.MerchantID == nil {
			break
		}

		return e.complexity.TransactionResponse.MerchantID(childComplexity), true
	case "TransactionResponse.payment_method":
		if e.complexity.TransactionResponse.PaymentMethod == nil {
			break
		}

		return e.complexity.TransactionResponse.PaymentMethod(childComplexity), true
	case "TransactionResponse.transaction_no":
		if e.complexity.TransactionResponse.TransactionNo == nil {
			break
		}

		return e.complexity.TransactionResponse.TransactionNo(childComplexity), true
	case "TransactionResponse.transaction_time":
		if e.complexity.TransactionResponse.TransactionTime == nil {
			break
		}

		return e.complexity.TransactionResponse.TransactionTime(childComplexity), true
	case "TransactionResponse.updated_at":
		if e.complexity.TransactionResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.TransactionResponse.UpdatedAt(childComplexity), true

	case "TransactionResponseDeleteAt.amount":
		if e.complexity.TransactionResponseDeleteAt.Amount == nil {
			break
		}

		return e.complexity.TransactionResponseDeleteAt.Amount(childComplexity), true
	case "TransactionResponseDeleteAt.card_number":
		if e.complexity.TransactionResponseDeleteAt.CardNumber == nil {
			break
		}

		return e.complexity.TransactionResponseDeleteAt.CardNumber(childComplexity), true
	case "TransactionResponseDeleteAt.created_at":
		if e.complexity.TransactionResponseDeleteAt.CreatedAt == nil {
			break
		}

		return e.complexity.TransactionResponseDeleteAt.CreatedAt(childComplexity), true
	case "TransactionResponseDeleteAt.deleted_at":
		if e.complexity.TransactionResponseDeleteAt.DeletedAt == nil {
			break
		}

		return e.complexity.TransactionResponseDeleteAt.DeletedAt(childComplexity), true
	case "TransactionResponseDeleteAt.id":
		if e.complexity.TransactionResponseDeleteAt.ID == nil {
			break
		}

		return e.complexity.TransactionResponseDeleteAt.ID(childComplexity), true
	case "TransactionResponseDeleteAt.merchant_id":
		if e.complexity.TransactionResponseDeleteAt.MerchantID == nil {
			break
		}

		return e.complexity.TransactionResponseDeleteAt.MerchantID(childComplexity), true
	case "TransactionResponseDeleteAt.payment_method":
		if e.complexity.TransactionResponseDeleteAt.PaymentMethod == nil {
			break
		}

		return e.complexity.TransactionResponseDeleteAt.PaymentMethod(childComplexity), true
	case "TransactionResponseDeleteAt.transaction_no":
		if e.complexity.TransactionResponseDeleteAt.TransactionNo == nil {
			break
		}

		return e.complexity.TransactionResponseDeleteAt.TransactionNo(childComplexity), true
	case "TransactionResponseDeleteAt.transaction_time":
		if e.complexity.TransactionResponseDeleteAt.TransactionTime == nil {
			break
		}

		return e.complexity.TransactionResponseDeleteAt.TransactionTime(childComplexity), true
	case "TransactionResponseDeleteAt.updated_at":
		if e.complexity.TransactionResponseDeleteAt.UpdatedAt == nil {
			break
		}

		return e.complexity.TransactionResponseDeleteAt.UpdatedAt(childComplexity), true

	case "TransactionYearMethodResponse.payment_method":
		if e.complexity.TransactionYearMethodResponse.PaymentMethod == nil {
			break
		}

		return e.complexity.TransactionYearMethodResponse.PaymentMethod(childComplexity), true
	case "TransactionYearMethodResponse.total_amount":
		if e.complexity.TransactionYearMethodResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TransactionYearMethodResponse.TotalAmount(childComplexity), true
	case "TransactionYearMethodResponse.total_transactions":
		if e.complexity.TransactionYearMethodResponse.TotalTransactions == nil {
			break
		}

		return e.complexity.TransactionYearMethodResponse.TotalTransactions(childComplexity), true
	case "TransactionYearMethodResponse.year":
		if e.complexity.TransactionYearMethodResponse.Year == nil {
			break
		}

		return e.complexity.TransactionYearMethodResponse.Year(childComplexity), true

	case "TransactionYearStatusFailedResponse.total_amount":
		if e.complexity.TransactionYearStatusFailedResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TransactionYearStatusFailedResponse.TotalAmount(childComplexity), true
	case "TransactionYearStatusFailedResponse.total_failed":
		if e.complexity.TransactionYearStatusFailedResponse.TotalFailed == nil {
			break
		}

		return e.complexity.TransactionYearStatusFailedResponse.TotalFailed(childComplexity), true
	case "TransactionYearStatusFailedResponse.year":
		if e.complexity.TransactionYearStatusFailedResponse.Year == nil {
			break
		}

		return e.complexity.TransactionYearStatusFailedResponse.Year(childComplexity), true

	case "TransactionYearStatusSuccessResponse.total_amount":
		if e.complexity.TransactionYearStatusSuccessResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TransactionYearStatusSuccessResponse.TotalAmount(childComplexity), true
	case "TransactionYearStatusSuccessResponse.total_success":
		if e.complexity.TransactionYearStatusSuccessResponse.TotalSuccess == nil {
			break
		}

		return e.complexity.TransactionYearStatusSuccessResponse.TotalSuccess(childComplexity), true
	case "TransactionYearStatusSuccessResponse.year":
		if e.complexity.TransactionYearStatusSuccessResponse.Year == nil {
			break
		}

		return e.complexity.TransactionYearStatusSuccessResponse.Year(childComplexity), true

	case "TransactionYearlyAmountResponse.total_amount":
		if e.complexity.TransactionYearlyAmountResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TransactionYearlyAmountResponse.TotalAmount(childComplexity), true
	case "TransactionYearlyAmountResponse.year":
		if e.complexity.TransactionYearlyAmountResponse.Year == nil {
			break
		}

		return e.complexity.TransactionYearlyAmountResponse.Year(childComplexity), true

	case "TransferMonthAmountResponse.month":
		if e.complexity.TransferMonthAmountResponse.Month == nil {
			break
		}

		return e.complexity.TransferMonthAmountResponse.Month(childComplexity), true
	case "TransferMonthAmountResponse.total_amount":
		if e.complexity.TransferMonthAmountResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TransferMonthAmountResponse.TotalAmount(childComplexity), true

	case "TransferMonthStatusFailedResponse.month":
		if e.complexity.TransferMonthStatusFailedResponse.Month == nil {
			break
		}

		return e.complexity.TransferMonthStatusFailedResponse.Month(childComplexity), true
	case "TransferMonthStatusFailedResponse.total_amount":
		if e.complexity.TransferMonthStatusFailedResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TransferMonthStatusFailedResponse.TotalAmount(childComplexity), true
	case "TransferMonthStatusFailedResponse.total_failed":
		if e.complexity.TransferMonthStatusFailedResponse.TotalFailed == nil {
			break
		}

		return e.complexity.TransferMonthStatusFailedResponse.TotalFailed(childComplexity), true
	case "TransferMonthStatusFailedResponse.year":
		if e.complexity.TransferMonthStatusFailedResponse.Year == nil {
			break
		}

		return e.complexity.TransferMonthStatusFailedResponse.Year(childComplexity), true

	case "TransferMonthStatusSuccessResponse.month":
		if e.complexity.TransferMonthStatusSuccessResponse.Month == nil {
			break
		}

		return e.complexity.TransferMonthStatusSuccessResponse.Month(childComplexity), true
	case "TransferMonthStatusSuccessResponse.total_amount":
		if e.complexity.TransferMonthStatusSuccessResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TransferMonthStatusSuccessResponse.TotalAmount(childComplexity), true
	case "TransferMonthStatusSuccessResponse.total_success":
		if e.complexity.TransferMonthStatusSuccessResponse.TotalSuccess == nil {
			break
		}

		return e.complexity.TransferMonthStatusSuccessResponse.TotalSuccess(childComplexity), true
	case "TransferMonthStatusSuccessResponse.year":
		if e.complexity.TransferMonthStatusSuccessResponse.Year == nil {
			break
		}

		return e.complexity.TransferMonthStatusSuccessResponse.Year(childComplexity), true

	case "TransferResponse.created_at":
		if e.complexity.TransferResponse.CreatedAt == nil {
			break
		}

		return e.complexity.TransferResponse.CreatedAt(childComplexity), true
	case "TransferResponse.id":
		if e.complexity.TransferResponse.ID == nil {
			break
		}

		return e.complexity.TransferResponse.ID(childComplexity), true
	case "TransferResponse.transfer_amount":
		if e.complexity.TransferResponse.TransferAmount == nil {
			break
		}

		return e.complexity.TransferResponse.TransferAmount(childComplexity), true
	case "TransferResponse.transfer_from":
		if e.complexity.TransferResponse.TransferFrom == nil {
			break
		}

		return e.complexity.TransferResponse.TransferFrom(childComplexity), true
	case "TransferResponse.transfer_no":
		if e.complexity.TransferResponse.TransferNo == nil {
			break
		}

		return e.complexity.TransferResponse.TransferNo(childComplexity), true
	case "TransferResponse.transfer_time":
		if e.complexity.TransferResponse.TransferTime == nil {
			break
		}

		return e.complexity.TransferResponse.TransferTime(childComplexity), true
	case "TransferResponse.transfer_to":
		if e.complexity.TransferResponse.TransferTo == nil {
			break
		}

		return e.complexity.TransferResponse.TransferTo(childComplexity), true
	case "TransferResponse.updated_at":
		if e.complexity.TransferResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.TransferResponse.UpdatedAt(childComplexity), true

	case "TransferResponseDeleteAt.created_at":
		if e.complexity.TransferResponseDeleteAt.CreatedAt == nil {
			break
		}

		return e.complexity.TransferResponseDeleteAt.CreatedAt(childComplexity), true
	case "TransferResponseDeleteAt.deleted_at":
		if e.complexity.TransferResponseDeleteAt.DeletedAt == nil {
			break
		}

		return e.complexity.TransferResponseDeleteAt.DeletedAt(childComplexity), true
	case "TransferResponseDeleteAt.id":
		if e.complexity.TransferResponseDeleteAt.ID == nil {
			break
		}

		return e.complexity.TransferResponseDeleteAt.ID(childComplexity), true
	case "TransferResponseDeleteAt.transfer_amount":
		if e.complexity.TransferResponseDeleteAt.TransferAmount == nil {
			break
		}

		return e.complexity.TransferResponseDeleteAt.TransferAmount(childComplexity), true
	case "TransferResponseDeleteAt.transfer_from":
		if e.complexity.TransferResponseDeleteAt.TransferFrom == nil {
			break
		}

		return e.complexity.TransferResponseDeleteAt.TransferFrom(childComplexity), true
	case "TransferResponseDeleteAt.transfer_no":
		if e.complexity.TransferResponseDeleteAt.TransferNo == nil {
			break
		}

		return e.complexity.TransferResponseDeleteAt.TransferNo(childComplexity), true
	case "TransferResponseDeleteAt.transfer_time":
		if e.complexity.TransferResponseDeleteAt.TransferTime == nil {
			break
		}

		return e.complexity.TransferResponseDeleteAt.TransferTime(childComplexity), true
	case "TransferResponseDeleteAt.transfer_to":
		if e.complexity.TransferResponseDeleteAt.TransferTo == nil {
			break
		}

		return e.complexity.TransferResponseDeleteAt.TransferTo(childComplexity), true
	case "TransferResponseDeleteAt.updated_at":
		if e.complexity.TransferResponseDeleteAt.UpdatedAt == nil {
			break
		}

		return e.complexity.TransferResponseDeleteAt.UpdatedAt(childComplexity), true

	case "TransferYearAmountResponse.total_amount":
		if e.complexity.TransferYearAmountResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TransferYearAmountResponse.TotalAmount(childComplexity), true
	case "TransferYearAmountResponse.year":
		if e.complexity.TransferYearAmountResponse.Year == nil {
			break
		}

		return e.complexity.TransferYearAmountResponse.Year(childComplexity), true

	case "TransferYearStatusFailedResponse.total_amount":
		if e.complexity.TransferYearStatusFailedResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TransferYearStatusFailedResponse.TotalAmount(childComplexity), true
	case "TransferYearStatusFailedResponse.total_failed":
		if e.complexity.TransferYearStatusFailedResponse.TotalFailed == nil {
			break
		}

		return e.complexity.TransferYearStatusFailedResponse.TotalFailed(childComplexity), true
	case "TransferYearStatusFailedResponse.year":
		if e.complexity.TransferYearStatusFailedResponse.Year == nil {
			break
		}

		return e.complexity.TransferYearStatusFailedResponse.Year(childComplexity), true

	case "TransferYearStatusSuccessResponse.total_amount":
		if e.complexity.TransferYearStatusSuccessResponse.TotalAmount == nil {
			break
		}

		return e.complexity.TransferYearStatusSuccessResponse.TotalAmount(childComplexity), true
	case "TransferYearStatusSuccessResponse.total_success":
		if e.complexity.TransferYearStatusSuccessResponse.TotalSuccess == nil {
			break
		}

		return e.complexity.TransferYearStatusSuccessResponse.TotalSuccess(childComplexity), true
	case "TransferYearStatusSuccessResponse.year":
		if e.complexity.TransferYearStatusSuccessResponse.Year == nil {
			break
		}

		return e.complexity.TransferYearStatusSuccessResponse.Year(childComplexity), true

	case "UserResponse.created_at":
		if e.complexity.UserResponse.CreatedAt == nil {
			break
		}

		return e.complexity.UserResponse.CreatedAt(childComplexity), true
	case "UserResponse.email":
		if e.complexity.UserResponse.Email == nil {
			break
		}

		return e.complexity.UserResponse.Email(childComplexity), true
	case "UserResponse.firstname":
		if e.complexity.UserResponse.Firstname == nil {
			break
		}

		return e.complexity.UserResponse.Firstname(childComplexity), true
	case "UserResponse.id":
		if e.complexity.UserResponse.ID == nil {
			break
		}

		return e.complexity.UserResponse.ID(childComplexity), true
	case "UserResponse.lastname":
		if e.complexity.UserResponse.Lastname == nil {
			break
		}

		return e.complexity.UserResponse.Lastname(childComplexity), true
	case "UserResponse.updated_at":
		if e.complexity.UserResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.UserResponse.UpdatedAt(childComplexity), true

	case "UserResponseDeleteAt.created_at":
		if e.complexity.UserResponseDeleteAt.CreatedAt == nil {
			break
		}

		return e.complexity.UserResponseDeleteAt.CreatedAt(childComplexity), true
	case "UserResponseDeleteAt.deleted_at":
		if e.complexity.UserResponseDeleteAt.DeletedAt == nil {
			break
		}

		return e.complexity.UserResponseDeleteAt.DeletedAt(childComplexity), true
	case "UserResponseDeleteAt.email":
		if e.complexity.UserResponseDeleteAt.Email == nil {
			break
		}

		return e.complexity.UserResponseDeleteAt.Email(childComplexity), true
	case "UserResponseDeleteAt.firstname":
		if e.complexity.UserResponseDeleteAt.Firstname == nil {
			break
		}

		return e.complexity.UserResponseDeleteAt.Firstname(childComplexity), true
	case "UserResponseDeleteAt.id":
		if e.complexity.UserResponseDeleteAt.ID == nil {
			break
		}

		return e.complexity.UserResponseDeleteAt.ID(childComplexity), true
	case "UserResponseDeleteAt.lastname":
		if e.complexity.UserResponseDeleteAt.Lastname == nil {
			break
		}

		return e.complexity.UserResponseDeleteAt.Lastname(childComplexity), true
	case "UserResponseDeleteAt.updated_at":
		if e.complexity.UserResponseDeleteAt.UpdatedAt == nil {
			break
		}

		return e.complexity.UserResponseDeleteAt.UpdatedAt(childComplexity), true

	case "WithdrawMonthStatusFailedResponse.month":
		if e.complexity.WithdrawMonthStatusFailedResponse.Month == nil {
			break
		}

		return e.complexity.WithdrawMonthStatusFailedResponse.Month(childComplexity), true
	case "WithdrawMonthStatusFailedResponse.totalAmount":
		if e.complexity.WithdrawMonthStatusFailedResponse.TotalAmount == nil {
			break
		}

		return e.complexity.WithdrawMonthStatusFailedResponse.TotalAmount(childComplexity), true
	case "WithdrawMonthStatusFailedResponse.totalFailed":
		if e.complexity.WithdrawMonthStatusFailedResponse.TotalFailed == nil {
			break
		}

		return e.complexity.WithdrawMonthStatusFailedResponse.TotalFailed(childComplexity), true
	case "WithdrawMonthStatusFailedResponse.year":
		if e.complexity.WithdrawMonthStatusFailedResponse.Year == nil {
			break
		}

		return e.complexity.WithdrawMonthStatusFailedResponse.Year(childComplexity), true

	case "WithdrawMonthStatusSuccessResponse.month":
		if e.complexity.WithdrawMonthStatusSuccessResponse.Month == nil {
			break
		}

		return e.complexity.WithdrawMonthStatusSuccessResponse.Month(childComplexity), true
	case "WithdrawMonthStatusSuccessResponse.totalAmount":
		if e.complexity.WithdrawMonthStatusSuccessResponse.TotalAmount == nil {
			break
		}

		return e.complexity.WithdrawMonthStatusSuccessResponse.TotalAmount(childComplexity), true
	case "WithdrawMonthStatusSuccessResponse.totalSuccess":
		if e.complexity.WithdrawMonthStatusSuccessResponse.TotalSuccess == nil {
			break
		}

		return e.complexity.WithdrawMonthStatusSuccessResponse.TotalSuccess(childComplexity), true
	case "WithdrawMonthStatusSuccessResponse.year":
		if e.complexity.WithdrawMonthStatusSuccessResponse.Year == nil {
			break
		}

		return e.complexity.WithdrawMonthStatusSuccessResponse.Year(childComplexity), true

	case "WithdrawMonthlyAmountResponse.month":
		if e.complexity.WithdrawMonthlyAmountResponse.Month == nil {
			break
		}

		return e.complexity.WithdrawMonthlyAmountResponse.Month(childComplexity), true
	case "WithdrawMonthlyAmountResponse.totalAmount":
		if e.complexity.WithdrawMonthlyAmountResponse.TotalAmount == nil {
			break
		}

		return e.complexity.WithdrawMonthlyAmountResponse.TotalAmount(childComplexity), true

	case "WithdrawResponse.cardNumber":
		if e.complexity.WithdrawResponse.CardNumber == nil {
			break
		}

		return e.complexity.WithdrawResponse.CardNumber(childComplexity), true
	case "WithdrawResponse.createdAt":
		if e.complexity.WithdrawResponse.CreatedAt == nil {
			break
		}

		return e.complexity.WithdrawResponse.CreatedAt(childComplexity), true
	case "WithdrawResponse.id":
		if e.complexity.WithdrawResponse.ID == nil {
			break
		}

		return e.complexity.WithdrawResponse.ID(childComplexity), true
	case "WithdrawResponse.updatedAt":
		if e.complexity.WithdrawResponse.UpdatedAt == nil {
			break
		}

		return e.complexity.WithdrawResponse.UpdatedAt(childComplexity), true
	case "WithdrawResponse.withdrawAmount":
		if e.complexity.WithdrawResponse.WithdrawAmount == nil {
			break
		}

		return e.complexity.WithdrawResponse.WithdrawAmount(childComplexity), true
	case "WithdrawResponse.withdrawNo":
		if e.complexity.WithdrawResponse.WithdrawNo == nil {
			break
		}

		return e.complexity.WithdrawResponse.WithdrawNo(childComplexity), true
	case "WithdrawResponse.withdrawTime":
		if e.complexity.WithdrawResponse.WithdrawTime == nil {
			break
		}

		return e.complexity.WithdrawResponse.WithdrawTime(childComplexity), true

	case "WithdrawResponseDeleteAt.cardNumber":
		if e.complexity.WithdrawResponseDeleteAt.CardNumber == nil {
			break
		}

		return e.complexity.WithdrawResponseDeleteAt.CardNumber(childComplexity), true
	case "WithdrawResponseDeleteAt.createdAt":
		if e.complexity.WithdrawResponseDeleteAt.CreatedAt == nil {
			break
		}

		return e.complexity.WithdrawResponseDeleteAt.CreatedAt(childComplexity), true
	case "WithdrawResponseDeleteAt.deletedAt":
		if e.complexity.WithdrawResponseDeleteAt.DeletedAt == nil {
			break
		}

		return e.complexity.WithdrawResponseDeleteAt.DeletedAt(childComplexity), true
	case "WithdrawResponseDeleteAt.id":
		if e.complexity.WithdrawResponseDeleteAt.ID == nil {
			break
		}

		return e.complexity.WithdrawResponseDeleteAt.ID(childComplexity), true
	case "WithdrawResponseDeleteAt.updatedAt":
		if e.complexity.WithdrawResponseDeleteAt.UpdatedAt == nil {
			break
		}

		return e.complexity.WithdrawResponseDeleteAt.UpdatedAt(childComplexity), true
	case "WithdrawResponseDeleteAt.withdrawAmount":
		if e.complexity.WithdrawResponseDeleteAt.WithdrawAmount == nil {
			break
		}

		return e.complexity.WithdrawResponseDeleteAt.WithdrawAmount(childComplexity), true
	case "WithdrawResponseDeleteAt.withdrawNo":
		if e.complexity.WithdrawResponseDeleteAt.WithdrawNo == nil {
			break
		}

		return e.complexity.WithdrawResponseDeleteAt.WithdrawNo(childComplexity), true
	case "WithdrawResponseDeleteAt.withdrawTime":
		if e.complexity.WithdrawResponseDeleteAt.WithdrawTime == nil {
			break
		}

		return e.complexity.WithdrawResponseDeleteAt.WithdrawTime(childComplexity), true

	case "WithdrawYearStatusFailedResponse.totalAmount":
		if e.complexity.WithdrawYearStatusFailedResponse.TotalAmount == nil {
			break
		}

		return e.complexity.WithdrawYearStatusFailedResponse.TotalAmount(childComplexity), true
	case "WithdrawYearStatusFailedResponse.totalFailed":
		if e.complexity.WithdrawYearStatusFailedResponse.TotalFailed == nil {
			break
		}

		return e.complexity.WithdrawYearStatusFailedResponse.TotalFailed(childComplexity), true
	case "WithdrawYearStatusFailedResponse.year":
		if e.complexity.WithdrawYearStatusFailedResponse.Year == nil {
			break
		}

		return e.complexity.WithdrawYearStatusFailedResponse.Year(childComplexity), true

	case "WithdrawYearStatusSuccessResponse.totalAmount":
		if e.complexity.WithdrawYearStatusSuccessResponse.TotalAmount == nil {
			break
		}

		return e.complexity.WithdrawYearStatusSuccessResponse.TotalAmount(childComplexity), true
	case "WithdrawYearStatusSuccessResponse.totalSuccess":
		if e.complexity.WithdrawYearStatusSuccessResponse.TotalSuccess == nil {
			break
		}

		return e.complexity.WithdrawYearStatusSuccessResponse.TotalSuccess(childComplexity), true
	case "WithdrawYearStatusSuccessResponse.year":
		if e.complexity.WithdrawYearStatusSuccessResponse.Year == nil {
			break
		}

		return e.complexity.WithdrawYearStatusSuccessResponse.Year(childComplexity), true

	case "WithdrawYearlyAmountResponse.totalAmount":
		if e.complexity.WithdrawYearlyAmountResponse.TotalAmount == nil {
			break
		}

		return e.complexity.WithdrawYearlyAmountResponse.TotalAmount(childComplexity), true
	case "WithdrawYearlyAmountResponse.year":
		if e.complexity.WithdrawYearlyAmountResponse.Year == nil {
			break
		}

		return e.complexity.WithdrawYearlyAmountResponse.Year(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCreateCardInput,
		ec.unmarshalInputCreateMerchantInput,
		ec.unmarshalInputCreateRoleInput,
		ec.unmarshalInputCreateSaldoInput,
		ec.unmarshalInputCreateTopupInput,
		ec.unmarshalInputCreateTransactionRequest,
		ec.unmarshalInputCreateTransferRequest,
		ec.unmarshalInputCreateUserInput,
		ec.unmarshalInputCreateWithdrawInput,
		ec.unmarshalInputFindAllCardInput,
		ec.unmarshalInputFindAllMerchantApikeyInput,
		ec.unmarshalInputFindAllMerchantInput,
		ec.unmarshalInputFindAllMerchantTransactionInput,
		ec.unmarshalInputFindAllRoleInput,
		ec.unmarshalInputFindAllSaldoInput,
		ec.unmarshalInputFindAllTopupByCardNumberInput,
		ec.unmarshalInputFindAllTopupInput,
		ec.unmarshalInputFindAllTransactionCardNumberRequest,
		ec.unmarshalInputFindAllTransactionRequest,
		ec.unmarshalInputFindAllTransferRequest,
		ec.unmarshalInputFindAllUserInput,
		ec.unmarshalInputFindAllWithdrawByCardNumberInput,
		ec.unmarshalInputFindAllWithdrawInput,
		ec.unmarshalInputFindByApiKeyInput,
		ec.unmarshalInputFindByCardNumberInput,
		ec.unmarshalInputFindByCardNumberTransferRequest,
		ec.unmarshalInputFindByIdCardInput,
		ec.unmarshalInputFindByIdMerchantInput,
		ec.unmarshalInputFindByIdRoleInput,
		ec.unmarshalInputFindByIdSaldoInput,
		ec.unmarshalInputFindByIdTopupInput,
		ec.unmarshalInputFindByIdTransactionRequest,
		ec.unmarshalInputFindByIdTransferRequest,
		ec.unmarshalInputFindByIdUserInput,
		ec.unmarshalInputFindByIdUserRoleInput,
		ec.unmarshalInputFindByIdWithdrawInput,
		ec.unmarshalInputFindByMerchantUserIdInput,
		ec.unmarshalInputFindByUserIdCardInput,
		ec.unmarshalInputFindByYearCardNumberTransactionRequest,
		ec.unmarshalInputFindMonthlySaldoTotalBalanceInput,
		ec.unmarshalInputFindMonthlyTopupStatusCardNumberInput,
		ec.unmarshalInputFindMonthlyTopupStatusInput,
		ec.unmarshalInputFindMonthlyTransactionStatus,
		ec.unmarshalInputFindMonthlyTransactionStatusCardNumber,
		ec.unmarshalInputFindMonthlyTransferStatus,
		ec.unmarshalInputFindMonthlyTransferStatusCardNumber,
		ec.unmarshalInputFindMonthlyWithdrawStatusCardNumberInput,
		ec.unmarshalInputFindMonthlyWithdrawStatusInput,
		ec.unmarshalInputFindTransactionByMerchantIdRequest,
		ec.unmarshalInputFindTransferByTransferFromRequest,
		ec.unmarshalInputFindTransferByTransferToRequest,
		ec.unmarshalInputFindYearAmountCardNumberInput,
		ec.unmarshalInputFindYearAmountInput,
		ec.unmarshalInputFindYearBalanceCardNumberInput,
		ec.unmarshalInputFindYearBalanceInput,
		ec.unmarshalInputFindYearMerchantByApikeyInput,
		ec.unmarshalInputFindYearMerchantByIdInput,
		ec.unmarshalInputFindYearMerchantInput,
		ec.unmarshalInputFindYearTopupCardNumberInput,
		ec.unmarshalInputFindYearTopupStatusCardNumberInput,
		ec.unmarshalInputFindYearTopupStatusInput,
		ec.unmarshalInputFindYearTransactionStatus,
		ec.unmarshalInputFindYearTransactionStatusCardNumber,
		ec.unmarshalInputFindYearTransferStatus,
		ec.unmarshalInputFindYearTransferStatusCardNumber,
		ec.unmarshalInputFindYearWithdrawCardNumberInput,
		ec.unmarshalInputFindYearWithdrawStatusCardNumberInput,
		ec.unmarshalInputFindYearWithdrawStatusInput,
		ec.unmarshalInputFindYearlySaldoInput,
		ec.unmarshalInputGetMeInput,
		ec.unmarshalInputLoginInput,
		ec.unmarshalInputRefreshTokenInput,
		ec.unmarshalInputRegisterInput,
		ec.unmarshalInputUpdateCardInput,
		ec.unmarshalInputUpdateMerchantInput,
		ec.unmarshalInputUpdateRoleInput,
		ec.unmarshalInputUpdateSaldoInput,
		ec.unmarshalInputUpdateTopupInput,
		ec.unmarshalInputUpdateTransactionRequest,
		ec.unmarshalInputUpdateTransferRequest,
		ec.unmarshalInputUpdateUserInput,
		ec.unmarshalInputUpdateWithdrawInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../pkg/graphql/auth.graphqls", Input: `input RegisterInput {
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  confirm_password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input RefreshTokenInput {
  refresh_token: String!
}

input GetMeInput {
  access_token: String!
}

type TokenResponse {
  access_token: String!
  refresh_token: String!
}

type ApiResponseLogin {
  status: String!
  message: String!
  data: TokenResponse
}

type ApiResponseRefreshToken {
  status: String!
  message: String!
  data: TokenResponse
}

type ApiResponseRegister {
  status: String!
  message: String!
  data: UserResponse
}

type ApiResponseGetMe {
  status: String!
  message: String!
  data: UserResponse
}

type Mutation {
  registerUser(input: RegisterInput!): ApiResponseRegister!
  loginUser(input: LoginInput!): ApiResponseLogin!
  refreshToken(input: RefreshTokenInput!): ApiResponseRefreshToken!
}

type Query {
  getMe: ApiResponseGetMe!
}
`, BuiltIn: false},
	{Name: "../../pkg/graphql/card.graphqls", Input: `input FindAllCardInput {
  page: Int
  page_size: Int
  search: String
}

input FindByIdCardInput {
  card_id: Int!
}

input FindByUserIdCardInput {
  user_id: Int!
}

input FindByCardNumberInput {
  card_number: String!
}

input FindYearBalanceInput {
  year: Int!
}

input FindYearBalanceCardNumberInput {
  year: Int!
  card_number: String!
}

input FindYearAmountInput {
  year: Int!
}

input FindYearAmountCardNumberInput {
  year: Int!
  card_number: String!
}

input CreateCardInput {
  user_id: Int!
  card_type: String!
  expire_date: String!
  cvv: String!
  card_provider: String!
}

input UpdateCardInput {
  id: Int!
  user_id: Int!
  card_type: String!
  expire_date: String!
  cvv: String!
  card_provider: String!
}

type CardResponse {
  id: Int!
  user_id: Int!
  card_number: String!
  card_type: String!
  expire_date: String!
  cvv: String!
  card_provider: String!
  created_at: String!
  updated_at: String!
}

type CardResponseDeleteAt {
  id: Int!
  user_id: Int!
  card_number: String!
  card_type: String!
  expire_date: String!
  cvv: String!
  card_provider: String!
  created_at: String!
  updated_at: String!
  deleted_at: String
}

type CardDashboardResponse {
  total_balance: Int!
  total_topup: Int!
  total_withdraw: Int!
  total_transaction: Int!
  total_transfer: Int!
}

type CardDashboardByNumberResponse {
  total_balance: Int!
  total_topup: Int!
  total_withdraw: Int!
  total_transaction: Int!
  total_transfer_send: Int!
  total_transfer_receiver: Int!
}

type CardMonthlyBalanceResponse {
  month: String!
  total_balance: Int!
}

type CardYearlyBalanceResponse {
  year: String!
  total_balance: Int!
}

type CardMonthlyAmountResponse {
  month: String!
  total_amount: Int!
}

type CardYearlyAmountResponse {
  year: String!
  total_amount: Int!
}

type ApiResponseCard {
  status: String!
  message: String!
  data: CardResponse
}

type ApiResponseCardDeleteAt {
  status: String!
  message: String!
  data: CardResponseDeleteAt
}

type ApiResponsePaginationCard {
  status: String!
  message: String!
  data: [CardResponse!]!
  pagination: PaginationMeta!
}

type ApiResponsePaginationCardDeleteAt {
  status: String!
  message: String!
  data: [CardResponseDeleteAt!]!
  pagination: PaginationMeta!
}

type ApiResponseDashboardCard {
  status: String!
  message: String!
  data: CardDashboardResponse
}

type ApiResponseDashboardCardNumber {
  status: String!
  message: String!
  data: CardDashboardByNumberResponse
}

type ApiResponseMonthlyBalance {
  status: String!
  message: String!
  data: [CardMonthlyBalanceResponse!]!
}

type ApiResponseYearlyBalance {
  status: String!
  message: String!
  data: [CardYearlyBalanceResponse!]!
}

type ApiResponseMonthlyAmount {
  status: String!
  message: String!
  data: [CardMonthlyAmountResponse!]!
}

type ApiResponseYearlyAmount {
  status: String!
  message: String!
  data: [CardYearlyAmountResponse!]!
}

type ApiResponseCardAll {
  status: String!
  message: String!
}

type ApiResponseCardDelete {
  status: String!
  message: String!
}

extend type Query {
  findAllCard(input: FindAllCardInput): ApiResponsePaginationCard!
  findByIdCard(input: FindByIdCardInput!): ApiResponseCard!
  findByUserIdCard(input: FindByUserIdCardInput!): ApiResponseCard!
  findByActiveCard(input: FindAllCardInput): ApiResponsePaginationCardDeleteAt!
  findByTrashedCard(input: FindAllCardInput): ApiResponsePaginationCardDeleteAt!
  findByCardNumberCard(input: FindByCardNumberInput!): ApiResponseCard!

  dashboardCard: ApiResponseDashboardCard!
  dashboardCardNumber(
    input: FindByCardNumberInput!
  ): ApiResponseDashboardCardNumber!

  findMonthlyBalance(input: FindYearBalanceInput!): ApiResponseMonthlyBalance!
  findYearlyBalance(input: FindYearBalanceInput!): ApiResponseYearlyBalance!

  findMonthlyTopupAmount(input: FindYearAmountInput!): ApiResponseMonthlyAmount!
  findYearlyTopupAmount(input: FindYearAmountInput!): ApiResponseYearlyAmount!

  findMonthlyWithdrawAmount(
    input: FindYearAmountInput!
  ): ApiResponseMonthlyAmount!
  findYearlyWithdrawAmount(
    input: FindYearAmountInput!
  ): ApiResponseYearlyAmount!

  findMonthlyTransactionAmount(
    input: FindYearAmountInput!
  ): ApiResponseMonthlyAmount!
  findYearlyTransactionAmount(
    input: FindYearAmountInput!
  ): ApiResponseYearlyAmount!

  findMonthlyTransferSenderAmount(
    input: FindYearAmountInput!
  ): ApiResponseMonthlyAmount!
  findYearlyTransferSenderAmount(
    input: FindYearAmountInput!
  ): ApiResponseYearlyAmount!

  findMonthlyTransferReceiverAmount(
    input: FindYearAmountInput!
  ): ApiResponseMonthlyAmount!
  findYearlyTransferReceiverAmount(
    input: FindYearAmountInput!
  ): ApiResponseYearlyAmount!

  findMonthlyBalanceByCardNumber(
    input: FindYearBalanceCardNumberInput!
  ): ApiResponseMonthlyBalance!
  findYearlyBalanceByCardNumber(
    input: FindYearBalanceCardNumberInput!
  ): ApiResponseYearlyBalance!

  findMonthlyTopupAmountByCardNumber(
    input: FindYearAmountCardNumberInput!
  ): ApiResponseMonthlyAmount!
  findYearlyTopupAmountByCardNumber(
    input: FindYearAmountCardNumberInput!
  ): ApiResponseYearlyAmount!

  findMonthlyWithdrawAmountByCardNumber(
    input: FindYearAmountCardNumberInput!
  ): ApiResponseMonthlyAmount!
  findYearlyWithdrawAmountByCardNumber(
    input: FindYearAmountCardNumberInput!
  ): ApiResponseYearlyAmount!

  findMonthlyTransactionAmountByCardNumber(
    input: FindYearAmountCardNumberInput!
  ): ApiResponseMonthlyAmount!
  findYearlyTransactionAmountByCardNumber(
    input: FindYearAmountCardNumberInput!
  ): ApiResponseYearlyAmount!

  findMonthlyTransferSenderAmountByCardNumber(
    input: FindYearAmountCardNumberInput!
  ): ApiResponseMonthlyAmount!
  findYearlyTransferSenderAmountByCardNumber(
    input: FindYearAmountCardNumberInput!
  ): ApiResponseYearlyAmount!

  findMonthlyTransferReceiverAmountByCardNumber(
    input: FindYearAmountCardNumberInput!
  ): ApiResponseMonthlyAmount!
  findYearlyTransferReceiverAmountByCardNumber(
    input: FindYearAmountCardNumberInput!
  ): ApiResponseYearlyAmount!
}

extend type Mutation {
  createCard(input: CreateCardInput!): ApiResponseCard!
  updateCard(input: UpdateCardInput!): ApiResponseCard!
  trashedCard(input: FindByIdCardInput!): ApiResponseCardDeleteAt!
  restoreCard(input: FindByIdCardInput!): ApiResponseCardDeleteAt!
  deleteCardPermanent(input: FindByIdCardInput!): ApiResponseCardDelete!
  restoreAllCard: ApiResponseCardAll!
  deleteAllCardPermanent: ApiResponseCardAll!
}
`, BuiltIn: false},
	{Name: "../../pkg/graphql/common.graphqls", Input: `type PaginationMeta {
  current_page: Int!
  page_size: Int!
  total_pages: Int!
  total_records: Int!
}
`, BuiltIn: false},
	{Name: "../../pkg/graphql/merchant.graphqls", Input: `input CreateMerchantInput {
  name: String!
  userId: Int!
}

input UpdateMerchantInput {
  merchantId: Int!
  name: String
  userId: Int
  status: String
}

input FindAllMerchantInput {
  page: Int
  pageSize: Int
  search: String
}

input FindAllMerchantTransactionInput {
  page: Int
  pageSize: Int
  search: String
  merchantId: Int
}

input FindAllMerchantApikeyInput {
  page: Int
  pageSize: Int
  search: String
  apiKey: String
}

input FindByIdMerchantInput {
  id: Int!
}

input FindByApiKeyInput {
  apiKey: String!
}

input FindByMerchantUserIdInput {
  userId: Int!
}

input FindYearMerchantInput {
  year: Int!
}

input FindYearMerchantByIdInput {
  year: Int!
  merchantId: Int!
}

input FindYearMerchantByApikeyInput {
  year: Int!
  apiKey: String!
}

type MerchantResponse {
  id: Int!
  name: String!
  apiKey: String!
  status: String!
  userId: Int!
  createdAt: String!
  updatedAt: String!
}

type MerchantResponseDeleteAt {
  id: Int!
  name: String!
  apiKey: String!
  status: String!
  userId: Int!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
}

type MerchantTransactionResponse {
  id: Int!
  cardNumber: String!
  amount: Int!
  paymentMethod: String!
  merchantId: Int!
  merchantName: String!
  transactionTime: String!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type MerchantMonthlyPaymentMethodResponse {
  month: String!
  paymentMethod: String!
  totalAmount: Int!
}

type MerchantYearlyPaymentMethodResponse {
  year: String!
  paymentMethod: String!
  totalAmount: Int!
}

type MerchantMonthlyAmountResponse {
  month: String!
  totalAmount: Int!
}

type MerchantYearlyAmountResponse {
  year: String!
  totalAmount: Int!
}

type MerchantMonthlyTotalAmountResponse {
  month: String!
  year: String!
  totalAmount: Int!
}

type MerchantYearlyTotalAmountResponse {
  year: String!
  totalAmount: Int!
}

type ApiResponseMerchant {
  status: String!
  message: String!
  data: MerchantResponse
}

type ApiResponseMerchantDeleteAt {
  status: String!
  message: String!
  data: MerchantResponseDeleteAt
}

type ApiResponsesMerchant {
  status: String!
  message: String!
  data: [MerchantResponse!]!
}

type ApiResponseMerchantPagination {
  status: String!
  message: String!
  data: [MerchantResponse!]!
  pagination: PaginationMeta
}

type ApiResponseMerchantDeleteAtPagination {
  status: String!
  message: String!
  data: [MerchantResponseDeleteAt!]!
  pagination: PaginationMeta
}

type ApiResponseMerchantTransactionPagination {
  status: String!
  message: String!
  data: [MerchantTransactionResponse!]!
  pagination: PaginationMeta
}

type ApiResponseMerchantMonthlyPaymentMethod {
  status: String!
  message: String!
  data: [MerchantMonthlyPaymentMethodResponse!]!
}

type ApiResponseMerchantYearlyPaymentMethod {
  status: String!
  message: String!
  data: [MerchantYearlyPaymentMethodResponse!]!
}

type ApiResponseMerchantMonthlyAmount {
  status: String!
  message: String!
  data: [MerchantMonthlyAmountResponse!]!
}

type ApiResponseMerchantYearlyAmount {
  status: String!
  message: String!
  data: [MerchantYearlyAmountResponse!]!
}

type ApiResponseMerchantMonthlyTotalAmount {
  status: String!
  message: String!
  data: [MerchantMonthlyTotalAmountResponse!]!
}

type ApiResponseMerchantYearlyTotalAmount {
  status: String!
  message: String!
  data: [MerchantYearlyTotalAmountResponse!]!
}

type ApiResponseMerchantDelete {
  status: String!
  message: String!
}

type ApiResponseMerchantAll {
  status: String!
  message: String!
}

extend type Query {
  findAllMerchant(input: FindAllMerchantInput): ApiResponseMerchantPagination!
  findByIdMerchant(input: FindByIdMerchantInput!): ApiResponseMerchant!
  findByApiKey(input: FindByApiKeyInput!): ApiResponseMerchant!

  findAllTransactionMerchant(
    input: FindAllMerchantInput
  ): ApiResponseMerchantTransactionPagination!
  findAllTransactionByMerchant(
    input: FindAllMerchantTransactionInput
  ): ApiResponseMerchantTransactionPagination!
  findAllTransactionByApikey(
    input: FindAllMerchantApikeyInput
  ): ApiResponseMerchantTransactionPagination!

  findByMerchantUserId(input: FindByMerchantUserIdInput!): ApiResponsesMerchant!
  findByActive(
    input: FindAllMerchantInput
  ): ApiResponseMerchantDeleteAtPagination!
  findByTrashed(
    input: FindAllMerchantInput
  ): ApiResponseMerchantDeleteAtPagination!

  findMonthlyPaymentMethodsMerchant(
    input: FindYearMerchantInput!
  ): ApiResponseMerchantMonthlyPaymentMethod!
  findYearlyPaymentMethodMerchant(
    input: FindYearMerchantInput!
  ): ApiResponseMerchantYearlyPaymentMethod!
  findMonthlyAmountMerchant(
    input: FindYearMerchantInput!
  ): ApiResponseMerchantMonthlyAmount!
  findYearlyAmountMerchant(
    input: FindYearMerchantInput!
  ): ApiResponseMerchantYearlyAmount!
  findMonthlyTotalAmountMerchant(
    input: FindYearMerchantInput!
  ): ApiResponseMerchantMonthlyTotalAmount!
  findYearlyTotalAmountMerchant(
    input: FindYearMerchantInput!
  ): ApiResponseMerchantYearlyTotalAmount!

  findMonthlyPaymentMethodByMerchants(
    input: FindYearMerchantByIdInput!
  ): ApiResponseMerchantMonthlyPaymentMethod!
  findYearlyPaymentMethodByMerchants(
    input: FindYearMerchantByIdInput!
  ): ApiResponseMerchantYearlyPaymentMethod!
  findMonthlyAmountByMerchants(
    input: FindYearMerchantByIdInput!
  ): ApiResponseMerchantMonthlyAmount!
  findYearlyAmountByMerchants(
    input: FindYearMerchantByIdInput!
  ): ApiResponseMerchantYearlyAmount!
  findMonthlyTotalAmountByMerchants(
    input: FindYearMerchantByIdInput!
  ): ApiResponseMerchantMonthlyTotalAmount!
  findYearlyTotalAmountByMerchants(
    input: FindYearMerchantByIdInput!
  ): ApiResponseMerchantYearlyTotalAmount!

  findMonthlyPaymentMethodByApikey(
    input: FindYearMerchantByApikeyInput!
  ): ApiResponseMerchantMonthlyPaymentMethod!
  findYearlyPaymentMethodByApikey(
    input: FindYearMerchantByApikeyInput!
  ): ApiResponseMerchantYearlyPaymentMethod!
  findMonthlyAmountByApikey(
    input: FindYearMerchantByApikeyInput!
  ): ApiResponseMerchantMonthlyAmount!
  findYearlyAmountByApikey(
    input: FindYearMerchantByApikeyInput!
  ): ApiResponseMerchantYearlyAmount!
  findMonthlyTotalAmountByApikey(
    input: FindYearMerchantByApikeyInput!
  ): ApiResponseMerchantMonthlyTotalAmount!
  findYearlyTotalAmountByApikey(
    input: FindYearMerchantByApikeyInput!
  ): ApiResponseMerchantYearlyTotalAmount!
}

extend type Mutation {
  createMerchant(input: CreateMerchantInput!): ApiResponseMerchant!
  updateMerchant(input: UpdateMerchantInput!): ApiResponseMerchant!
  trashedMerchant(input: FindByIdMerchantInput!): ApiResponseMerchantDeleteAt!
  restoreMerchant(input: FindByIdMerchantInput!): ApiResponseMerchantDeleteAt!
  deleteMerchantPermanent(
    input: FindByIdMerchantInput!
  ): ApiResponseMerchantDelete!
  restoreAllMerchant: ApiResponseMerchantAll!
  deleteAllMerchantPermanent: ApiResponseMerchantAll!
}
`, BuiltIn: false},
	{Name: "../../pkg/graphql/role.graphqls", Input: `input FindAllRoleInput {
  page: Int
  page_size: Int
  search: String
}

input FindByIdRoleInput {
  role_id: Int!
}

input FindByIdUserRoleInput {
  user_id: Int!
}

input CreateRoleInput {
  name: String!
}

input UpdateRoleInput {
  id: Int!
  name: String!
}

type RoleResponse {
  id: Int!
  name: String!
  created_at: String!
  updated_at: String!
}

type RoleResponseDeleteAt {
  id: Int!
  name: String!
  created_at: String!
  updated_at: String!
  deleted_at: String
}

type ApiResponseRoleAll {
  status: String!
  message: String!
}

type ApiResponseRoleDelete {
  status: String!
  message: String!
}

type ApiResponseRole {
  status: String!
  message: String!
  data: RoleResponse
}

type ApiResponseRoleDeleteAt {
  status: String!
  message: String!
  data: RoleResponseDeleteAt
}

type ApiResponsesRole {
  status: String!
  message: String!
  data: [RoleResponse!]
}

type ApiResponsePaginationRole {
  status: String!
  message: String!
  data: [RoleResponse!]
  pagination: PaginationMeta
}

type ApiResponsePaginationRoleDeleteAt {
  status: String!
  message: String!
  data: [RoleResponseDeleteAt!]
  pagination: PaginationMeta
}

extend type Query {
  findAllRole(input: FindAllRoleInput): ApiResponsePaginationRole
  findByIdRole(input: FindByIdRoleInput!): ApiResponseRole

  findByActiveRole(input: FindAllRoleInput): ApiResponsePaginationRoleDeleteAt
  findByTrashedRole(input: FindAllRoleInput): ApiResponsePaginationRoleDeleteAt

  findByUserIdRole(input: FindByIdUserRoleInput!): ApiResponsesRole
}

extend type Mutation {
  createRole(input: CreateRoleInput!): ApiResponseRole
  updateRole(input: UpdateRoleInput!): ApiResponseRole
  trashedRole(input: FindByIdRoleInput!): ApiResponseRoleDeleteAt
  restoreRole(input: FindByIdRoleInput!): ApiResponseRoleDeleteAt
  deleteRolePermanent(input: FindByIdRoleInput!): ApiResponseRoleDelete

  restoreAllRole: ApiResponseRoleAll
  deleteAllRolePermanent: ApiResponseRoleAll
}
`, BuiltIn: false},
	{Name: "../../pkg/graphql/saldo.graphqls", Input: `input FindAllSaldoInput {
  page: Int
  page_size: Int
  search: String
}

input FindByIdSaldoInput {
  id: Int!
}

input FindMonthlySaldoTotalBalanceInput {
  year: Int!
  month: Int!
}

input FindYearlySaldoInput {
  year: Int!
}

input CreateSaldoInput {
  card_number: String!
  total_balance: Int!
}

input UpdateSaldoInput {
  id: Int!
  card_number: String
  total_balance: Int
}

type SaldoResponse {
  id: Int!
  card_number: String!
  total_balance: Int!
  withdraw_time: String
  withdraw_amount: Int
  created_at: String!
  updated_at: String!
}

type SaldoResponseDeleteAt {
  id: Int!
  card_number: String!
  total_balance: Int!
  withdraw_time: String
  withdraw_amount: Int
  created_at: String!
  updated_at: String!
  deleted_at: String
}

type SaldoMonthTotalBalanceResponse {
  month: String!
  year: String!
  total_balance: Int!
}

type SaldoYearTotalBalanceResponse {
  year: String!
  total_balance: Int!
}

type SaldoMonthBalanceResponse {
  month: String!
  total_balance: Int!
}

type SaldoYearBalanceResponse {
  year: String!
  total_balance: Int!
}

type ApiResponseSaldoResponse {
  status: String!
  message: String!
  data: SaldoResponse
}

type ApiResponseSaldoResponseDeleteAt {
  status: String!
  message: String!
  data: SaldoResponseDeleteAt
}

type ApiResponsesSaldo {
  status: String!
  message: String!
  data: [SaldoResponse!]
}

type ApiResponseSaldoDelete {
  status: String!
  message: String!
}

type ApiResponseSaldoAll {
  status: String!
  message: String!
}

type ApiResponseMonthTotalSaldo {
  status: String!
  message: String!
  data: [SaldoMonthTotalBalanceResponse!]
}

type ApiResponseYearTotalSaldo {
  status: String!
  message: String!
  data: [SaldoYearTotalBalanceResponse!]
}

type ApiResponseMonthSaldoBalances {
  status: String!
  message: String!
  data: [SaldoMonthBalanceResponse]
}

type ApiResponseYearSaldoBalances {
  status: String!
  message: String!
  data: [SaldoYearBalanceResponse!]
}

type ApiResponsePaginationSaldo {
  status: String!
  message: String!
  data: [SaldoResponse!]
  pagination: PaginationMeta
}

type ApiResponsePaginationSaldoDeleteAt {
  status: String!
  message: String!
  data: [SaldoResponseDeleteAt!]
  pagination: PaginationMeta
}

extend type Query {
  findAllSaldo(input: FindAllSaldoInput): ApiResponsePaginationSaldo
  findByIdSaldo(input: FindByIdSaldoInput!): ApiResponseSaldoResponse

  findMonthlyTotalSaldoBalance(
    input: FindMonthlySaldoTotalBalanceInput!
  ): ApiResponseMonthTotalSaldo
  findYearTotalSaldoBalance(
    input: FindYearlySaldoInput!
  ): ApiResponseYearTotalSaldo
  findMonthlySaldoBalances(
    input: FindYearlySaldoInput!
  ): ApiResponseMonthSaldoBalances
  findYearlySaldoBalances(
    input: FindYearlySaldoInput!
  ): ApiResponseYearSaldoBalances

  findByCardNumberSaldo(card_number: String!): ApiResponseSaldoResponse

  findByActiveSaldo(
    input: FindAllSaldoInput
  ): ApiResponsePaginationSaldoDeleteAt
  findByTrashedSaldo(
    input: FindAllSaldoInput
  ): ApiResponsePaginationSaldoDeleteAt
}

extend type Mutation {
  createSaldo(input: CreateSaldoInput!): ApiResponseSaldoResponse
  updateSaldo(input: UpdateSaldoInput!): ApiResponseSaldoResponse
  trashedSaldo(input: FindByIdSaldoInput!): ApiResponseSaldoResponseDeleteAt
  restoreSaldo(input: FindByIdSaldoInput!): ApiResponseSaldoResponseDeleteAt
  deleteSaldoPermanent(input: FindByIdSaldoInput!): ApiResponseSaldoDelete

  restoreAllSaldo: ApiResponseSaldoAll
  deleteAllSaldoPermanent: ApiResponseSaldoAll
}
`, BuiltIn: false},
	{Name: "../../pkg/graphql/topup.graphqls", Input: `input FindAllTopupInput {
  page: Int
  page_size: Int
  search: String
}

input FindAllTopupByCardNumberInput {
  card_number: String!
  page: Int
  page_size: Int
  search: String
}

input FindByIdTopupInput {
  topup_id: Int!
}

input FindMonthlyTopupStatusInput {
  year: Int!
  month: Int!
}

input FindYearTopupStatusInput {
  year: Int!
}

input FindMonthlyTopupStatusCardNumberInput {
  card_number: String!
  year: Int!
  month: Int!
}

input FindYearTopupStatusCardNumberInput {
  card_number: String!
  year: Int!
}

input FindYearTopupCardNumberInput {
  card_number: String!
  year: Int!
}

input CreateTopupInput {
  card_number: String!
  topup_no: String!
  topup_amount: Int!
  topup_method: String!
}

input UpdateTopupInput {
  topup_id: Int!
  card_number: String
  topup_amount: Int
  topup_method: String
}

type TopupResponse {
  id: Int!
  card_number: String!
  topup_no: String!
  topup_amount: Int!
  topup_method: String!
  topup_time: String
  created_at: String!
  updated_at: String!
}

type TopupResponseDeleteAt {
  id: Int!
  card_number: String!
  topup_no: String!
  topup_amount: Int!
  topup_method: String!
  topup_time: String
  created_at: String!
  updated_at: String!
  deleted_at: String
}

type TopupMonthStatusSuccessResponse {
  year: String!
  month: String!
  total_success: Int!
  total_amount: Int!
}

type TopupYearStatusSuccessResponse {
  year: String!
  total_success: Int!
  total_amount: Int!
}

type TopupMonthStatusFailedResponse {
  year: String!
  month: String!
  total_failed: Int!
  total_amount: Int!
}

type TopupYearStatusFailedResponse {
  year: String!
  total_failed: Int!
  total_amount: Int!
}

type TopupMonthMethodResponse {
  month: String!
  topup_method: String!
  total_topups: Int!
  total_amount: Int!
}

type TopupYearMethodResponse {
  year: String!
  topup_method: String!
  total_topups: Int!
  total_amount: Int!
}

type TopupMonthAmountResponse {
  month: String!
  total_amount: Int!
}

type TopupYearAmountResponse {
  year: String!
  total_amount: Int!
}

type ApiResponseTopup {
  status: String!
  message: String!
  data: TopupResponse
}

type ApiResponseTopupDeleteAt {
  status: String!
  message: String!
  data: TopupResponseDeleteAt
}

type ApiResponsesTopup {
  status: String!
  message: String!
  data: [TopupResponse!]
}

type ApiResponsePaginationTopup {
  status: String!
  message: String!
  data: [TopupResponse!]
  pagination: PaginationMeta
}

type ApiResponsePaginationTopupDeleteAt {
  status: String!
  message: String!
  data: [TopupResponseDeleteAt!]
  pagination: PaginationMeta
}

type ApiResponseTopupMonthStatusSuccess {
  status: String!
  message: String!
  data: [TopupMonthStatusSuccessResponse!]
}

type ApiResponseTopupYearStatusSuccess {
  status: String!
  message: String!
  data: [TopupYearStatusSuccessResponse!]
}

type ApiResponseTopupMonthStatusFailed {
  status: String!
  message: String!
  data: [TopupMonthStatusFailedResponse!]
}

type ApiResponseTopupYearStatusFailed {
  status: String!
  message: String!
  data: [TopupYearStatusFailedResponse!]
}

type ApiResponseTopupMonthMethod {
  status: String!
  message: String!
  data: [TopupMonthMethodResponse!]
}

type ApiResponseTopupYearMethod {
  status: String!
  message: String!
  data: [TopupYearMethodResponse!]
}

type ApiResponseTopupMonthAmount {
  status: String!
  message: String!
  data: [TopupMonthAmountResponse!]
}

type ApiResponseTopupYearAmount {
  status: String!
  message: String!
  data: [TopupYearAmountResponse!]
}

type ApiResponseTopupDelete {
  status: String!
  message: String!
}

type ApiResponseTopupAll {
  status: String!
  message: String!
}

extend type Query {
  findAllTopup(input: FindAllTopupInput): ApiResponsePaginationTopup
  findAllTopupByCardNumber(
    input: FindAllTopupByCardNumberInput
  ): ApiResponsePaginationTopup

  findByIdTopup(input: FindByIdTopupInput!): ApiResponseTopup

  findMonthlyTopupStatusSuccess(
    input: FindMonthlyTopupStatusInput!
  ): ApiResponseTopupMonthStatusSuccess
  findYearlyTopupStatusSuccess(
    input: FindYearTopupStatusInput!
  ): ApiResponseTopupYearStatusSuccess
  findMonthlyTopupStatusFailed(
    input: FindMonthlyTopupStatusInput!
  ): ApiResponseTopupMonthStatusFailed
  findYearlyTopupStatusFailed(
    input: FindYearTopupStatusInput!
  ): ApiResponseTopupYearStatusFailed

  findMonthlyTopupStatusSuccessByCardNumber(
    input: FindMonthlyTopupStatusCardNumberInput!
  ): ApiResponseTopupMonthStatusSuccess
  findYearlyTopupStatusSuccessByCardNumber(
    input: FindYearTopupStatusCardNumberInput!
  ): ApiResponseTopupYearStatusSuccess
  findMonthlyTopupStatusFailedByCardNumber(
    input: FindMonthlyTopupStatusCardNumberInput!
  ): ApiResponseTopupMonthStatusFailed
  findYearlyTopupStatusFailedByCardNumber(
    input: FindYearTopupStatusCardNumberInput!
  ): ApiResponseTopupYearStatusFailed

  findMonthlyTopupMethods(
    input: FindYearTopupStatusInput!
  ): ApiResponseTopupMonthMethod
  findYearlyTopupMethods(
    input: FindYearTopupStatusInput!
  ): ApiResponseTopupYearMethod
  findMonthlyTopupAmounts(
    input: FindYearTopupStatusInput!
  ): ApiResponseTopupMonthAmount
  findYearlyTopupAmounts(
    input: FindYearTopupStatusInput!
  ): ApiResponseTopupYearAmount

  findMonthlyTopupMethodsByCardNumber(
    input: FindYearTopupCardNumberInput!
  ): ApiResponseTopupMonthMethod
  findYearlyTopupMethodsByCardNumber(
    input: FindYearTopupCardNumberInput!
  ): ApiResponseTopupYearMethod
  findMonthlyTopupAmountsByCardNumber(
    input: FindYearTopupCardNumberInput!
  ): ApiResponseTopupMonthAmount
  findYearlyTopupAmountsByCardNumber(
    input: FindYearTopupCardNumberInput!
  ): ApiResponseTopupYearAmount

  findByActiveTopup(
    input: FindAllTopupInput
  ): ApiResponsePaginationTopupDeleteAt
  findByTrashedTopup(
    input: FindAllTopupInput
  ): ApiResponsePaginationTopupDeleteAt
}

extend type Mutation {
  createTopup(input: CreateTopupInput!): ApiResponseTopup
  updateTopup(input: UpdateTopupInput!): ApiResponseTopup
  trashedTopup(input: FindByIdTopupInput!): ApiResponseTopupDeleteAt
  restoreTopup(input: FindByIdTopupInput!): ApiResponseTopupDeleteAt
  deleteTopupPermanent(input: FindByIdTopupInput!): ApiResponseTopupDelete

  restoreAllTopup: ApiResponseTopupAll
  deleteAllTopupPermanent: ApiResponseTopupAll
}
`, BuiltIn: false},
	{Name: "../../pkg/graphql/transaction.graphqls", Input: `scalar DateTime

input FindByYearCardNumberTransactionRequest {
  card_number: String!
  year: Int!
}

input FindYearTransactionStatus {
  year: Int!
}

input FindMonthlyTransactionStatus {
  year: Int!
  month: Int!
}

input FindYearTransactionStatusCardNumber {
  card_number: String!
  year: Int!
}

input FindMonthlyTransactionStatusCardNumber {
  card_number: String!
  year: Int!
  month: Int!
}

input FindAllTransactionRequest {
  page: Int
  page_size: Int
  search: String
}

input FindAllTransactionCardNumberRequest {
  card_number: String!
  page: Int
  page_size: Int
  search: String
}

input FindByIdTransactionRequest {
  transaction_id: Int!
}

input FindTransactionByMerchantIdRequest {
  merchant_id: Int!
}

input CreateTransactionRequest {
  api_key: String!
  card_number: String!
  amount: Int!
  payment_method: String!
  merchant_id: Int!
  transaction_time: DateTime!
}

input UpdateTransactionRequest {
  id: Int!
  api_key: String!
  card_number: String!
  amount: Int!
  payment_method: String!
  merchant_id: Int!
  transaction_time: DateTime!
}

type TransactionResponse {
  id: Int!
  card_number: String!
  transaction_no: String!
  amount: Int!
  payment_method: String!
  merchant_id: Int!
  transaction_time: String!
  created_at: String!
  updated_at: String!
}

type TransactionResponseDeleteAt {
  id: Int!
  card_number: String!
  transaction_no: String!
  amount: Int!
  payment_method: String!
  merchant_id: Int!
  transaction_time: String!
  created_at: String!
  updated_at: String!
  deleted_at: String
}

type TransactionMonthStatusSuccessResponse {
  year: String!
  month: String!
  total_success: Int!
  total_amount: Int!
}

type TransactionYearStatusSuccessResponse {
  year: String!
  total_success: Int!
  total_amount: Int!
}

type TransactionMonthStatusFailedResponse {
  year: String!
  month: String!
  total_failed: Int!
  total_amount: Int!
}

type TransactionYearStatusFailedResponse {
  year: String!
  total_failed: Int!
  total_amount: Int!
}

type TransactionMonthMethodResponse {
  month: String!
  payment_method: String!
  total_transactions: Int!
  total_amount: Int!
}

type TransactionYearMethodResponse {
  year: String!
  payment_method: String!
  total_transactions: Int!
  total_amount: Int!
}

type TransactionMonthAmountResponse {
  month: String!
  total_amount: Int!
}

type TransactionYearlyAmountResponse {
  year: String!
  total_amount: Int!
}

type ApiResponseTransaction {
  status: String!
  message: String!
  data: TransactionResponse
}

type ApiResponseTransactionDeleteAt {
  status: String!
  message: String!
  data: TransactionResponseDeleteAt
}

type ApiResponsePaginationTransaction {
  status: String!
  message: String!
  data: [TransactionResponse!]!
  pagination: PaginationMeta
}

type ApiResponsePaginationTransactionDeleteAt {
  status: String!
  message: String!
  data: [TransactionResponseDeleteAt!]!
  pagination: PaginationMeta
}

type ApiResponseTransactions {
  status: String!
  message: String!
  data: [TransactionResponse!]!
}

type ApiResponseTransactionDelete {
  status: String!
  message: String!
}

type ApiResponseTransactionAll {
  status: String!
  message: String!
}

type ApiResponseTransactionMonthStatusSuccess {
  status: String!
  message: String!
  data: [TransactionMonthStatusSuccessResponse!]!
}

type ApiResponseTransactionYearStatusSuccess {
  status: String!
  message: String!
  data: [TransactionYearStatusSuccessResponse!]!
}

type ApiResponseTransactionMonthStatusFailed {
  status: String!
  message: String!
  data: [TransactionMonthStatusFailedResponse!]!
}

type ApiResponseTransactionYearStatusFailed {
  status: String!
  message: String!
  data: [TransactionYearStatusFailedResponse!]!
}

type ApiResponseTransactionMonthMethod {
  status: String!
  message: String!
  data: [TransactionMonthMethodResponse!]!
}

type ApiResponseTransactionYearMethod {
  status: String!
  message: String!
  data: [TransactionYearMethodResponse!]!
}

type ApiResponseTransactionMonthAmount {
  status: String!
  message: String!
  data: [TransactionMonthAmountResponse!]!
}

type ApiResponseTransactionYearAmount {
  status: String!
  message: String!
  data: [TransactionYearlyAmountResponse!]!
}

extend type Query {
  findAllTransactions(
    input: FindAllTransactionRequest
  ): ApiResponsePaginationTransaction
  findAllTransactionsByCardNumber(
    input: FindAllTransactionCardNumberRequest
  ): ApiResponsePaginationTransaction
  findTransactionById(input: FindByIdTransactionRequest): ApiResponseTransaction
  findTransactionByMerchantId(
    input: FindTransactionByMerchantIdRequest
  ): ApiResponseTransactions
  findActiveTransactions(
    input: FindAllTransactionRequest
  ): ApiResponsePaginationTransactionDeleteAt
  findTrashedTransactions(
    input: FindAllTransactionRequest
  ): ApiResponsePaginationTransactionDeleteAt

  findMonthlyTransactionStatusSuccess(
    input: FindMonthlyTransactionStatus!
  ): ApiResponseTransactionMonthStatusSuccess
  findYearlyTransactionStatusSuccess(
    input: FindYearTransactionStatus!
  ): ApiResponseTransactionYearStatusSuccess
  findMonthlyTransactionStatusFailed(
    input: FindMonthlyTransactionStatus!
  ): ApiResponseTransactionMonthStatusFailed
  findYearlyTransactionStatusFailed(
    input: FindYearTransactionStatus!
  ): ApiResponseTransactionYearStatusFailed

  findMonthlyTransactionStatusSuccessByCardNumber(
    input: FindMonthlyTransactionStatusCardNumber!
  ): ApiResponseTransactionMonthStatusSuccess
  findYearlyTransactionStatusSuccessByCardNumber(
    input: FindYearTransactionStatusCardNumber!
  ): ApiResponseTransactionYearStatusSuccess
  findMonthlyTransactionStatusFailedByCardNumber(
    input: FindMonthlyTransactionStatusCardNumber!
  ): ApiResponseTransactionMonthStatusFailed
  findYearlyTransactionStatusFailedByCardNumber(
    input: FindYearTransactionStatusCardNumber!
  ): ApiResponseTransactionYearStatusFailed

  findMonthlyPaymentMethods(
    input: FindYearTransactionStatus!
  ): ApiResponseTransactionMonthMethod
  findYearlyPaymentMethods(
    input: FindYearTransactionStatus!
  ): ApiResponseTransactionYearMethod
  findMonthlyAmounts(
    input: FindYearTransactionStatus!
  ): ApiResponseTransactionMonthAmount
  findYearlyAmounts(
    input: FindYearTransactionStatus!
  ): ApiResponseTransactionYearAmount

  findMonthlyPaymentMethodsByCardNumber(
    input: FindByYearCardNumberTransactionRequest!
  ): ApiResponseTransactionMonthMethod
  findYearlyPaymentMethodsByCardNumber(
    input: FindByYearCardNumberTransactionRequest!
  ): ApiResponseTransactionYearMethod
  findMonthlyAmountsByCardNumber(
    input: FindByYearCardNumberTransactionRequest!
  ): ApiResponseTransactionMonthAmount
  findYearlyAmountsByCardNumber(
    input: FindByYearCardNumberTransactionRequest!
  ): ApiResponseTransactionYearAmount
}

extend type Mutation {
  createTransaction(input: CreateTransactionRequest!): ApiResponseTransaction
  updateTransaction(input: UpdateTransactionRequest!): ApiResponseTransaction
  trashedTransaction(
    input: FindByIdTransactionRequest!
  ): ApiResponseTransactionDeleteAt
  restoreTransaction(
    input: FindByIdTransactionRequest!
  ): ApiResponseTransactionDeleteAt
  deleteTransactionPermanent(
    input: FindByIdTransactionRequest!
  ): ApiResponseTransactionDelete

  restoreAllTransactions: ApiResponseTransactionAll
  deleteAllTransactionsPermanent: ApiResponseTransactionAll
}
`, BuiltIn: false},
	{Name: "../../pkg/graphql/transfer.graphqls", Input: `input FindByCardNumberTransferRequest {
  card_number: String!
  year: Int!
}

input FindYearTransferStatus {
  year: Int!
}

input FindMonthlyTransferStatus {
  year: Int!
  month: Int!
}

input FindYearTransferStatusCardNumber {
  card_number: String!
  year: Int!
}

input FindMonthlyTransferStatusCardNumber {
  card_number: String!
  year: Int!
  month: Int!
}

input FindAllTransferRequest {
  page: Int
  page_size: Int
  search: String
}

input FindByIdTransferRequest {
  transfer_id: Int!
}

input FindTransferByTransferFromRequest {
  transfer_from: String!
}

input FindTransferByTransferToRequest {
  transfer_to: String!
}

input CreateTransferRequest {
  transfer_from: String!
  transfer_to: String!
  transfer_amount: Int!
}

input UpdateTransferRequest {
  transfer_id: Int!
  transfer_from: String!
  transfer_to: String!
  transfer_amount: Int!
}

type TransferResponse {
  id: Int!
  transfer_no: String!
  transfer_from: String!
  transfer_to: String!
  transfer_amount: Int!
  transfer_time: String!
  created_at: String!
  updated_at: String!
}

type TransferResponseDeleteAt {
  id: Int!
  transfer_no: String!
  transfer_from: String!
  transfer_to: String!
  transfer_amount: Int!
  transfer_time: String!
  created_at: String!
  updated_at: String!
  deleted_at: String
}

type TransferMonthStatusSuccessResponse {
  year: String!
  month: String!
  total_success: Int!
  total_amount: Int!
}

type TransferYearStatusSuccessResponse {
  year: String!
  total_success: Int!
  total_amount: Int!
}

type TransferMonthStatusFailedResponse {
  year: String!
  month: String!
  total_failed: Int!
  total_amount: Int!
}

type TransferYearStatusFailedResponse {
  year: String!
  total_failed: Int!
  total_amount: Int!
}

type TransferMonthAmountResponse {
  month: String!
  total_amount: Int!
}

type TransferYearAmountResponse {
  year: String!
  total_amount: Int!
}

type ApiResponseTransfer {
  status: String!
  message: String!
  data: TransferResponse
}

type ApiResponseTransferDeleteAt {
  status: String!
  message: String!
  data: TransferResponseDeleteAt
}

type ApiResponseTransfers {
  status: String!
  message: String!
  data: [TransferResponse!]!
}

type ApiResponseTransferDelete {
  status: String!
  message: String!
}

type ApiResponseTransferAll {
  status: String!
  message: String!
}

type ApiResponsePaginationTransfer {
  status: String!
  message: String!
  data: [TransferResponse!]!
  pagination: PaginationMeta
}

type ApiResponsePaginationTransferDeleteAt {
  status: String!
  message: String!
  data: [TransferResponseDeleteAt!]!
  pagination: PaginationMeta
}

type ApiResponseTransferMonthStatusSuccess {
  status: String!
  message: String!
  data: [TransferMonthStatusSuccessResponse!]!
}

type ApiResponseTransferYearStatusSuccess {
  status: String!
  message: String!
  data: [TransferYearStatusSuccessResponse!]!
}

type ApiResponseTransferMonthStatusFailed {
  status: String!
  message: String!
  data: [TransferMonthStatusFailedResponse!]!
}

type ApiResponseTransferYearStatusFailed {
  status: String!
  message: String!
  data: [TransferYearStatusFailedResponse!]!
}

type ApiResponseTransferMonthAmount {
  status: String!
  message: String!
  data: [TransferMonthAmountResponse!]!
}

type ApiResponseTransferYearAmount {
  status: String!
  message: String!
  data: [TransferYearAmountResponse!]!
}

extend type Query {
  findAllTransfers(input: FindAllTransferRequest): ApiResponsePaginationTransfer
  findTransferById(input: FindByIdTransferRequest): ApiResponseTransfer
  findTransfersBySender(
    input: FindTransferByTransferFromRequest
  ): ApiResponseTransfers
  findTransfersByReceiver(
    input: FindTransferByTransferToRequest
  ): ApiResponseTransfers
  findActiveTransfers(
    input: FindAllTransferRequest
  ): ApiResponsePaginationTransferDeleteAt
  findTrashedTransfers(
    input: FindAllTransferRequest
  ): ApiResponsePaginationTransferDeleteAt

  findMonthlyTransferStatusSuccess(
    input: FindMonthlyTransferStatus!
  ): ApiResponseTransferMonthStatusSuccess
  findYearlyTransferStatusSuccess(
    input: FindYearTransferStatus!
  ): ApiResponseTransferYearStatusSuccess
  findMonthlyTransferStatusFailed(
    input: FindMonthlyTransferStatus!
  ): ApiResponseTransferMonthStatusFailed
  findYearlyTransferStatusFailed(
    input: FindYearTransferStatus!
  ): ApiResponseTransferYearStatusFailed

  findMonthlyTransferStatusSuccessByCardNumber(
    input: FindMonthlyTransferStatusCardNumber!
  ): ApiResponseTransferMonthStatusSuccess
  findYearlyTransferStatusSuccessByCardNumber(
    input: FindYearTransferStatusCardNumber!
  ): ApiResponseTransferYearStatusSuccess
  findMonthlyTransferStatusFailedByCardNumber(
    input: FindMonthlyTransferStatusCardNumber!
  ): ApiResponseTransferMonthStatusFailed
  findYearlyTransferStatusFailedByCardNumber(
    input: FindYearTransferStatusCardNumber!
  ): ApiResponseTransferYearStatusFailed

  findMonthlyTransferAmounts(
    input: FindYearTransferStatus!
  ): ApiResponseTransferMonthAmount
  findYearlyTransferAmounts(
    input: FindYearTransferStatus!
  ): ApiResponseTransferYearAmount

  findMonthlyTransferAmountsBySenderCardNumber(
    input: FindByCardNumberTransferRequest!
  ): ApiResponseTransferMonthAmount
  findMonthlyTransferAmountsByReceiverCardNumber(
    input: FindByCardNumberTransferRequest!
  ): ApiResponseTransferMonthAmount
  findYearlyTransferAmountsBySenderCardNumber(
    input: FindByCardNumberTransferRequest!
  ): ApiResponseTransferYearAmount
  findYearlyTransferAmountsByReceiverCardNumber(
    input: FindByCardNumberTransferRequest!
  ): ApiResponseTransferYearAmount
}

extend type Mutation {
  createTransfer(input: CreateTransferRequest!): ApiResponseTransfer
  updateTransfer(input: UpdateTransferRequest!): ApiResponseTransfer
  trashedTransfer(input: FindByIdTransferRequest!): ApiResponseTransferDeleteAt
  restoreTransfer(input: FindByIdTransferRequest!): ApiResponseTransferDeleteAt
  deleteTransferPermanent(
    input: FindByIdTransferRequest!
  ): ApiResponseTransferDelete

  restoreAllTransfers: ApiResponseTransferAll
  deleteAllTransfersPermanent: ApiResponseTransferAll
}
`, BuiltIn: false},
	{Name: "../../pkg/graphql/user.graphqls", Input: `input FindAllUserInput {
  page: Int = 1
  page_size: Int = 10
  search: String
}

input FindByIdUserInput {
  id: Int!
}

input CreateUserInput {
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  confirm_password: String!
}

input UpdateUserInput {
  id: Int!
  firstname: String
  lastname: String
  email: String
  password: String
  confirm_password: String
}

type UserResponse {
  id: Int!
  firstname: String!
  lastname: String!
  email: String!
  created_at: String!
  updated_at: String!
}

type UserResponseDeleteAt {
  id: Int!
  firstname: String!
  lastname: String!
  email: String!
  created_at: String!
  updated_at: String!
  deleted_at: String
}

type ApiResponseUserResponse {
  status: String!
  message: String!
  data: UserResponse
}

type ApiResponseUserResponseDeleteAt {
  status: String!
  message: String!
  data: UserResponseDeleteAt
}

type ApiResponsesUser {
  status: String!
  message: String!
  data: [UserResponse!]!
}

type ApiResponseUserDelete {
  status: String!
  message: String!
}

type ApiResponseUserAll {
  status: String!
  message: String!
}

type ApiResponsePaginationUser {
  status: String!
  message: String!
  data: [UserResponse!]!
  pagination: PaginationMeta!
}

type ApiResponsePaginationUserDeleteAt {
  status: String!
  message: String!
  data: [UserResponseDeleteAt!]!
  pagination: PaginationMeta!
}

extend type Query {
  findAllUsers(input: FindAllUserInput): ApiResponsePaginationUser!
  findByIdUser(input: FindByIdUserInput!): ApiResponseUserResponse!
  findByActiveUsers(input: FindAllUserInput): ApiResponsePaginationUserDeleteAt!
  findByTrashedUsers(
    input: FindAllUserInput
  ): ApiResponsePaginationUserDeleteAt!
}

extend type Mutation {
  createUser(input: CreateUserInput!): ApiResponseUserResponse!
  updateUser(input: UpdateUserInput!): ApiResponseUserResponse!

  trashedUser(input: FindByIdUserInput!): ApiResponseUserResponseDeleteAt!
  restoreUser(input: FindByIdUserInput!): ApiResponseUserResponseDeleteAt!
  deleteUserPermanent(input: FindByIdUserInput!): ApiResponseUserDelete!

  restoreAllUser: ApiResponseUserAll!
  deleteAllUserPermanent: ApiResponseUserAll!
}
`, BuiltIn: false},
	{Name: "../../pkg/graphql/withdraw.graphqls", Input: `input FindYearWithdrawStatusInput {
  year: Int!
}

input FindMonthlyWithdrawStatusInput {
  year: Int!
  month: Int!
}

input FindYearWithdrawStatusCardNumberInput {
  cardNumber: String!
  year: Int!
}

input FindMonthlyWithdrawStatusCardNumberInput {
  cardNumber: String!
  year: Int!
  month: Int!
}

input FindYearWithdrawCardNumberInput {
  cardNumber: String!
  year: Int!
}

input FindAllWithdrawInput {
  page: Int
  pageSize: Int
  search: String
}

input FindAllWithdrawByCardNumberInput {
  cardNumber: String!
  page: Int
  pageSize: Int
  search: String
}

input FindByIdWithdrawInput {
  withdrawId: Int!
}

input CreateWithdrawInput {
  cardNumber: String!
  withdrawAmount: Int!
  withdrawTime: DateTime!
}

input UpdateWithdrawInput {
  withdrawId: Int!
  cardNumber: String!
  withdrawAmount: Int!
  withdrawTime: DateTime!
}

type WithdrawResponse {
  id: Int!
  withdrawNo: String!
  cardNumber: String!
  withdrawAmount: Int!
  withdrawTime: String!
  createdAt: String!
  updatedAt: String!
}

type WithdrawResponseDeleteAt {
  id: Int!
  withdrawNo: String!
  cardNumber: String!
  withdrawAmount: Int!
  withdrawTime: String!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type WithdrawMonthStatusSuccessResponse {
  year: String!
  month: String!
  totalSuccess: Int!
  totalAmount: Int!
}

type WithdrawYearStatusSuccessResponse {
  year: String!
  totalSuccess: Int!
  totalAmount: Int!
}

type WithdrawMonthStatusFailedResponse {
  year: String!
  month: String!
  totalFailed: Int!
  totalAmount: Int!
}

type WithdrawYearStatusFailedResponse {
  year: String!
  totalFailed: Int!
  totalAmount: Int!
}

type WithdrawMonthlyAmountResponse {
  month: String!
  totalAmount: Int!
}

type WithdrawYearlyAmountResponse {
  year: String!
  totalAmount: Int!
}

type ApiResponseWithdrawMonthStatusSuccess {
  status: String!
  message: String!
  data: [WithdrawMonthStatusSuccessResponse!]!
}

type ApiResponseWithdrawYearStatusSuccess {
  status: String!
  message: String!
  data: [WithdrawYearStatusSuccessResponse!]!
}

type ApiResponseWithdrawMonthStatusFailed {
  status: String!
  message: String!
  data: [WithdrawMonthStatusFailedResponse!]!
}

type ApiResponseWithdrawYearStatusFailed {
  status: String!
  message: String!
  data: [WithdrawYearStatusFailedResponse!]!
}

type ApiResponseWithdrawMonthAmount {
  status: String!
  message: String!
  data: [WithdrawMonthlyAmountResponse!]!
}

type ApiResponseWithdrawYearAmount {
  status: String!
  message: String!
  data: [WithdrawYearlyAmountResponse!]!
}

type ApiResponsesWithdraw {
  status: String!
  message: String!
  data: [WithdrawResponse!]!
}

type ApiResponseWithdraw {
  status: String!
  message: String!
  data: WithdrawResponse
}

type ApiResponseWithdrawDeleteAt {
  status: String!
  message: String!
  data: WithdrawResponseDeleteAt
}

type ApiResponseWithdrawDelete {
  status: String!
  message: String!
}

type ApiResponseWithdrawAll {
  status: String!
  message: String!
}

type ApiResponsePaginationWithdraw {
  status: String!
  message: String!
  data: [WithdrawResponse!]!
  pagination: PaginationMeta
}

type ApiResponsePaginationWithdrawDeleteAt {
  status: String!
  message: String!
  data: [WithdrawResponseDeleteAt!]!
  pagination: PaginationMeta
}

extend type Query {
  findAllWithdraw(input: FindAllWithdrawInput!): ApiResponsePaginationWithdraw
  findAllWithdrawByCardNumber(
    input: FindAllWithdrawByCardNumberInput!
  ): ApiResponsePaginationWithdraw
  findByIdWithdraw(input: FindByIdWithdrawInput!): ApiResponseWithdraw

  findMonthlyWithdrawStatusSuccess(
    input: FindMonthlyWithdrawStatusInput!
  ): ApiResponseWithdrawMonthStatusSuccess
  findYearlyWithdrawStatusSuccess(
    input: FindYearWithdrawStatusInput!
  ): ApiResponseWithdrawYearStatusSuccess
  findMonthlyWithdrawStatusFailed(
    input: FindMonthlyWithdrawStatusInput!
  ): ApiResponseWithdrawMonthStatusFailed
  findYearlyWithdrawStatusFailed(
    input: FindYearWithdrawStatusInput!
  ): ApiResponseWithdrawYearStatusFailed

  findMonthlyWithdrawStatusSuccessCardNumber(
    input: FindMonthlyWithdrawStatusCardNumberInput!
  ): ApiResponseWithdrawMonthStatusSuccess
  findYearlyWithdrawStatusSuccessCardNumber(
    input: FindYearWithdrawStatusCardNumberInput!
  ): ApiResponseWithdrawYearStatusSuccess
  findMonthlyWithdrawStatusFailedCardNumber(
    input: FindMonthlyWithdrawStatusCardNumberInput!
  ): ApiResponseWithdrawMonthStatusFailed
  findYearlyWithdrawStatusFailedCardNumber(
    input: FindYearWithdrawStatusCardNumberInput!
  ): ApiResponseWithdrawYearStatusFailed

  findMonthlyWithdraws(
    input: FindYearWithdrawStatusInput!
  ): ApiResponseWithdrawMonthAmount
  findYearlyWithdraws(
    input: FindYearWithdrawStatusInput!
  ): ApiResponseWithdrawYearAmount
  findMonthlyWithdrawsByCardNumber(
    input: FindYearWithdrawCardNumberInput!
  ): ApiResponseWithdrawMonthAmount
  findYearlyWithdrawsByCardNumber(
    input: FindYearWithdrawCardNumberInput!
  ): ApiResponseWithdrawYearAmount

  findByActiveWithdraw(
    input: FindAllWithdrawInput!
  ): ApiResponsePaginationWithdrawDeleteAt
  findByTrashedWithdraw(
    input: FindAllWithdrawInput!
  ): ApiResponsePaginationWithdrawDeleteAt
}

extend type Mutation {
  createWithdraw(input: CreateWithdrawInput!): ApiResponseWithdraw
  updateWithdraw(input: UpdateWithdrawInput!): ApiResponseWithdraw

  trashedWithdraw(input: FindByIdWithdrawInput!): ApiResponseWithdrawDeleteAt
  restoreWithdraw(input: FindByIdWithdrawInput!): ApiResponseWithdrawDeleteAt
  deleteWithdrawPermanent(
    input: FindByIdWithdrawInput!
  ): ApiResponseWithdrawDelete

  restoreAllWithdraw: ApiResponseWithdrawAll
  deleteAllWithdrawPermanent: ApiResponseWithdrawAll
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createCard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateCardInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateCardInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMerchant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateRoleInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateRoleInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSaldo_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateSaldoInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateSaldoInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTopup_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateTopupInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateTopupInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTransaction_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateTransactionRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateTransactionRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTransfer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateTransferRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateTransferRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateUserInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateUserInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createWithdraw_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateWithdrawInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateWithdrawInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCardPermanent_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdCardInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDCardInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMerchantPermanent_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRolePermanent_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdRoleInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDRoleInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSaldoPermanent_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdSaldoInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDSaldoInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTopupPermanent_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdTopupInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTopupInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTransactionPermanent_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdTransactionRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTransactionRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTransferPermanent_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdTransferRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTransferRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUserPermanent_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdUserInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDUserInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteWithdrawPermanent_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdWithdrawInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDWithdrawInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_loginUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNLoginInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐLoginInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_refreshToken_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNRefreshTokenInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRefreshTokenInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNRegisterInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRegisterInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_restoreCard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdCardInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDCardInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_restoreMerchant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_restoreRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdRoleInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDRoleInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_restoreSaldo_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdSaldoInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDSaldoInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_restoreTopup_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdTopupInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTopupInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_restoreTransaction_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdTransactionRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTransactionRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_restoreTransfer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdTransferRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTransferRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_restoreUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdUserInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDUserInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_restoreWithdraw_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdWithdrawInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDWithdrawInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trashedCard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdCardInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDCardInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trashedMerchant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trashedRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdRoleInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDRoleInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trashedSaldo_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdSaldoInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDSaldoInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trashedTopup_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdTopupInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTopupInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trashedTransaction_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdTransactionRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTransactionRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trashedTransfer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdTransferRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTransferRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trashedUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdUserInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDUserInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_trashedWithdraw_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdWithdrawInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDWithdrawInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateCardInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateCardInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMerchant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateRoleInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateRoleInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSaldo_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateSaldoInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateSaldoInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTopup_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateTopupInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateTopupInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTransaction_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateTransactionRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateTransactionRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTransfer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateTransferRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateTransferRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateUserInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateUserInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateWithdraw_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateWithdrawInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateWithdrawInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "name", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dashboardCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findActiveTransactions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllTransactionRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTransactionRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findActiveTransfers_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllTransferRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTransferRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllCard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllCardInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllCardInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllMerchant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllMerchantInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllRoleInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllRoleInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllSaldo_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllSaldoInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllSaldoInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllTopupByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllTopupByCardNumberInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTopupByCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllTopup_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllTopupInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTopupInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllTransactionByApikey_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllMerchantApikeyInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllMerchantApikeyInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllTransactionByMerchant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllMerchantTransactionInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllMerchantTransactionInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllTransactionMerchant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllMerchantInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllTransactionsByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllTransactionCardNumberRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTransactionCardNumberRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllTransactions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllTransactionRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTransactionRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllTransfers_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllTransferRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTransferRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllUsers_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllUserInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllUserInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllWithdrawByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindAllWithdrawByCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllWithdrawByCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findAllWithdraw_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindAllWithdrawInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllWithdrawInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByActiveCard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllCardInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllCardInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByActiveRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllRoleInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllRoleInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByActiveSaldo_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllSaldoInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllSaldoInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByActiveTopup_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllTopupInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTopupInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByActiveUsers_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllUserInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllUserInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByActiveWithdraw_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindAllWithdrawInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllWithdrawInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByActive_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllMerchantInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByApiKey_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByApiKeyInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByAPIKeyInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByCardNumberCard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByCardNumberSaldo_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "card_number", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["card_number"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByIdCard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdCardInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDCardInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByIdMerchant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByIdRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdRoleInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDRoleInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByIdSaldo_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdSaldoInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDSaldoInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByIdTopup_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdTopupInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTopupInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByIdUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdUserInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDUserInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByIdWithdraw_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdWithdrawInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDWithdrawInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByMerchantUserId_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByMerchantUserIdInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByMerchantUserIDInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByTrashedCard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllCardInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllCardInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByTrashedRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllRoleInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllRoleInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByTrashedSaldo_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllSaldoInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllSaldoInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByTrashedTopup_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllTopupInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTopupInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByTrashedUsers_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllUserInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllUserInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByTrashedWithdraw_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindAllWithdrawInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllWithdrawInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByTrashed_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllMerchantInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByUserIdCard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByUserIdCardInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByUserIDCardInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findByUserIdRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByIdUserRoleInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDUserRoleInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyAmountByApikey_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantByApikeyInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantByApikeyInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyAmountByMerchants_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantByIdInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantByIDInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyAmountMerchant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyAmountsByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByYearCardNumberTransactionRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByYearCardNumberTransactionRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyAmounts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTransactionStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransactionStatus)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyBalanceByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearBalanceCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearBalanceCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyBalance_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearBalanceInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearBalanceInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyPaymentMethodByApikey_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantByApikeyInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantByApikeyInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyPaymentMethodByMerchants_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantByIdInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantByIDInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyPaymentMethodsByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByYearCardNumberTransactionRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByYearCardNumberTransactionRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyPaymentMethodsMerchant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyPaymentMethods_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTransactionStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransactionStatus)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlySaldoBalances_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearlySaldoInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearlySaldoInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTopupAmountByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTopupAmount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTopupAmountsByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTopupCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTopupAmounts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTopupStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupStatusInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTopupMethodsByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTopupCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTopupMethods_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTopupStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupStatusInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTopupStatusFailedByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyTopupStatusCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTopupStatusCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTopupStatusFailed_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyTopupStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTopupStatusInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTopupStatusSuccessByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyTopupStatusCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTopupStatusCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTopupStatusSuccess_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyTopupStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTopupStatusInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTotalAmountByApikey_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantByApikeyInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantByApikeyInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTotalAmountByMerchants_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantByIdInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantByIDInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTotalAmountMerchant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTotalSaldoBalance_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlySaldoTotalBalanceInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlySaldoTotalBalanceInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransactionAmountByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransactionAmount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransactionStatusFailedByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyTransactionStatusCardNumber2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTransactionStatusCardNumber)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransactionStatusFailed_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyTransactionStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTransactionStatus)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransactionStatusSuccessByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyTransactionStatusCardNumber2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTransactionStatusCardNumber)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransactionStatusSuccess_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyTransactionStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTransactionStatus)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransferAmountsByReceiverCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByCardNumberTransferRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByCardNumberTransferRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransferAmountsBySenderCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByCardNumberTransferRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByCardNumberTransferRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransferAmounts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTransferStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransferStatus)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransferReceiverAmountByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransferReceiverAmount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransferSenderAmountByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransferSenderAmount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransferStatusFailedByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyTransferStatusCardNumber2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTransferStatusCardNumber)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransferStatusFailed_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyTransferStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTransferStatus)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransferStatusSuccessByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyTransferStatusCardNumber2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTransferStatusCardNumber)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyTransferStatusSuccess_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyTransferStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTransferStatus)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyWithdrawAmountByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyWithdrawAmount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyWithdrawStatusFailedCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyWithdrawStatusCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyWithdrawStatusCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyWithdrawStatusFailed_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyWithdrawStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyWithdrawStatusInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyWithdrawStatusSuccessCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyWithdrawStatusCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyWithdrawStatusCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyWithdrawStatusSuccess_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindMonthlyWithdrawStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyWithdrawStatusInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyWithdrawsByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearWithdrawCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearWithdrawCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMonthlyWithdraws_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearWithdrawStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearWithdrawStatusInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findTransactionById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindByIdTransactionRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTransactionRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findTransactionByMerchantId_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindTransactionByMerchantIdRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindTransactionByMerchantIDRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findTransferById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindByIdTransferRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTransferRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findTransfersByReceiver_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindTransferByTransferToRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindTransferByTransferToRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findTransfersBySender_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindTransferByTransferFromRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindTransferByTransferFromRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findTrashedTransactions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllTransactionRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTransactionRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findTrashedTransfers_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalOFindAllTransferRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTransferRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearTotalSaldoBalance_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearlySaldoInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearlySaldoInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyAmountByApikey_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantByApikeyInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantByApikeyInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyAmountByMerchants_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantByIdInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantByIDInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyAmountMerchant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyAmountsByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByYearCardNumberTransactionRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByYearCardNumberTransactionRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyAmounts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTransactionStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransactionStatus)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyBalanceByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearBalanceCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearBalanceCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyBalance_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearBalanceInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearBalanceInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyPaymentMethodByApikey_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantByApikeyInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantByApikeyInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyPaymentMethodByMerchants_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantByIdInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantByIDInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyPaymentMethodMerchant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyPaymentMethodsByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByYearCardNumberTransactionRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByYearCardNumberTransactionRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyPaymentMethods_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTransactionStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransactionStatus)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlySaldoBalances_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearlySaldoInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearlySaldoInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTopupAmountByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTopupAmount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTopupAmountsByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTopupCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTopupAmounts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTopupStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupStatusInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTopupMethodsByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTopupCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTopupMethods_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTopupStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupStatusInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTopupStatusFailedByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTopupStatusCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupStatusCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTopupStatusFailed_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTopupStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupStatusInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTopupStatusSuccessByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTopupStatusCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupStatusCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTopupStatusSuccess_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTopupStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupStatusInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTotalAmountByApikey_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantByApikeyInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantByApikeyInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTotalAmountByMerchants_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantByIdInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantByIDInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTotalAmountMerchant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransactionAmountByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransactionAmount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransactionStatusFailedByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTransactionStatusCardNumber2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransactionStatusCardNumber)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransactionStatusFailed_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTransactionStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransactionStatus)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransactionStatusSuccessByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTransactionStatusCardNumber2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransactionStatusCardNumber)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransactionStatusSuccess_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTransactionStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransactionStatus)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransferAmountsByReceiverCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByCardNumberTransferRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByCardNumberTransferRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransferAmountsBySenderCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindByCardNumberTransferRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByCardNumberTransferRequest)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransferAmounts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTransferStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransferStatus)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransferReceiverAmountByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransferReceiverAmount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransferSenderAmountByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransferSenderAmount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransferStatusFailedByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTransferStatusCardNumber2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransferStatusCardNumber)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransferStatusFailed_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTransferStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransferStatus)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransferStatusSuccessByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTransferStatusCardNumber2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransferStatusCardNumber)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyTransferStatusSuccess_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearTransferStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransferStatus)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyWithdrawAmountByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyWithdrawAmount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearAmountInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyWithdrawStatusFailedCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearWithdrawStatusCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearWithdrawStatusCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyWithdrawStatusFailed_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearWithdrawStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearWithdrawStatusInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyWithdrawStatusSuccessCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearWithdrawStatusCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearWithdrawStatusCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyWithdrawStatusSuccess_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearWithdrawStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearWithdrawStatusInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyWithdrawsByCardNumber_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearWithdrawCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearWithdrawCardNumberInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findYearlyWithdraws_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNFindYearWithdrawStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearWithdrawStatusInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ApiResponseCard_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseCard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseCard_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseCard_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseCard_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseCard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseCard_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseCard_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseCard_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseCard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseCard_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOCardResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseCard_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CardResponse_id(ctx, field)
			case "user_id":
				return ec.fieldContext_CardResponse_user_id(ctx, field)
			case "card_number":
				return ec.fieldContext_CardResponse_card_number(ctx, field)
			case "card_type":
				return ec.fieldContext_CardResponse_card_type(ctx, field)
			case "expire_date":
				return ec.fieldContext_CardResponse_expire_date(ctx, field)
			case "cvv":
				return ec.fieldContext_CardResponse_cvv(ctx, field)
			case "card_provider":
				return ec.fieldContext_CardResponse_card_provider(ctx, field)
			case "created_at":
				return ec.fieldContext_CardResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CardResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CardResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseCardAll_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseCardAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseCardAll_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseCardAll_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseCardAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseCardAll_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseCardAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseCardAll_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseCardAll_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseCardAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseCardDelete_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseCardDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseCardDelete_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseCardDelete_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseCardDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseCardDelete_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseCardDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseCardDelete_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseCardDelete_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseCardDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseCardDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseCardDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseCardDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseCardDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseCardDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseCardDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseCardDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseCardDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseCardDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseCardDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseCardDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseCardDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseCardDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOCardResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardResponseDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseCardDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseCardDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CardResponseDeleteAt_id(ctx, field)
			case "user_id":
				return ec.fieldContext_CardResponseDeleteAt_user_id(ctx, field)
			case "card_number":
				return ec.fieldContext_CardResponseDeleteAt_card_number(ctx, field)
			case "card_type":
				return ec.fieldContext_CardResponseDeleteAt_card_type(ctx, field)
			case "expire_date":
				return ec.fieldContext_CardResponseDeleteAt_expire_date(ctx, field)
			case "cvv":
				return ec.fieldContext_CardResponseDeleteAt_cvv(ctx, field)
			case "card_provider":
				return ec.fieldContext_CardResponseDeleteAt_card_provider(ctx, field)
			case "created_at":
				return ec.fieldContext_CardResponseDeleteAt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CardResponseDeleteAt_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_CardResponseDeleteAt_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CardResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseDashboardCard_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseDashboardCard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseDashboardCard_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseDashboardCard_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseDashboardCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseDashboardCard_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseDashboardCard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseDashboardCard_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseDashboardCard_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseDashboardCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseDashboardCard_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseDashboardCard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseDashboardCard_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOCardDashboardResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardDashboardResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseDashboardCard_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseDashboardCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total_balance":
				return ec.fieldContext_CardDashboardResponse_total_balance(ctx, field)
			case "total_topup":
				return ec.fieldContext_CardDashboardResponse_total_topup(ctx, field)
			case "total_withdraw":
				return ec.fieldContext_CardDashboardResponse_total_withdraw(ctx, field)
			case "total_transaction":
				return ec.fieldContext_CardDashboardResponse_total_transaction(ctx, field)
			case "total_transfer":
				return ec.fieldContext_CardDashboardResponse_total_transfer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CardDashboardResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseDashboardCardNumber_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseDashboardCardNumber) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseDashboardCardNumber_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseDashboardCardNumber_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseDashboardCardNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseDashboardCardNumber_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseDashboardCardNumber) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseDashboardCardNumber_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseDashboardCardNumber_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseDashboardCardNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseDashboardCardNumber_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseDashboardCardNumber) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseDashboardCardNumber_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOCardDashboardByNumberResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardDashboardByNumberResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseDashboardCardNumber_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseDashboardCardNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total_balance":
				return ec.fieldContext_CardDashboardByNumberResponse_total_balance(ctx, field)
			case "total_topup":
				return ec.fieldContext_CardDashboardByNumberResponse_total_topup(ctx, field)
			case "total_withdraw":
				return ec.fieldContext_CardDashboardByNumberResponse_total_withdraw(ctx, field)
			case "total_transaction":
				return ec.fieldContext_CardDashboardByNumberResponse_total_transaction(ctx, field)
			case "total_transfer_send":
				return ec.fieldContext_CardDashboardByNumberResponse_total_transfer_send(ctx, field)
			case "total_transfer_receiver":
				return ec.fieldContext_CardDashboardByNumberResponse_total_transfer_receiver(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CardDashboardByNumberResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseGetMe_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseGetMe) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseGetMe_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseGetMe_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseGetMe",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseGetMe_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseGetMe) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseGetMe_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseGetMe_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseGetMe",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseGetMe_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseGetMe) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseGetMe_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOUserResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseGetMe_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseGetMe",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserResponse_id(ctx, field)
			case "firstname":
				return ec.fieldContext_UserResponse_firstname(ctx, field)
			case "lastname":
				return ec.fieldContext_UserResponse_lastname(ctx, field)
			case "email":
				return ec.fieldContext_UserResponse_email(ctx, field)
			case "created_at":
				return ec.fieldContext_UserResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseLogin_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseLogin) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseLogin_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseLogin_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseLogin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseLogin_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseLogin) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseLogin_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseLogin_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseLogin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseLogin_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseLogin) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseLogin_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTokenResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTokenResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseLogin_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseLogin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "access_token":
				return ec.fieldContext_TokenResponse_access_token(ctx, field)
			case "refresh_token":
				return ec.fieldContext_TokenResponse_refresh_token(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TokenResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchant_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchant_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchant_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchant_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchant_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchant_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchant_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchant_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOMerchantResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchant_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MerchantResponse_id(ctx, field)
			case "name":
				return ec.fieldContext_MerchantResponse_name(ctx, field)
			case "apiKey":
				return ec.fieldContext_MerchantResponse_apiKey(ctx, field)
			case "status":
				return ec.fieldContext_MerchantResponse_status(ctx, field)
			case "userId":
				return ec.fieldContext_MerchantResponse_userId(ctx, field)
			case "createdAt":
				return ec.fieldContext_MerchantResponse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MerchantResponse_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantAll_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantAll_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantAll_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantAll_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantAll_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantAll_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantDelete_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantDelete_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantDelete_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantDelete_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantDelete_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantDelete_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOMerchantResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantResponseDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MerchantResponseDeleteAt_id(ctx, field)
			case "name":
				return ec.fieldContext_MerchantResponseDeleteAt_name(ctx, field)
			case "apiKey":
				return ec.fieldContext_MerchantResponseDeleteAt_apiKey(ctx, field)
			case "status":
				return ec.fieldContext_MerchantResponseDeleteAt_status(ctx, field)
			case "userId":
				return ec.fieldContext_MerchantResponseDeleteAt_userId(ctx, field)
			case "createdAt":
				return ec.fieldContext_MerchantResponseDeleteAt_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MerchantResponseDeleteAt_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_MerchantResponseDeleteAt_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantDeleteAtPagination_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantDeleteAtPagination) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantDeleteAtPagination_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantDeleteAtPagination_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantDeleteAtPagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantDeleteAtPagination_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantDeleteAtPagination) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantDeleteAtPagination_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantDeleteAtPagination_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantDeleteAtPagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantDeleteAtPagination_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantDeleteAtPagination) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantDeleteAtPagination_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNMerchantResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantResponseDeleteAtᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantDeleteAtPagination_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantDeleteAtPagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MerchantResponseDeleteAt_id(ctx, field)
			case "name":
				return ec.fieldContext_MerchantResponseDeleteAt_name(ctx, field)
			case "apiKey":
				return ec.fieldContext_MerchantResponseDeleteAt_apiKey(ctx, field)
			case "status":
				return ec.fieldContext_MerchantResponseDeleteAt_status(ctx, field)
			case "userId":
				return ec.fieldContext_MerchantResponseDeleteAt_userId(ctx, field)
			case "createdAt":
				return ec.fieldContext_MerchantResponseDeleteAt_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MerchantResponseDeleteAt_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_MerchantResponseDeleteAt_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantDeleteAtPagination_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantDeleteAtPagination) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantDeleteAtPagination_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantDeleteAtPagination_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantDeleteAtPagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantMonthlyAmount_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantMonthlyAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantMonthlyAmount_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantMonthlyAmount_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantMonthlyAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantMonthlyAmount_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantMonthlyAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantMonthlyAmount_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantMonthlyAmount_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantMonthlyAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantMonthlyAmount_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantMonthlyAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantMonthlyAmount_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNMerchantMonthlyAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantMonthlyAmountResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantMonthlyAmount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantMonthlyAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_MerchantMonthlyAmountResponse_month(ctx, field)
			case "totalAmount":
				return ec.fieldContext_MerchantMonthlyAmountResponse_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantMonthlyAmountResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantMonthlyPaymentMethod_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantMonthlyPaymentMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantMonthlyPaymentMethod_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantMonthlyPaymentMethod_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantMonthlyPaymentMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantMonthlyPaymentMethod_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantMonthlyPaymentMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantMonthlyPaymentMethod_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantMonthlyPaymentMethod_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantMonthlyPaymentMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantMonthlyPaymentMethod_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantMonthlyPaymentMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantMonthlyPaymentMethod_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNMerchantMonthlyPaymentMethodResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantMonthlyPaymentMethodResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantMonthlyPaymentMethod_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantMonthlyPaymentMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_MerchantMonthlyPaymentMethodResponse_month(ctx, field)
			case "paymentMethod":
				return ec.fieldContext_MerchantMonthlyPaymentMethodResponse_paymentMethod(ctx, field)
			case "totalAmount":
				return ec.fieldContext_MerchantMonthlyPaymentMethodResponse_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantMonthlyPaymentMethodResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantMonthlyTotalAmount_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantMonthlyTotalAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantMonthlyTotalAmount_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantMonthlyTotalAmount_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantMonthlyTotalAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantMonthlyTotalAmount_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantMonthlyTotalAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantMonthlyTotalAmount_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantMonthlyTotalAmount_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantMonthlyTotalAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantMonthlyTotalAmount_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantMonthlyTotalAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantMonthlyTotalAmount_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNMerchantMonthlyTotalAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantMonthlyTotalAmountResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantMonthlyTotalAmount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantMonthlyTotalAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_MerchantMonthlyTotalAmountResponse_month(ctx, field)
			case "year":
				return ec.fieldContext_MerchantMonthlyTotalAmountResponse_year(ctx, field)
			case "totalAmount":
				return ec.fieldContext_MerchantMonthlyTotalAmountResponse_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantMonthlyTotalAmountResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantPagination_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantPagination) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantPagination_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantPagination_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantPagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantPagination_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantPagination) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantPagination_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantPagination_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantPagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantPagination_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantPagination) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantPagination_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNMerchantResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantPagination_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantPagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MerchantResponse_id(ctx, field)
			case "name":
				return ec.fieldContext_MerchantResponse_name(ctx, field)
			case "apiKey":
				return ec.fieldContext_MerchantResponse_apiKey(ctx, field)
			case "status":
				return ec.fieldContext_MerchantResponse_status(ctx, field)
			case "userId":
				return ec.fieldContext_MerchantResponse_userId(ctx, field)
			case "createdAt":
				return ec.fieldContext_MerchantResponse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MerchantResponse_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantPagination_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantPagination) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantPagination_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantPagination_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantPagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantTransactionPagination_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantTransactionPagination) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantTransactionPagination_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantTransactionPagination_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantTransactionPagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantTransactionPagination_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantTransactionPagination) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantTransactionPagination_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantTransactionPagination_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantTransactionPagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantTransactionPagination_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantTransactionPagination) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantTransactionPagination_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNMerchantTransactionResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantTransactionResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantTransactionPagination_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantTransactionPagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MerchantTransactionResponse_id(ctx, field)
			case "cardNumber":
				return ec.fieldContext_MerchantTransactionResponse_cardNumber(ctx, field)
			case "amount":
				return ec.fieldContext_MerchantTransactionResponse_amount(ctx, field)
			case "paymentMethod":
				return ec.fieldContext_MerchantTransactionResponse_paymentMethod(ctx, field)
			case "merchantId":
				return ec.fieldContext_MerchantTransactionResponse_merchantId(ctx, field)
			case "merchantName":
				return ec.fieldContext_MerchantTransactionResponse_merchantName(ctx, field)
			case "transactionTime":
				return ec.fieldContext_MerchantTransactionResponse_transactionTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_MerchantTransactionResponse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MerchantTransactionResponse_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_MerchantTransactionResponse_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantTransactionResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantTransactionPagination_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantTransactionPagination) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantTransactionPagination_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantTransactionPagination_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantTransactionPagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantYearlyAmount_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantYearlyAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantYearlyAmount_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantYearlyAmount_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantYearlyAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantYearlyAmount_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantYearlyAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantYearlyAmount_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantYearlyAmount_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantYearlyAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantYearlyAmount_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantYearlyAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantYearlyAmount_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNMerchantYearlyAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantYearlyAmountResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantYearlyAmount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantYearlyAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_MerchantYearlyAmountResponse_year(ctx, field)
			case "totalAmount":
				return ec.fieldContext_MerchantYearlyAmountResponse_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantYearlyAmountResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantYearlyPaymentMethod_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantYearlyPaymentMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantYearlyPaymentMethod_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantYearlyPaymentMethod_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantYearlyPaymentMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantYearlyPaymentMethod_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantYearlyPaymentMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantYearlyPaymentMethod_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantYearlyPaymentMethod_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantYearlyPaymentMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantYearlyPaymentMethod_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantYearlyPaymentMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantYearlyPaymentMethod_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNMerchantYearlyPaymentMethodResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantYearlyPaymentMethodResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantYearlyPaymentMethod_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantYearlyPaymentMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_MerchantYearlyPaymentMethodResponse_year(ctx, field)
			case "paymentMethod":
				return ec.fieldContext_MerchantYearlyPaymentMethodResponse_paymentMethod(ctx, field)
			case "totalAmount":
				return ec.fieldContext_MerchantYearlyPaymentMethodResponse_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantYearlyPaymentMethodResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantYearlyTotalAmount_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantYearlyTotalAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantYearlyTotalAmount_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantYearlyTotalAmount_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantYearlyTotalAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantYearlyTotalAmount_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantYearlyTotalAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantYearlyTotalAmount_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantYearlyTotalAmount_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantYearlyTotalAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMerchantYearlyTotalAmount_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMerchantYearlyTotalAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMerchantYearlyTotalAmount_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNMerchantYearlyTotalAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantYearlyTotalAmountResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMerchantYearlyTotalAmount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMerchantYearlyTotalAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_MerchantYearlyTotalAmountResponse_year(ctx, field)
			case "totalAmount":
				return ec.fieldContext_MerchantYearlyTotalAmountResponse_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantYearlyTotalAmountResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMonthSaldoBalances_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMonthSaldoBalances) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMonthSaldoBalances_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMonthSaldoBalances_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMonthSaldoBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMonthSaldoBalances_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMonthSaldoBalances) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMonthSaldoBalances_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMonthSaldoBalances_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMonthSaldoBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMonthSaldoBalances_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMonthSaldoBalances) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMonthSaldoBalances_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOSaldoMonthBalanceResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoMonthBalanceResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMonthSaldoBalances_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMonthSaldoBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_SaldoMonthBalanceResponse_month(ctx, field)
			case "total_balance":
				return ec.fieldContext_SaldoMonthBalanceResponse_total_balance(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SaldoMonthBalanceResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMonthTotalSaldo_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMonthTotalSaldo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMonthTotalSaldo_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMonthTotalSaldo_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMonthTotalSaldo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMonthTotalSaldo_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMonthTotalSaldo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMonthTotalSaldo_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMonthTotalSaldo_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMonthTotalSaldo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMonthTotalSaldo_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMonthTotalSaldo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMonthTotalSaldo_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOSaldoMonthTotalBalanceResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoMonthTotalBalanceResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMonthTotalSaldo_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMonthTotalSaldo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_SaldoMonthTotalBalanceResponse_month(ctx, field)
			case "year":
				return ec.fieldContext_SaldoMonthTotalBalanceResponse_year(ctx, field)
			case "total_balance":
				return ec.fieldContext_SaldoMonthTotalBalanceResponse_total_balance(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SaldoMonthTotalBalanceResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMonthlyAmount_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMonthlyAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMonthlyAmount_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMonthlyAmount_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMonthlyAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMonthlyAmount_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMonthlyAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMonthlyAmount_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMonthlyAmount_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMonthlyAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMonthlyAmount_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMonthlyAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMonthlyAmount_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNCardMonthlyAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardMonthlyAmountResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMonthlyAmount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMonthlyAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_CardMonthlyAmountResponse_month(ctx, field)
			case "total_amount":
				return ec.fieldContext_CardMonthlyAmountResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CardMonthlyAmountResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMonthlyBalance_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMonthlyBalance) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMonthlyBalance_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMonthlyBalance_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMonthlyBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMonthlyBalance_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMonthlyBalance) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMonthlyBalance_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMonthlyBalance_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMonthlyBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseMonthlyBalance_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseMonthlyBalance) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseMonthlyBalance_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNCardMonthlyBalanceResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardMonthlyBalanceResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseMonthlyBalance_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseMonthlyBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_CardMonthlyBalanceResponse_month(ctx, field)
			case "total_balance":
				return ec.fieldContext_CardMonthlyBalanceResponse_total_balance(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CardMonthlyBalanceResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationCard_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationCard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationCard_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationCard_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationCard_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationCard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationCard_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationCard_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationCard_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationCard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationCard_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNCardResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationCard_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CardResponse_id(ctx, field)
			case "user_id":
				return ec.fieldContext_CardResponse_user_id(ctx, field)
			case "card_number":
				return ec.fieldContext_CardResponse_card_number(ctx, field)
			case "card_type":
				return ec.fieldContext_CardResponse_card_type(ctx, field)
			case "expire_date":
				return ec.fieldContext_CardResponse_expire_date(ctx, field)
			case "cvv":
				return ec.fieldContext_CardResponse_cvv(ctx, field)
			case "card_provider":
				return ec.fieldContext_CardResponse_card_provider(ctx, field)
			case "created_at":
				return ec.fieldContext_CardResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CardResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CardResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationCard_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationCard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationCard_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalNPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationCard_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationCardDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationCardDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationCardDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationCardDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationCardDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationCardDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationCardDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationCardDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationCardDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationCardDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationCardDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationCardDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationCardDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNCardResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardResponseDeleteAtᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationCardDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationCardDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CardResponseDeleteAt_id(ctx, field)
			case "user_id":
				return ec.fieldContext_CardResponseDeleteAt_user_id(ctx, field)
			case "card_number":
				return ec.fieldContext_CardResponseDeleteAt_card_number(ctx, field)
			case "card_type":
				return ec.fieldContext_CardResponseDeleteAt_card_type(ctx, field)
			case "expire_date":
				return ec.fieldContext_CardResponseDeleteAt_expire_date(ctx, field)
			case "cvv":
				return ec.fieldContext_CardResponseDeleteAt_cvv(ctx, field)
			case "card_provider":
				return ec.fieldContext_CardResponseDeleteAt_card_provider(ctx, field)
			case "created_at":
				return ec.fieldContext_CardResponseDeleteAt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CardResponseDeleteAt_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_CardResponseDeleteAt_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CardResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationCardDeleteAt_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationCardDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationCardDeleteAt_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalNPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationCardDeleteAt_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationCardDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationRole_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationRole_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationRole_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationRole_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationRole_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationRole_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationRole_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationRole_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalORoleResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRoleResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationRole_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RoleResponse_id(ctx, field)
			case "name":
				return ec.fieldContext_RoleResponse_name(ctx, field)
			case "created_at":
				return ec.fieldContext_RoleResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_RoleResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationRole_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationRole_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationRole_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationRoleDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationRoleDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationRoleDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationRoleDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationRoleDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationRoleDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationRoleDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationRoleDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationRoleDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationRoleDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationRoleDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationRoleDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationRoleDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalORoleResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRoleResponseDeleteAtᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationRoleDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationRoleDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RoleResponseDeleteAt_id(ctx, field)
			case "name":
				return ec.fieldContext_RoleResponseDeleteAt_name(ctx, field)
			case "created_at":
				return ec.fieldContext_RoleResponseDeleteAt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_RoleResponseDeleteAt_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_RoleResponseDeleteAt_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationRoleDeleteAt_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationRoleDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationRoleDeleteAt_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationRoleDeleteAt_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationRoleDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationSaldo_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationSaldo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationSaldo_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationSaldo_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationSaldo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationSaldo_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationSaldo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationSaldo_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationSaldo_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationSaldo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationSaldo_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationSaldo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationSaldo_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOSaldoResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationSaldo_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationSaldo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SaldoResponse_id(ctx, field)
			case "card_number":
				return ec.fieldContext_SaldoResponse_card_number(ctx, field)
			case "total_balance":
				return ec.fieldContext_SaldoResponse_total_balance(ctx, field)
			case "withdraw_time":
				return ec.fieldContext_SaldoResponse_withdraw_time(ctx, field)
			case "withdraw_amount":
				return ec.fieldContext_SaldoResponse_withdraw_amount(ctx, field)
			case "created_at":
				return ec.fieldContext_SaldoResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_SaldoResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SaldoResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationSaldo_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationSaldo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationSaldo_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationSaldo_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationSaldo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationSaldoDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationSaldoDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationSaldoDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationSaldoDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationSaldoDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationSaldoDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationSaldoDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationSaldoDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationSaldoDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationSaldoDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationSaldoDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationSaldoDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationSaldoDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOSaldoResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoResponseDeleteAtᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationSaldoDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationSaldoDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SaldoResponseDeleteAt_id(ctx, field)
			case "card_number":
				return ec.fieldContext_SaldoResponseDeleteAt_card_number(ctx, field)
			case "total_balance":
				return ec.fieldContext_SaldoResponseDeleteAt_total_balance(ctx, field)
			case "withdraw_time":
				return ec.fieldContext_SaldoResponseDeleteAt_withdraw_time(ctx, field)
			case "withdraw_amount":
				return ec.fieldContext_SaldoResponseDeleteAt_withdraw_amount(ctx, field)
			case "created_at":
				return ec.fieldContext_SaldoResponseDeleteAt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_SaldoResponseDeleteAt_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_SaldoResponseDeleteAt_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SaldoResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationSaldoDeleteAt_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationSaldoDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationSaldoDeleteAt_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationSaldoDeleteAt_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationSaldoDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTopup_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTopup) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTopup_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTopup_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTopup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTopup_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTopup) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTopup_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTopup_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTopup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTopup_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTopup) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTopup_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTopupResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTopup_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTopup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopupResponse_id(ctx, field)
			case "card_number":
				return ec.fieldContext_TopupResponse_card_number(ctx, field)
			case "topup_no":
				return ec.fieldContext_TopupResponse_topup_no(ctx, field)
			case "topup_amount":
				return ec.fieldContext_TopupResponse_topup_amount(ctx, field)
			case "topup_method":
				return ec.fieldContext_TopupResponse_topup_method(ctx, field)
			case "topup_time":
				return ec.fieldContext_TopupResponse_topup_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TopupResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TopupResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopupResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTopup_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTopup) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTopup_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTopup_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTopup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTopupDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTopupDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTopupDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTopupDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTopupDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTopupDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTopupDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTopupDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTopupDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTopupDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTopupDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTopupDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTopupDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTopupResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupResponseDeleteAtᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTopupDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTopupDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopupResponseDeleteAt_id(ctx, field)
			case "card_number":
				return ec.fieldContext_TopupResponseDeleteAt_card_number(ctx, field)
			case "topup_no":
				return ec.fieldContext_TopupResponseDeleteAt_topup_no(ctx, field)
			case "topup_amount":
				return ec.fieldContext_TopupResponseDeleteAt_topup_amount(ctx, field)
			case "topup_method":
				return ec.fieldContext_TopupResponseDeleteAt_topup_method(ctx, field)
			case "topup_time":
				return ec.fieldContext_TopupResponseDeleteAt_topup_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TopupResponseDeleteAt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TopupResponseDeleteAt_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_TopupResponseDeleteAt_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopupResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTopupDeleteAt_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTopupDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTopupDeleteAt_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTopupDeleteAt_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTopupDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransaction_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransaction) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransaction_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransaction_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransaction_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransaction) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransaction_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransaction_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransaction_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransaction) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransaction_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransactionResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransaction_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TransactionResponse_id(ctx, field)
			case "card_number":
				return ec.fieldContext_TransactionResponse_card_number(ctx, field)
			case "transaction_no":
				return ec.fieldContext_TransactionResponse_transaction_no(ctx, field)
			case "amount":
				return ec.fieldContext_TransactionResponse_amount(ctx, field)
			case "payment_method":
				return ec.fieldContext_TransactionResponse_payment_method(ctx, field)
			case "merchant_id":
				return ec.fieldContext_TransactionResponse_merchant_id(ctx, field)
			case "transaction_time":
				return ec.fieldContext_TransactionResponse_transaction_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TransactionResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TransactionResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransaction_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransaction) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransaction_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransaction_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransactionDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransactionDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransactionDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransactionDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransactionDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransactionDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransactionDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransactionDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransactionDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransactionDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransactionDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransactionDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransactionDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransactionResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionResponseDeleteAtᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransactionDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransactionDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TransactionResponseDeleteAt_id(ctx, field)
			case "card_number":
				return ec.fieldContext_TransactionResponseDeleteAt_card_number(ctx, field)
			case "transaction_no":
				return ec.fieldContext_TransactionResponseDeleteAt_transaction_no(ctx, field)
			case "amount":
				return ec.fieldContext_TransactionResponseDeleteAt_amount(ctx, field)
			case "payment_method":
				return ec.fieldContext_TransactionResponseDeleteAt_payment_method(ctx, field)
			case "merchant_id":
				return ec.fieldContext_TransactionResponseDeleteAt_merchant_id(ctx, field)
			case "transaction_time":
				return ec.fieldContext_TransactionResponseDeleteAt_transaction_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TransactionResponseDeleteAt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TransactionResponseDeleteAt_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_TransactionResponseDeleteAt_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransactionDeleteAt_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransactionDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransactionDeleteAt_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransactionDeleteAt_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransactionDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransfer_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransfer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransfer_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransfer_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransfer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransfer_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransfer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransfer_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransfer_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransfer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransfer_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransfer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransfer_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransferResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransfer_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransfer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TransferResponse_id(ctx, field)
			case "transfer_no":
				return ec.fieldContext_TransferResponse_transfer_no(ctx, field)
			case "transfer_from":
				return ec.fieldContext_TransferResponse_transfer_from(ctx, field)
			case "transfer_to":
				return ec.fieldContext_TransferResponse_transfer_to(ctx, field)
			case "transfer_amount":
				return ec.fieldContext_TransferResponse_transfer_amount(ctx, field)
			case "transfer_time":
				return ec.fieldContext_TransferResponse_transfer_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TransferResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TransferResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransferResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransfer_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransfer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransfer_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransfer_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransfer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransferDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransferDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransferDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransferDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransferDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransferDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransferDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransferDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransferDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransferDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransferDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransferDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransferDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransferResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferResponseDeleteAtᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransferDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransferDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TransferResponseDeleteAt_id(ctx, field)
			case "transfer_no":
				return ec.fieldContext_TransferResponseDeleteAt_transfer_no(ctx, field)
			case "transfer_from":
				return ec.fieldContext_TransferResponseDeleteAt_transfer_from(ctx, field)
			case "transfer_to":
				return ec.fieldContext_TransferResponseDeleteAt_transfer_to(ctx, field)
			case "transfer_amount":
				return ec.fieldContext_TransferResponseDeleteAt_transfer_amount(ctx, field)
			case "transfer_time":
				return ec.fieldContext_TransferResponseDeleteAt_transfer_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TransferResponseDeleteAt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TransferResponseDeleteAt_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_TransferResponseDeleteAt_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransferResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationTransferDeleteAt_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationTransferDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationTransferDeleteAt_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationTransferDeleteAt_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationTransferDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationUser_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationUser) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationUser_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationUser_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationUser_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationUser) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationUser_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationUser_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationUser_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationUser) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationUser_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNUserResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationUser_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserResponse_id(ctx, field)
			case "firstname":
				return ec.fieldContext_UserResponse_firstname(ctx, field)
			case "lastname":
				return ec.fieldContext_UserResponse_lastname(ctx, field)
			case "email":
				return ec.fieldContext_UserResponse_email(ctx, field)
			case "created_at":
				return ec.fieldContext_UserResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationUser_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationUser) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationUser_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalNPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationUser_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationUserDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationUserDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationUserDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationUserDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationUserDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationUserDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationUserDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationUserDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationUserDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationUserDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationUserDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationUserDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationUserDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNUserResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponseDeleteAtᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationUserDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationUserDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserResponseDeleteAt_id(ctx, field)
			case "firstname":
				return ec.fieldContext_UserResponseDeleteAt_firstname(ctx, field)
			case "lastname":
				return ec.fieldContext_UserResponseDeleteAt_lastname(ctx, field)
			case "email":
				return ec.fieldContext_UserResponseDeleteAt_email(ctx, field)
			case "created_at":
				return ec.fieldContext_UserResponseDeleteAt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserResponseDeleteAt_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_UserResponseDeleteAt_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationUserDeleteAt_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationUserDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationUserDeleteAt_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalNPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationUserDeleteAt_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationUserDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationWithdraw_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationWithdraw) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationWithdraw_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationWithdraw_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationWithdraw",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationWithdraw_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationWithdraw) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationWithdraw_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationWithdraw_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationWithdraw",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationWithdraw_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationWithdraw) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationWithdraw_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNWithdrawResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationWithdraw_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationWithdraw",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_WithdrawResponse_id(ctx, field)
			case "withdrawNo":
				return ec.fieldContext_WithdrawResponse_withdrawNo(ctx, field)
			case "cardNumber":
				return ec.fieldContext_WithdrawResponse_cardNumber(ctx, field)
			case "withdrawAmount":
				return ec.fieldContext_WithdrawResponse_withdrawAmount(ctx, field)
			case "withdrawTime":
				return ec.fieldContext_WithdrawResponse_withdrawTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_WithdrawResponse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_WithdrawResponse_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationWithdraw_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationWithdraw) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationWithdraw_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationWithdraw_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationWithdraw",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationWithdrawDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationWithdrawDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationWithdrawDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationWithdrawDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationWithdrawDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationWithdrawDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationWithdrawDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationWithdrawDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationWithdrawDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationWithdrawDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationWithdrawDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationWithdrawDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationWithdrawDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNWithdrawResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawResponseDeleteAtᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationWithdrawDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationWithdrawDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_WithdrawResponseDeleteAt_id(ctx, field)
			case "withdrawNo":
				return ec.fieldContext_WithdrawResponseDeleteAt_withdrawNo(ctx, field)
			case "cardNumber":
				return ec.fieldContext_WithdrawResponseDeleteAt_cardNumber(ctx, field)
			case "withdrawAmount":
				return ec.fieldContext_WithdrawResponseDeleteAt_withdrawAmount(ctx, field)
			case "withdrawTime":
				return ec.fieldContext_WithdrawResponseDeleteAt_withdrawTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_WithdrawResponseDeleteAt_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_WithdrawResponseDeleteAt_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_WithdrawResponseDeleteAt_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsePaginationWithdrawDeleteAt_pagination(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsePaginationWithdrawDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsePaginationWithdrawDeleteAt_pagination,
		func(ctx context.Context) (any, error) {
			return obj.Pagination, nil
		},
		nil,
		ec.marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsePaginationWithdrawDeleteAt_pagination(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsePaginationWithdrawDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "current_page":
				return ec.fieldContext_PaginationMeta_current_page(ctx, field)
			case "page_size":
				return ec.fieldContext_PaginationMeta_page_size(ctx, field)
			case "total_pages":
				return ec.fieldContext_PaginationMeta_total_pages(ctx, field)
			case "total_records":
				return ec.fieldContext_PaginationMeta_total_records(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginationMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRefreshToken_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRefreshToken) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRefreshToken_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRefreshToken_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRefreshToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRefreshToken_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRefreshToken) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRefreshToken_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRefreshToken_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRefreshToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRefreshToken_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRefreshToken) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRefreshToken_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTokenResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTokenResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRefreshToken_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRefreshToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "access_token":
				return ec.fieldContext_TokenResponse_access_token(ctx, field)
			case "refresh_token":
				return ec.fieldContext_TokenResponse_refresh_token(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TokenResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRegister_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRegister) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRegister_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRegister_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRegister",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRegister_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRegister) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRegister_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRegister_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRegister",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRegister_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRegister) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRegister_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOUserResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRegister_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRegister",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserResponse_id(ctx, field)
			case "firstname":
				return ec.fieldContext_UserResponse_firstname(ctx, field)
			case "lastname":
				return ec.fieldContext_UserResponse_lastname(ctx, field)
			case "email":
				return ec.fieldContext_UserResponse_email(ctx, field)
			case "created_at":
				return ec.fieldContext_UserResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRole_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRole_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRole_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRole_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRole_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRole_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRole_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRole_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalORoleResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRoleResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRole_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RoleResponse_id(ctx, field)
			case "name":
				return ec.fieldContext_RoleResponse_name(ctx, field)
			case "created_at":
				return ec.fieldContext_RoleResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_RoleResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRoleAll_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRoleAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRoleAll_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRoleAll_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRoleAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRoleAll_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRoleAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRoleAll_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRoleAll_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRoleAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRoleDelete_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRoleDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRoleDelete_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRoleDelete_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRoleDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRoleDelete_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRoleDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRoleDelete_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRoleDelete_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRoleDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRoleDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRoleDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRoleDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRoleDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRoleDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRoleDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRoleDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRoleDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRoleDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRoleDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseRoleDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseRoleDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseRoleDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalORoleResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRoleResponseDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseRoleDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseRoleDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RoleResponseDeleteAt_id(ctx, field)
			case "name":
				return ec.fieldContext_RoleResponseDeleteAt_name(ctx, field)
			case "created_at":
				return ec.fieldContext_RoleResponseDeleteAt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_RoleResponseDeleteAt_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_RoleResponseDeleteAt_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseSaldoAll_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseSaldoAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseSaldoAll_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseSaldoAll_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseSaldoAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseSaldoAll_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseSaldoAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseSaldoAll_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseSaldoAll_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseSaldoAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseSaldoDelete_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseSaldoDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseSaldoDelete_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseSaldoDelete_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseSaldoDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseSaldoDelete_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseSaldoDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseSaldoDelete_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseSaldoDelete_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseSaldoDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseSaldoResponse_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseSaldoResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseSaldoResponse_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseSaldoResponse_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseSaldoResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseSaldoResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseSaldoResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseSaldoResponse_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseSaldoResponse_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseSaldoResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseSaldoResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseSaldoResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseSaldoResponse_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOSaldoResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseSaldoResponse_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseSaldoResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SaldoResponse_id(ctx, field)
			case "card_number":
				return ec.fieldContext_SaldoResponse_card_number(ctx, field)
			case "total_balance":
				return ec.fieldContext_SaldoResponse_total_balance(ctx, field)
			case "withdraw_time":
				return ec.fieldContext_SaldoResponse_withdraw_time(ctx, field)
			case "withdraw_amount":
				return ec.fieldContext_SaldoResponse_withdraw_amount(ctx, field)
			case "created_at":
				return ec.fieldContext_SaldoResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_SaldoResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SaldoResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseSaldoResponseDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseSaldoResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseSaldoResponseDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseSaldoResponseDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseSaldoResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseSaldoResponseDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseSaldoResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseSaldoResponseDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseSaldoResponseDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseSaldoResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseSaldoResponseDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseSaldoResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseSaldoResponseDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOSaldoResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoResponseDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseSaldoResponseDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseSaldoResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SaldoResponseDeleteAt_id(ctx, field)
			case "card_number":
				return ec.fieldContext_SaldoResponseDeleteAt_card_number(ctx, field)
			case "total_balance":
				return ec.fieldContext_SaldoResponseDeleteAt_total_balance(ctx, field)
			case "withdraw_time":
				return ec.fieldContext_SaldoResponseDeleteAt_withdraw_time(ctx, field)
			case "withdraw_amount":
				return ec.fieldContext_SaldoResponseDeleteAt_withdraw_amount(ctx, field)
			case "created_at":
				return ec.fieldContext_SaldoResponseDeleteAt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_SaldoResponseDeleteAt_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_SaldoResponseDeleteAt_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SaldoResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopup_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopup) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopup_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopup_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopup_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopup) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopup_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopup_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopup_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopup) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopup_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTopupResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopup_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopupResponse_id(ctx, field)
			case "card_number":
				return ec.fieldContext_TopupResponse_card_number(ctx, field)
			case "topup_no":
				return ec.fieldContext_TopupResponse_topup_no(ctx, field)
			case "topup_amount":
				return ec.fieldContext_TopupResponse_topup_amount(ctx, field)
			case "topup_method":
				return ec.fieldContext_TopupResponse_topup_method(ctx, field)
			case "topup_time":
				return ec.fieldContext_TopupResponse_topup_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TopupResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TopupResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopupResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupAll_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupAll_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupAll_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupAll_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupAll_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupAll_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupDelete_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupDelete_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupDelete_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupDelete_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupDelete_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupDelete_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTopupResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupResponseDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopupResponseDeleteAt_id(ctx, field)
			case "card_number":
				return ec.fieldContext_TopupResponseDeleteAt_card_number(ctx, field)
			case "topup_no":
				return ec.fieldContext_TopupResponseDeleteAt_topup_no(ctx, field)
			case "topup_amount":
				return ec.fieldContext_TopupResponseDeleteAt_topup_amount(ctx, field)
			case "topup_method":
				return ec.fieldContext_TopupResponseDeleteAt_topup_method(ctx, field)
			case "topup_time":
				return ec.fieldContext_TopupResponseDeleteAt_topup_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TopupResponseDeleteAt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TopupResponseDeleteAt_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_TopupResponseDeleteAt_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopupResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupMonthAmount_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupMonthAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupMonthAmount_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupMonthAmount_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupMonthAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupMonthAmount_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupMonthAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupMonthAmount_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupMonthAmount_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupMonthAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupMonthAmount_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupMonthAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupMonthAmount_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTopupMonthAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthAmountResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupMonthAmount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupMonthAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_TopupMonthAmountResponse_month(ctx, field)
			case "total_amount":
				return ec.fieldContext_TopupMonthAmountResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopupMonthAmountResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupMonthMethod_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupMonthMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupMonthMethod_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupMonthMethod_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupMonthMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupMonthMethod_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupMonthMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupMonthMethod_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupMonthMethod_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupMonthMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupMonthMethod_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupMonthMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupMonthMethod_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTopupMonthMethodResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthMethodResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupMonthMethod_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupMonthMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_TopupMonthMethodResponse_month(ctx, field)
			case "topup_method":
				return ec.fieldContext_TopupMonthMethodResponse_topup_method(ctx, field)
			case "total_topups":
				return ec.fieldContext_TopupMonthMethodResponse_total_topups(ctx, field)
			case "total_amount":
				return ec.fieldContext_TopupMonthMethodResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopupMonthMethodResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupMonthStatusFailed_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupMonthStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupMonthStatusFailed_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupMonthStatusFailed_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupMonthStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupMonthStatusFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupMonthStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupMonthStatusFailed_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupMonthStatusFailed_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupMonthStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupMonthStatusFailed_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupMonthStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupMonthStatusFailed_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTopupMonthStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthStatusFailedResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupMonthStatusFailed_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupMonthStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TopupMonthStatusFailedResponse_year(ctx, field)
			case "month":
				return ec.fieldContext_TopupMonthStatusFailedResponse_month(ctx, field)
			case "total_failed":
				return ec.fieldContext_TopupMonthStatusFailedResponse_total_failed(ctx, field)
			case "total_amount":
				return ec.fieldContext_TopupMonthStatusFailedResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopupMonthStatusFailedResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupMonthStatusSuccess_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupMonthStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupMonthStatusSuccess_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupMonthStatusSuccess_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupMonthStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupMonthStatusSuccess_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupMonthStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupMonthStatusSuccess_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupMonthStatusSuccess_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupMonthStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupMonthStatusSuccess_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupMonthStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupMonthStatusSuccess_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTopupMonthStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthStatusSuccessResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupMonthStatusSuccess_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupMonthStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TopupMonthStatusSuccessResponse_year(ctx, field)
			case "month":
				return ec.fieldContext_TopupMonthStatusSuccessResponse_month(ctx, field)
			case "total_success":
				return ec.fieldContext_TopupMonthStatusSuccessResponse_total_success(ctx, field)
			case "total_amount":
				return ec.fieldContext_TopupMonthStatusSuccessResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopupMonthStatusSuccessResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupYearAmount_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupYearAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupYearAmount_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupYearAmount_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupYearAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupYearAmount_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupYearAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupYearAmount_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupYearAmount_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupYearAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupYearAmount_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupYearAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupYearAmount_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTopupYearAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearAmountResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupYearAmount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupYearAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TopupYearAmountResponse_year(ctx, field)
			case "total_amount":
				return ec.fieldContext_TopupYearAmountResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopupYearAmountResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupYearMethod_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupYearMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupYearMethod_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupYearMethod_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupYearMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupYearMethod_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupYearMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupYearMethod_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupYearMethod_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupYearMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupYearMethod_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupYearMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupYearMethod_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTopupYearMethodResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearMethodResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupYearMethod_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupYearMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TopupYearMethodResponse_year(ctx, field)
			case "topup_method":
				return ec.fieldContext_TopupYearMethodResponse_topup_method(ctx, field)
			case "total_topups":
				return ec.fieldContext_TopupYearMethodResponse_total_topups(ctx, field)
			case "total_amount":
				return ec.fieldContext_TopupYearMethodResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopupYearMethodResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupYearStatusFailed_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupYearStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupYearStatusFailed_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupYearStatusFailed_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupYearStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupYearStatusFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupYearStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupYearStatusFailed_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupYearStatusFailed_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupYearStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupYearStatusFailed_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupYearStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupYearStatusFailed_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTopupYearStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearStatusFailedResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupYearStatusFailed_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupYearStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TopupYearStatusFailedResponse_year(ctx, field)
			case "total_failed":
				return ec.fieldContext_TopupYearStatusFailedResponse_total_failed(ctx, field)
			case "total_amount":
				return ec.fieldContext_TopupYearStatusFailedResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopupYearStatusFailedResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupYearStatusSuccess_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupYearStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupYearStatusSuccess_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupYearStatusSuccess_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupYearStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupYearStatusSuccess_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupYearStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupYearStatusSuccess_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupYearStatusSuccess_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupYearStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTopupYearStatusSuccess_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTopupYearStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTopupYearStatusSuccess_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTopupYearStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearStatusSuccessResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTopupYearStatusSuccess_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTopupYearStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TopupYearStatusSuccessResponse_year(ctx, field)
			case "total_success":
				return ec.fieldContext_TopupYearStatusSuccessResponse_total_success(ctx, field)
			case "total_amount":
				return ec.fieldContext_TopupYearStatusSuccessResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopupYearStatusSuccessResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransaction_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransaction) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransaction_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransaction_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransaction_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransaction) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransaction_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransaction_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransaction_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransaction) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransaction_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTransactionResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransaction_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TransactionResponse_id(ctx, field)
			case "card_number":
				return ec.fieldContext_TransactionResponse_card_number(ctx, field)
			case "transaction_no":
				return ec.fieldContext_TransactionResponse_transaction_no(ctx, field)
			case "amount":
				return ec.fieldContext_TransactionResponse_amount(ctx, field)
			case "payment_method":
				return ec.fieldContext_TransactionResponse_payment_method(ctx, field)
			case "merchant_id":
				return ec.fieldContext_TransactionResponse_merchant_id(ctx, field)
			case "transaction_time":
				return ec.fieldContext_TransactionResponse_transaction_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TransactionResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TransactionResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionAll_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionAll_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionAll_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionAll_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionAll_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionAll_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionDelete_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionDelete_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionDelete_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionDelete_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionDelete_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionDelete_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTransactionResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionResponseDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TransactionResponseDeleteAt_id(ctx, field)
			case "card_number":
				return ec.fieldContext_TransactionResponseDeleteAt_card_number(ctx, field)
			case "transaction_no":
				return ec.fieldContext_TransactionResponseDeleteAt_transaction_no(ctx, field)
			case "amount":
				return ec.fieldContext_TransactionResponseDeleteAt_amount(ctx, field)
			case "payment_method":
				return ec.fieldContext_TransactionResponseDeleteAt_payment_method(ctx, field)
			case "merchant_id":
				return ec.fieldContext_TransactionResponseDeleteAt_merchant_id(ctx, field)
			case "transaction_time":
				return ec.fieldContext_TransactionResponseDeleteAt_transaction_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TransactionResponseDeleteAt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TransactionResponseDeleteAt_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_TransactionResponseDeleteAt_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionMonthAmount_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionMonthAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionMonthAmount_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionMonthAmount_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionMonthAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionMonthAmount_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionMonthAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionMonthAmount_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionMonthAmount_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionMonthAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionMonthAmount_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionMonthAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionMonthAmount_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransactionMonthAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthAmountResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionMonthAmount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionMonthAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_TransactionMonthAmountResponse_month(ctx, field)
			case "total_amount":
				return ec.fieldContext_TransactionMonthAmountResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionMonthAmountResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionMonthMethod_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionMonthMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionMonthMethod_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionMonthMethod_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionMonthMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionMonthMethod_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionMonthMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionMonthMethod_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionMonthMethod_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionMonthMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionMonthMethod_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionMonthMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionMonthMethod_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransactionMonthMethodResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthMethodResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionMonthMethod_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionMonthMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_TransactionMonthMethodResponse_month(ctx, field)
			case "payment_method":
				return ec.fieldContext_TransactionMonthMethodResponse_payment_method(ctx, field)
			case "total_transactions":
				return ec.fieldContext_TransactionMonthMethodResponse_total_transactions(ctx, field)
			case "total_amount":
				return ec.fieldContext_TransactionMonthMethodResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionMonthMethodResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionMonthStatusFailed_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionMonthStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionMonthStatusFailed_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionMonthStatusFailed_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionMonthStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionMonthStatusFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionMonthStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionMonthStatusFailed_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionMonthStatusFailed_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionMonthStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionMonthStatusFailed_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionMonthStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionMonthStatusFailed_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransactionMonthStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthStatusFailedResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionMonthStatusFailed_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionMonthStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TransactionMonthStatusFailedResponse_year(ctx, field)
			case "month":
				return ec.fieldContext_TransactionMonthStatusFailedResponse_month(ctx, field)
			case "total_failed":
				return ec.fieldContext_TransactionMonthStatusFailedResponse_total_failed(ctx, field)
			case "total_amount":
				return ec.fieldContext_TransactionMonthStatusFailedResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionMonthStatusFailedResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionMonthStatusSuccess_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionMonthStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionMonthStatusSuccess_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionMonthStatusSuccess_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionMonthStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionMonthStatusSuccess_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionMonthStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionMonthStatusSuccess_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionMonthStatusSuccess_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionMonthStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionMonthStatusSuccess_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionMonthStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionMonthStatusSuccess_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransactionMonthStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthStatusSuccessResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionMonthStatusSuccess_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionMonthStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TransactionMonthStatusSuccessResponse_year(ctx, field)
			case "month":
				return ec.fieldContext_TransactionMonthStatusSuccessResponse_month(ctx, field)
			case "total_success":
				return ec.fieldContext_TransactionMonthStatusSuccessResponse_total_success(ctx, field)
			case "total_amount":
				return ec.fieldContext_TransactionMonthStatusSuccessResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionMonthStatusSuccessResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionYearAmount_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionYearAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionYearAmount_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionYearAmount_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionYearAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionYearAmount_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionYearAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionYearAmount_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionYearAmount_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionYearAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionYearAmount_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionYearAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionYearAmount_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransactionYearlyAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearlyAmountResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionYearAmount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionYearAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TransactionYearlyAmountResponse_year(ctx, field)
			case "total_amount":
				return ec.fieldContext_TransactionYearlyAmountResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionYearlyAmountResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionYearMethod_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionYearMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionYearMethod_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionYearMethod_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionYearMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionYearMethod_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionYearMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionYearMethod_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionYearMethod_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionYearMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionYearMethod_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionYearMethod) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionYearMethod_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransactionYearMethodResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearMethodResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionYearMethod_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionYearMethod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TransactionYearMethodResponse_year(ctx, field)
			case "payment_method":
				return ec.fieldContext_TransactionYearMethodResponse_payment_method(ctx, field)
			case "total_transactions":
				return ec.fieldContext_TransactionYearMethodResponse_total_transactions(ctx, field)
			case "total_amount":
				return ec.fieldContext_TransactionYearMethodResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionYearMethodResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionYearStatusFailed_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionYearStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionYearStatusFailed_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionYearStatusFailed_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionYearStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionYearStatusFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionYearStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionYearStatusFailed_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionYearStatusFailed_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionYearStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionYearStatusFailed_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionYearStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionYearStatusFailed_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransactionYearStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearStatusFailedResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionYearStatusFailed_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionYearStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TransactionYearStatusFailedResponse_year(ctx, field)
			case "total_failed":
				return ec.fieldContext_TransactionYearStatusFailedResponse_total_failed(ctx, field)
			case "total_amount":
				return ec.fieldContext_TransactionYearStatusFailedResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionYearStatusFailedResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionYearStatusSuccess_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionYearStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionYearStatusSuccess_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionYearStatusSuccess_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionYearStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionYearStatusSuccess_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionYearStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionYearStatusSuccess_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionYearStatusSuccess_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionYearStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactionYearStatusSuccess_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactionYearStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactionYearStatusSuccess_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransactionYearStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearStatusSuccessResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactionYearStatusSuccess_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactionYearStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TransactionYearStatusSuccessResponse_year(ctx, field)
			case "total_success":
				return ec.fieldContext_TransactionYearStatusSuccessResponse_total_success(ctx, field)
			case "total_amount":
				return ec.fieldContext_TransactionYearStatusSuccessResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionYearStatusSuccessResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactions_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactions) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactions_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactions_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactions_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactions) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactions_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactions_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransactions_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransactions) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransactions_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransactionResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransactions_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransactions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TransactionResponse_id(ctx, field)
			case "card_number":
				return ec.fieldContext_TransactionResponse_card_number(ctx, field)
			case "transaction_no":
				return ec.fieldContext_TransactionResponse_transaction_no(ctx, field)
			case "amount":
				return ec.fieldContext_TransactionResponse_amount(ctx, field)
			case "payment_method":
				return ec.fieldContext_TransactionResponse_payment_method(ctx, field)
			case "merchant_id":
				return ec.fieldContext_TransactionResponse_merchant_id(ctx, field)
			case "transaction_time":
				return ec.fieldContext_TransactionResponse_transaction_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TransactionResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TransactionResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransfer_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransfer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransfer_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransfer_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransfer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransfer_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransfer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransfer_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransfer_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransfer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransfer_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransfer) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransfer_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTransferResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransfer_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransfer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TransferResponse_id(ctx, field)
			case "transfer_no":
				return ec.fieldContext_TransferResponse_transfer_no(ctx, field)
			case "transfer_from":
				return ec.fieldContext_TransferResponse_transfer_from(ctx, field)
			case "transfer_to":
				return ec.fieldContext_TransferResponse_transfer_to(ctx, field)
			case "transfer_amount":
				return ec.fieldContext_TransferResponse_transfer_amount(ctx, field)
			case "transfer_time":
				return ec.fieldContext_TransferResponse_transfer_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TransferResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TransferResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransferResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferAll_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferAll_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferAll_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferAll_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferAll_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferAll_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferDelete_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferDelete_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferDelete_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferDelete_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferDelete_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferDelete_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTransferResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferResponseDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TransferResponseDeleteAt_id(ctx, field)
			case "transfer_no":
				return ec.fieldContext_TransferResponseDeleteAt_transfer_no(ctx, field)
			case "transfer_from":
				return ec.fieldContext_TransferResponseDeleteAt_transfer_from(ctx, field)
			case "transfer_to":
				return ec.fieldContext_TransferResponseDeleteAt_transfer_to(ctx, field)
			case "transfer_amount":
				return ec.fieldContext_TransferResponseDeleteAt_transfer_amount(ctx, field)
			case "transfer_time":
				return ec.fieldContext_TransferResponseDeleteAt_transfer_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TransferResponseDeleteAt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TransferResponseDeleteAt_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_TransferResponseDeleteAt_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransferResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferMonthAmount_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferMonthAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferMonthAmount_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferMonthAmount_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferMonthAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferMonthAmount_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferMonthAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferMonthAmount_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferMonthAmount_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferMonthAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferMonthAmount_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferMonthAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferMonthAmount_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransferMonthAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferMonthAmountResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferMonthAmount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferMonthAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_TransferMonthAmountResponse_month(ctx, field)
			case "total_amount":
				return ec.fieldContext_TransferMonthAmountResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransferMonthAmountResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferMonthStatusFailed_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferMonthStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferMonthStatusFailed_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferMonthStatusFailed_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferMonthStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferMonthStatusFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferMonthStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferMonthStatusFailed_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferMonthStatusFailed_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferMonthStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferMonthStatusFailed_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferMonthStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferMonthStatusFailed_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransferMonthStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferMonthStatusFailedResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferMonthStatusFailed_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferMonthStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TransferMonthStatusFailedResponse_year(ctx, field)
			case "month":
				return ec.fieldContext_TransferMonthStatusFailedResponse_month(ctx, field)
			case "total_failed":
				return ec.fieldContext_TransferMonthStatusFailedResponse_total_failed(ctx, field)
			case "total_amount":
				return ec.fieldContext_TransferMonthStatusFailedResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransferMonthStatusFailedResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferMonthStatusSuccess_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferMonthStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferMonthStatusSuccess_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferMonthStatusSuccess_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferMonthStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferMonthStatusSuccess_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferMonthStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferMonthStatusSuccess_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferMonthStatusSuccess_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferMonthStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferMonthStatusSuccess_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferMonthStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferMonthStatusSuccess_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransferMonthStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferMonthStatusSuccessResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferMonthStatusSuccess_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferMonthStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TransferMonthStatusSuccessResponse_year(ctx, field)
			case "month":
				return ec.fieldContext_TransferMonthStatusSuccessResponse_month(ctx, field)
			case "total_success":
				return ec.fieldContext_TransferMonthStatusSuccessResponse_total_success(ctx, field)
			case "total_amount":
				return ec.fieldContext_TransferMonthStatusSuccessResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransferMonthStatusSuccessResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferYearAmount_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferYearAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferYearAmount_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferYearAmount_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferYearAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferYearAmount_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferYearAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferYearAmount_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferYearAmount_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferYearAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferYearAmount_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferYearAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferYearAmount_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransferYearAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferYearAmountResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferYearAmount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferYearAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TransferYearAmountResponse_year(ctx, field)
			case "total_amount":
				return ec.fieldContext_TransferYearAmountResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransferYearAmountResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferYearStatusFailed_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferYearStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferYearStatusFailed_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferYearStatusFailed_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferYearStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferYearStatusFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferYearStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferYearStatusFailed_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferYearStatusFailed_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferYearStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferYearStatusFailed_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferYearStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferYearStatusFailed_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransferYearStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferYearStatusFailedResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferYearStatusFailed_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferYearStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TransferYearStatusFailedResponse_year(ctx, field)
			case "total_failed":
				return ec.fieldContext_TransferYearStatusFailedResponse_total_failed(ctx, field)
			case "total_amount":
				return ec.fieldContext_TransferYearStatusFailedResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransferYearStatusFailedResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferYearStatusSuccess_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferYearStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferYearStatusSuccess_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferYearStatusSuccess_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferYearStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferYearStatusSuccess_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferYearStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferYearStatusSuccess_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferYearStatusSuccess_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferYearStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransferYearStatusSuccess_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransferYearStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransferYearStatusSuccess_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransferYearStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferYearStatusSuccessResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransferYearStatusSuccess_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransferYearStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_TransferYearStatusSuccessResponse_year(ctx, field)
			case "total_success":
				return ec.fieldContext_TransferYearStatusSuccessResponse_total_success(ctx, field)
			case "total_amount":
				return ec.fieldContext_TransferYearStatusSuccessResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransferYearStatusSuccessResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransfers_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransfers) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransfers_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransfers_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransfers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransfers_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransfers) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransfers_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransfers_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransfers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseTransfers_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseTransfers) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseTransfers_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTransferResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseTransfers_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseTransfers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TransferResponse_id(ctx, field)
			case "transfer_no":
				return ec.fieldContext_TransferResponse_transfer_no(ctx, field)
			case "transfer_from":
				return ec.fieldContext_TransferResponse_transfer_from(ctx, field)
			case "transfer_to":
				return ec.fieldContext_TransferResponse_transfer_to(ctx, field)
			case "transfer_amount":
				return ec.fieldContext_TransferResponse_transfer_amount(ctx, field)
			case "transfer_time":
				return ec.fieldContext_TransferResponse_transfer_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TransferResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TransferResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransferResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseUserAll_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseUserAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseUserAll_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseUserAll_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseUserAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseUserAll_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseUserAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseUserAll_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseUserAll_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseUserAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseUserDelete_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseUserDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseUserDelete_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseUserDelete_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseUserDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseUserDelete_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseUserDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseUserDelete_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseUserDelete_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseUserDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseUserResponse_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseUserResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseUserResponse_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseUserResponse_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseUserResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseUserResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseUserResponse_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseUserResponse_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseUserResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseUserResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseUserResponse_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOUserResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseUserResponse_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserResponse_id(ctx, field)
			case "firstname":
				return ec.fieldContext_UserResponse_firstname(ctx, field)
			case "lastname":
				return ec.fieldContext_UserResponse_lastname(ctx, field)
			case "email":
				return ec.fieldContext_UserResponse_email(ctx, field)
			case "created_at":
				return ec.fieldContext_UserResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseUserResponseDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseUserResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseUserResponseDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseUserResponseDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseUserResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseUserResponseDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseUserResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseUserResponseDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseUserResponseDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseUserResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseUserResponseDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseUserResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseUserResponseDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOUserResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponseDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseUserResponseDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseUserResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserResponseDeleteAt_id(ctx, field)
			case "firstname":
				return ec.fieldContext_UserResponseDeleteAt_firstname(ctx, field)
			case "lastname":
				return ec.fieldContext_UserResponseDeleteAt_lastname(ctx, field)
			case "email":
				return ec.fieldContext_UserResponseDeleteAt_email(ctx, field)
			case "created_at":
				return ec.fieldContext_UserResponseDeleteAt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserResponseDeleteAt_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_UserResponseDeleteAt_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdraw_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdraw) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdraw_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdraw_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdraw",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdraw_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdraw) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdraw_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdraw_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdraw",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdraw_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdraw) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdraw_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOWithdrawResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdraw_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdraw",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_WithdrawResponse_id(ctx, field)
			case "withdrawNo":
				return ec.fieldContext_WithdrawResponse_withdrawNo(ctx, field)
			case "cardNumber":
				return ec.fieldContext_WithdrawResponse_cardNumber(ctx, field)
			case "withdrawAmount":
				return ec.fieldContext_WithdrawResponse_withdrawAmount(ctx, field)
			case "withdrawTime":
				return ec.fieldContext_WithdrawResponse_withdrawTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_WithdrawResponse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_WithdrawResponse_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawAll_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawAll_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawAll_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawAll_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawAll) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawAll_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawAll_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawDelete_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawDelete_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawDelete_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawDelete_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawDelete) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawDelete_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawDelete_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawDeleteAt_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawDeleteAt_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawDeleteAt_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawDeleteAt_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawDeleteAt_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOWithdrawResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawResponseDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawDeleteAt_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_WithdrawResponseDeleteAt_id(ctx, field)
			case "withdrawNo":
				return ec.fieldContext_WithdrawResponseDeleteAt_withdrawNo(ctx, field)
			case "cardNumber":
				return ec.fieldContext_WithdrawResponseDeleteAt_cardNumber(ctx, field)
			case "withdrawAmount":
				return ec.fieldContext_WithdrawResponseDeleteAt_withdrawAmount(ctx, field)
			case "withdrawTime":
				return ec.fieldContext_WithdrawResponseDeleteAt_withdrawTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_WithdrawResponseDeleteAt_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_WithdrawResponseDeleteAt_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_WithdrawResponseDeleteAt_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawResponseDeleteAt", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawMonthAmount_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawMonthAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawMonthAmount_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawMonthAmount_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawMonthAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawMonthAmount_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawMonthAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawMonthAmount_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawMonthAmount_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawMonthAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawMonthAmount_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawMonthAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawMonthAmount_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNWithdrawMonthlyAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawMonthlyAmountResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawMonthAmount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawMonthAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_WithdrawMonthlyAmountResponse_month(ctx, field)
			case "totalAmount":
				return ec.fieldContext_WithdrawMonthlyAmountResponse_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawMonthlyAmountResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawMonthStatusFailed_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawMonthStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawMonthStatusFailed_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawMonthStatusFailed_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawMonthStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawMonthStatusFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawMonthStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawMonthStatusFailed_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawMonthStatusFailed_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawMonthStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawMonthStatusFailed_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawMonthStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawMonthStatusFailed_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNWithdrawMonthStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawMonthStatusFailedResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawMonthStatusFailed_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawMonthStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_WithdrawMonthStatusFailedResponse_year(ctx, field)
			case "month":
				return ec.fieldContext_WithdrawMonthStatusFailedResponse_month(ctx, field)
			case "totalFailed":
				return ec.fieldContext_WithdrawMonthStatusFailedResponse_totalFailed(ctx, field)
			case "totalAmount":
				return ec.fieldContext_WithdrawMonthStatusFailedResponse_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawMonthStatusFailedResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawMonthStatusSuccess_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawMonthStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawMonthStatusSuccess_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawMonthStatusSuccess_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawMonthStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawMonthStatusSuccess_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawMonthStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawMonthStatusSuccess_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawMonthStatusSuccess_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawMonthStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawMonthStatusSuccess_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawMonthStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawMonthStatusSuccess_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNWithdrawMonthStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawMonthStatusSuccessResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawMonthStatusSuccess_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawMonthStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_WithdrawMonthStatusSuccessResponse_year(ctx, field)
			case "month":
				return ec.fieldContext_WithdrawMonthStatusSuccessResponse_month(ctx, field)
			case "totalSuccess":
				return ec.fieldContext_WithdrawMonthStatusSuccessResponse_totalSuccess(ctx, field)
			case "totalAmount":
				return ec.fieldContext_WithdrawMonthStatusSuccessResponse_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawMonthStatusSuccessResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawYearAmount_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawYearAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawYearAmount_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawYearAmount_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawYearAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawYearAmount_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawYearAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawYearAmount_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawYearAmount_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawYearAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawYearAmount_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawYearAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawYearAmount_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNWithdrawYearlyAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawYearlyAmountResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawYearAmount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawYearAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_WithdrawYearlyAmountResponse_year(ctx, field)
			case "totalAmount":
				return ec.fieldContext_WithdrawYearlyAmountResponse_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawYearlyAmountResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawYearStatusFailed_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawYearStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawYearStatusFailed_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawYearStatusFailed_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawYearStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawYearStatusFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawYearStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawYearStatusFailed_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawYearStatusFailed_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawYearStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawYearStatusFailed_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawYearStatusFailed) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawYearStatusFailed_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNWithdrawYearStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawYearStatusFailedResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawYearStatusFailed_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawYearStatusFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_WithdrawYearStatusFailedResponse_year(ctx, field)
			case "totalFailed":
				return ec.fieldContext_WithdrawYearStatusFailedResponse_totalFailed(ctx, field)
			case "totalAmount":
				return ec.fieldContext_WithdrawYearStatusFailedResponse_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawYearStatusFailedResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawYearStatusSuccess_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawYearStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawYearStatusSuccess_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawYearStatusSuccess_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawYearStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawYearStatusSuccess_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawYearStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawYearStatusSuccess_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawYearStatusSuccess_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawYearStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseWithdrawYearStatusSuccess_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseWithdrawYearStatusSuccess) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseWithdrawYearStatusSuccess_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNWithdrawYearStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawYearStatusSuccessResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseWithdrawYearStatusSuccess_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseWithdrawYearStatusSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_WithdrawYearStatusSuccessResponse_year(ctx, field)
			case "totalSuccess":
				return ec.fieldContext_WithdrawYearStatusSuccessResponse_totalSuccess(ctx, field)
			case "totalAmount":
				return ec.fieldContext_WithdrawYearStatusSuccessResponse_totalAmount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawYearStatusSuccessResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseYearSaldoBalances_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseYearSaldoBalances) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseYearSaldoBalances_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseYearSaldoBalances_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseYearSaldoBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseYearSaldoBalances_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseYearSaldoBalances) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseYearSaldoBalances_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseYearSaldoBalances_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseYearSaldoBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseYearSaldoBalances_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseYearSaldoBalances) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseYearSaldoBalances_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOSaldoYearBalanceResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoYearBalanceResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseYearSaldoBalances_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseYearSaldoBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_SaldoYearBalanceResponse_year(ctx, field)
			case "total_balance":
				return ec.fieldContext_SaldoYearBalanceResponse_total_balance(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SaldoYearBalanceResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseYearTotalSaldo_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseYearTotalSaldo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseYearTotalSaldo_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseYearTotalSaldo_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseYearTotalSaldo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseYearTotalSaldo_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseYearTotalSaldo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseYearTotalSaldo_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseYearTotalSaldo_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseYearTotalSaldo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseYearTotalSaldo_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseYearTotalSaldo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseYearTotalSaldo_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOSaldoYearTotalBalanceResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoYearTotalBalanceResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponseYearTotalSaldo_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseYearTotalSaldo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_SaldoYearTotalBalanceResponse_year(ctx, field)
			case "total_balance":
				return ec.fieldContext_SaldoYearTotalBalanceResponse_total_balance(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SaldoYearTotalBalanceResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseYearlyAmount_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseYearlyAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseYearlyAmount_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseYearlyAmount_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseYearlyAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseYearlyAmount_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseYearlyAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseYearlyAmount_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseYearlyAmount_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseYearlyAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseYearlyAmount_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseYearlyAmount) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseYearlyAmount_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNCardYearlyAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardYearlyAmountResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseYearlyAmount_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseYearlyAmount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_CardYearlyAmountResponse_year(ctx, field)
			case "total_amount":
				return ec.fieldContext_CardYearlyAmountResponse_total_amount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CardYearlyAmountResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseYearlyBalance_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseYearlyBalance) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseYearlyBalance_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseYearlyBalance_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseYearlyBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseYearlyBalance_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseYearlyBalance) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseYearlyBalance_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseYearlyBalance_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseYearlyBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponseYearlyBalance_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponseYearlyBalance) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponseYearlyBalance_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNCardYearlyBalanceResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardYearlyBalanceResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponseYearlyBalance_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponseYearlyBalance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_CardYearlyBalanceResponse_year(ctx, field)
			case "total_balance":
				return ec.fieldContext_CardYearlyBalanceResponse_total_balance(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CardYearlyBalanceResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesMerchant_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesMerchant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesMerchant_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesMerchant_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesMerchant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesMerchant_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesMerchant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesMerchant_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesMerchant_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesMerchant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesMerchant_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesMerchant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesMerchant_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNMerchantResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesMerchant_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesMerchant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MerchantResponse_id(ctx, field)
			case "name":
				return ec.fieldContext_MerchantResponse_name(ctx, field)
			case "apiKey":
				return ec.fieldContext_MerchantResponse_apiKey(ctx, field)
			case "status":
				return ec.fieldContext_MerchantResponse_status(ctx, field)
			case "userId":
				return ec.fieldContext_MerchantResponse_userId(ctx, field)
			case "createdAt":
				return ec.fieldContext_MerchantResponse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MerchantResponse_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MerchantResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesRole_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesRole_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesRole_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesRole_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesRole_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesRole_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesRole_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesRole_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalORoleResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRoleResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesRole_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RoleResponse_id(ctx, field)
			case "name":
				return ec.fieldContext_RoleResponse_name(ctx, field)
			case "created_at":
				return ec.fieldContext_RoleResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_RoleResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesSaldo_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesSaldo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesSaldo_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesSaldo_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesSaldo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesSaldo_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesSaldo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesSaldo_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesSaldo_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesSaldo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesSaldo_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesSaldo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesSaldo_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOSaldoResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesSaldo_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesSaldo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SaldoResponse_id(ctx, field)
			case "card_number":
				return ec.fieldContext_SaldoResponse_card_number(ctx, field)
			case "total_balance":
				return ec.fieldContext_SaldoResponse_total_balance(ctx, field)
			case "withdraw_time":
				return ec.fieldContext_SaldoResponse_withdraw_time(ctx, field)
			case "withdraw_amount":
				return ec.fieldContext_SaldoResponse_withdraw_amount(ctx, field)
			case "created_at":
				return ec.fieldContext_SaldoResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_SaldoResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SaldoResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesTopup_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesTopup) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesTopup_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesTopup_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesTopup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesTopup_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesTopup) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesTopup_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesTopup_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesTopup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesTopup_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesTopup) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesTopup_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOTopupResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupResponseᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesTopup_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesTopup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopupResponse_id(ctx, field)
			case "card_number":
				return ec.fieldContext_TopupResponse_card_number(ctx, field)
			case "topup_no":
				return ec.fieldContext_TopupResponse_topup_no(ctx, field)
			case "topup_amount":
				return ec.fieldContext_TopupResponse_topup_amount(ctx, field)
			case "topup_method":
				return ec.fieldContext_TopupResponse_topup_method(ctx, field)
			case "topup_time":
				return ec.fieldContext_TopupResponse_topup_time(ctx, field)
			case "created_at":
				return ec.fieldContext_TopupResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_TopupResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopupResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesUser_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesUser) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesUser_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesUser_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesUser_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesUser) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesUser_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesUser_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesUser_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesUser) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesUser_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNUserResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesUser_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserResponse_id(ctx, field)
			case "firstname":
				return ec.fieldContext_UserResponse_firstname(ctx, field)
			case "lastname":
				return ec.fieldContext_UserResponse_lastname(ctx, field)
			case "email":
				return ec.fieldContext_UserResponse_email(ctx, field)
			case "created_at":
				return ec.fieldContext_UserResponse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserResponse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesWithdraw_status(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesWithdraw) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesWithdraw_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesWithdraw_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesWithdraw",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesWithdraw_message(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesWithdraw) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesWithdraw_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesWithdraw_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesWithdraw",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiResponsesWithdraw_data(ctx context.Context, field graphql.CollectedField, obj *model.APIResponsesWithdraw) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ApiResponsesWithdraw_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNWithdrawResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawResponseᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ApiResponsesWithdraw_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiResponsesWithdraw",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_WithdrawResponse_id(ctx, field)
			case "withdrawNo":
				return ec.fieldContext_WithdrawResponse_withdrawNo(ctx, field)
			case "cardNumber":
				return ec.fieldContext_WithdrawResponse_cardNumber(ctx, field)
			case "withdrawAmount":
				return ec.fieldContext_WithdrawResponse_withdrawAmount(ctx, field)
			case "withdrawTime":
				return ec.fieldContext_WithdrawResponse_withdrawTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_WithdrawResponse_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_WithdrawResponse_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardDashboardByNumberResponse_total_balance(ctx context.Context, field graphql.CollectedField, obj *model.CardDashboardByNumberResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardDashboardByNumberResponse_total_balance,
		func(ctx context.Context) (any, error) {
			return obj.TotalBalance, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardDashboardByNumberResponse_total_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardDashboardByNumberResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardDashboardByNumberResponse_total_topup(ctx context.Context, field graphql.CollectedField, obj *model.CardDashboardByNumberResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardDashboardByNumberResponse_total_topup,
		func(ctx context.Context) (any, error) {
			return obj.TotalTopup, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardDashboardByNumberResponse_total_topup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardDashboardByNumberResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardDashboardByNumberResponse_total_withdraw(ctx context.Context, field graphql.CollectedField, obj *model.CardDashboardByNumberResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardDashboardByNumberResponse_total_withdraw,
		func(ctx context.Context) (any, error) {
			return obj.TotalWithdraw, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardDashboardByNumberResponse_total_withdraw(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardDashboardByNumberResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardDashboardByNumberResponse_total_transaction(ctx context.Context, field graphql.CollectedField, obj *model.CardDashboardByNumberResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardDashboardByNumberResponse_total_transaction,
		func(ctx context.Context) (any, error) {
			return obj.TotalTransaction, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardDashboardByNumberResponse_total_transaction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardDashboardByNumberResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardDashboardByNumberResponse_total_transfer_send(ctx context.Context, field graphql.CollectedField, obj *model.CardDashboardByNumberResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardDashboardByNumberResponse_total_transfer_send,
		func(ctx context.Context) (any, error) {
			return obj.TotalTransferSend, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardDashboardByNumberResponse_total_transfer_send(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardDashboardByNumberResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardDashboardByNumberResponse_total_transfer_receiver(ctx context.Context, field graphql.CollectedField, obj *model.CardDashboardByNumberResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardDashboardByNumberResponse_total_transfer_receiver,
		func(ctx context.Context) (any, error) {
			return obj.TotalTransferReceiver, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardDashboardByNumberResponse_total_transfer_receiver(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardDashboardByNumberResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardDashboardResponse_total_balance(ctx context.Context, field graphql.CollectedField, obj *model.CardDashboardResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardDashboardResponse_total_balance,
		func(ctx context.Context) (any, error) {
			return obj.TotalBalance, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardDashboardResponse_total_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardDashboardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardDashboardResponse_total_topup(ctx context.Context, field graphql.CollectedField, obj *model.CardDashboardResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardDashboardResponse_total_topup,
		func(ctx context.Context) (any, error) {
			return obj.TotalTopup, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardDashboardResponse_total_topup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardDashboardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardDashboardResponse_total_withdraw(ctx context.Context, field graphql.CollectedField, obj *model.CardDashboardResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardDashboardResponse_total_withdraw,
		func(ctx context.Context) (any, error) {
			return obj.TotalWithdraw, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardDashboardResponse_total_withdraw(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardDashboardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardDashboardResponse_total_transaction(ctx context.Context, field graphql.CollectedField, obj *model.CardDashboardResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardDashboardResponse_total_transaction,
		func(ctx context.Context) (any, error) {
			return obj.TotalTransaction, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardDashboardResponse_total_transaction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardDashboardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardDashboardResponse_total_transfer(ctx context.Context, field graphql.CollectedField, obj *model.CardDashboardResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardDashboardResponse_total_transfer,
		func(ctx context.Context) (any, error) {
			return obj.TotalTransfer, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardDashboardResponse_total_transfer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardDashboardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardMonthlyAmountResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.CardMonthlyAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardMonthlyAmountResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardMonthlyAmountResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardMonthlyAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardMonthlyAmountResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.CardMonthlyAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardMonthlyAmountResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardMonthlyAmountResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardMonthlyAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardMonthlyBalanceResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.CardMonthlyBalanceResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardMonthlyBalanceResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardMonthlyBalanceResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardMonthlyBalanceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardMonthlyBalanceResponse_total_balance(ctx context.Context, field graphql.CollectedField, obj *model.CardMonthlyBalanceResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardMonthlyBalanceResponse_total_balance,
		func(ctx context.Context) (any, error) {
			return obj.TotalBalance, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardMonthlyBalanceResponse_total_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardMonthlyBalanceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.CardResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponse_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponse_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponse_user_id(ctx context.Context, field graphql.CollectedField, obj *model.CardResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponse_user_id,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponse_user_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponse_card_number(ctx context.Context, field graphql.CollectedField, obj *model.CardResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponse_card_number,
		func(ctx context.Context) (any, error) {
			return obj.CardNumber, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponse_card_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponse_card_type(ctx context.Context, field graphql.CollectedField, obj *model.CardResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponse_card_type,
		func(ctx context.Context) (any, error) {
			return obj.CardType, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponse_card_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponse_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.CardResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponse_expire_date,
		func(ctx context.Context) (any, error) {
			return obj.ExpireDate, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponse_expire_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponse_cvv(ctx context.Context, field graphql.CollectedField, obj *model.CardResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponse_cvv,
		func(ctx context.Context) (any, error) {
			return obj.Cvv, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponse_cvv(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponse_card_provider(ctx context.Context, field graphql.CollectedField, obj *model.CardResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponse_card_provider,
		func(ctx context.Context) (any, error) {
			return obj.CardProvider, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponse_card_provider(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CardResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponse_created_at,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponse_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CardResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponse_updated_at,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponse_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponseDeleteAt_id(ctx context.Context, field graphql.CollectedField, obj *model.CardResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponseDeleteAt_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponseDeleteAt_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponseDeleteAt_user_id(ctx context.Context, field graphql.CollectedField, obj *model.CardResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponseDeleteAt_user_id,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponseDeleteAt_user_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponseDeleteAt_card_number(ctx context.Context, field graphql.CollectedField, obj *model.CardResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponseDeleteAt_card_number,
		func(ctx context.Context) (any, error) {
			return obj.CardNumber, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponseDeleteAt_card_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponseDeleteAt_card_type(ctx context.Context, field graphql.CollectedField, obj *model.CardResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponseDeleteAt_card_type,
		func(ctx context.Context) (any, error) {
			return obj.CardType, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponseDeleteAt_card_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponseDeleteAt_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.CardResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponseDeleteAt_expire_date,
		func(ctx context.Context) (any, error) {
			return obj.ExpireDate, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponseDeleteAt_expire_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponseDeleteAt_cvv(ctx context.Context, field graphql.CollectedField, obj *model.CardResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponseDeleteAt_cvv,
		func(ctx context.Context) (any, error) {
			return obj.Cvv, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponseDeleteAt_cvv(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponseDeleteAt_card_provider(ctx context.Context, field graphql.CollectedField, obj *model.CardResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponseDeleteAt_card_provider,
		func(ctx context.Context) (any, error) {
			return obj.CardProvider, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponseDeleteAt_card_provider(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponseDeleteAt_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CardResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponseDeleteAt_created_at,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponseDeleteAt_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponseDeleteAt_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CardResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponseDeleteAt_updated_at,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardResponseDeleteAt_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardResponseDeleteAt_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.CardResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardResponseDeleteAt_deleted_at,
		func(ctx context.Context) (any, error) {
			return obj.DeletedAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CardResponseDeleteAt_deleted_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardYearlyAmountResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.CardYearlyAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardYearlyAmountResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardYearlyAmountResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardYearlyAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardYearlyAmountResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.CardYearlyAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardYearlyAmountResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardYearlyAmountResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardYearlyAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardYearlyBalanceResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.CardYearlyBalanceResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardYearlyBalanceResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardYearlyBalanceResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardYearlyBalanceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CardYearlyBalanceResponse_total_balance(ctx context.Context, field graphql.CollectedField, obj *model.CardYearlyBalanceResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CardYearlyBalanceResponse_total_balance,
		func(ctx context.Context) (any, error) {
			return obj.TotalBalance, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CardYearlyBalanceResponse_total_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CardYearlyBalanceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantMonthlyAmountResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.MerchantMonthlyAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantMonthlyAmountResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantMonthlyAmountResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantMonthlyAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantMonthlyAmountResponse_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.MerchantMonthlyAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantMonthlyAmountResponse_totalAmount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantMonthlyAmountResponse_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantMonthlyAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantMonthlyPaymentMethodResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.MerchantMonthlyPaymentMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantMonthlyPaymentMethodResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantMonthlyPaymentMethodResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantMonthlyPaymentMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantMonthlyPaymentMethodResponse_paymentMethod(ctx context.Context, field graphql.CollectedField, obj *model.MerchantMonthlyPaymentMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantMonthlyPaymentMethodResponse_paymentMethod,
		func(ctx context.Context) (any, error) {
			return obj.PaymentMethod, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantMonthlyPaymentMethodResponse_paymentMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantMonthlyPaymentMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantMonthlyPaymentMethodResponse_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.MerchantMonthlyPaymentMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantMonthlyPaymentMethodResponse_totalAmount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantMonthlyPaymentMethodResponse_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantMonthlyPaymentMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantMonthlyTotalAmountResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.MerchantMonthlyTotalAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantMonthlyTotalAmountResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantMonthlyTotalAmountResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantMonthlyTotalAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantMonthlyTotalAmountResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.MerchantMonthlyTotalAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantMonthlyTotalAmountResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantMonthlyTotalAmountResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantMonthlyTotalAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantMonthlyTotalAmountResponse_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.MerchantMonthlyTotalAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantMonthlyTotalAmountResponse_totalAmount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantMonthlyTotalAmountResponse_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantMonthlyTotalAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponse_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponse_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponse_name(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponse_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponse_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponse_apiKey(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponse_apiKey,
		func(ctx context.Context) (any, error) {
			return obj.APIKey, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponse_apiKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponse_status(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponse_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponse_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponse_userId(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponse_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponse_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponse_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponse_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponse_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponse_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponse_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponse_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponseDeleteAt_id(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponseDeleteAt_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponseDeleteAt_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponseDeleteAt_name(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponseDeleteAt_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponseDeleteAt_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponseDeleteAt_apiKey(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponseDeleteAt_apiKey,
		func(ctx context.Context) (any, error) {
			return obj.APIKey, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponseDeleteAt_apiKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponseDeleteAt_status(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponseDeleteAt_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponseDeleteAt_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponseDeleteAt_userId(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponseDeleteAt_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponseDeleteAt_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponseDeleteAt_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponseDeleteAt_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponseDeleteAt_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponseDeleteAt_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponseDeleteAt_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponseDeleteAt_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantResponseDeleteAt_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.MerchantResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantResponseDeleteAt_deletedAt,
		func(ctx context.Context) (any, error) {
			return obj.DeletedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantResponseDeleteAt_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantTransactionResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.MerchantTransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantTransactionResponse_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantTransactionResponse_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantTransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantTransactionResponse_cardNumber(ctx context.Context, field graphql.CollectedField, obj *model.MerchantTransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantTransactionResponse_cardNumber,
		func(ctx context.Context) (any, error) {
			return obj.CardNumber, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantTransactionResponse_cardNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantTransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantTransactionResponse_amount(ctx context.Context, field graphql.CollectedField, obj *model.MerchantTransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantTransactionResponse_amount,
		func(ctx context.Context) (any, error) {
			return obj.Amount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantTransactionResponse_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantTransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantTransactionResponse_paymentMethod(ctx context.Context, field graphql.CollectedField, obj *model.MerchantTransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantTransactionResponse_paymentMethod,
		func(ctx context.Context) (any, error) {
			return obj.PaymentMethod, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantTransactionResponse_paymentMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantTransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantTransactionResponse_merchantId(ctx context.Context, field graphql.CollectedField, obj *model.MerchantTransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantTransactionResponse_merchantId,
		func(ctx context.Context) (any, error) {
			return obj.MerchantID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantTransactionResponse_merchantId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantTransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantTransactionResponse_merchantName(ctx context.Context, field graphql.CollectedField, obj *model.MerchantTransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantTransactionResponse_merchantName,
		func(ctx context.Context) (any, error) {
			return obj.MerchantName, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantTransactionResponse_merchantName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantTransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantTransactionResponse_transactionTime(ctx context.Context, field graphql.CollectedField, obj *model.MerchantTransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantTransactionResponse_transactionTime,
		func(ctx context.Context) (any, error) {
			return obj.TransactionTime, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantTransactionResponse_transactionTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantTransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantTransactionResponse_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MerchantTransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantTransactionResponse_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantTransactionResponse_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantTransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantTransactionResponse_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MerchantTransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantTransactionResponse_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantTransactionResponse_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantTransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantTransactionResponse_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.MerchantTransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantTransactionResponse_deletedAt,
		func(ctx context.Context) (any, error) {
			return obj.DeletedAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MerchantTransactionResponse_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantTransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantYearlyAmountResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.MerchantYearlyAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantYearlyAmountResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantYearlyAmountResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantYearlyAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantYearlyAmountResponse_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.MerchantYearlyAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantYearlyAmountResponse_totalAmount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantYearlyAmountResponse_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantYearlyAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantYearlyPaymentMethodResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.MerchantYearlyPaymentMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantYearlyPaymentMethodResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantYearlyPaymentMethodResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantYearlyPaymentMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantYearlyPaymentMethodResponse_paymentMethod(ctx context.Context, field graphql.CollectedField, obj *model.MerchantYearlyPaymentMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantYearlyPaymentMethodResponse_paymentMethod,
		func(ctx context.Context) (any, error) {
			return obj.PaymentMethod, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantYearlyPaymentMethodResponse_paymentMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantYearlyPaymentMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantYearlyPaymentMethodResponse_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.MerchantYearlyPaymentMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantYearlyPaymentMethodResponse_totalAmount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantYearlyPaymentMethodResponse_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantYearlyPaymentMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantYearlyTotalAmountResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.MerchantYearlyTotalAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantYearlyTotalAmountResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantYearlyTotalAmountResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantYearlyTotalAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MerchantYearlyTotalAmountResponse_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.MerchantYearlyTotalAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MerchantYearlyTotalAmountResponse_totalAmount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MerchantYearlyTotalAmountResponse_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MerchantYearlyTotalAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_registerUser,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RegisterUser(ctx, fc.Args["input"].(model.RegisterInput))
		},
		nil,
		ec.marshalNApiResponseRegister2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRegister,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_registerUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseRegister_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseRegister_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseRegister_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseRegister", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_loginUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_loginUser,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().LoginUser(ctx, fc.Args["input"].(model.LoginInput))
		},
		nil,
		ec.marshalNApiResponseLogin2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseLogin,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_loginUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseLogin_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseLogin_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseLogin_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseLogin", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_loginUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_refreshToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_refreshToken,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RefreshToken(ctx, fc.Args["input"].(model.RefreshTokenInput))
		},
		nil,
		ec.marshalNApiResponseRefreshToken2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRefreshToken,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_refreshToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseRefreshToken_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseRefreshToken_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseRefreshToken_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseRefreshToken", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_refreshToken_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createCard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateCard(ctx, fc.Args["input"].(model.CreateCardInput))
		},
		nil,
		ec.marshalNApiResponseCard2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCard,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createCard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseCard_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseCard_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseCard_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseCard", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateCard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateCard(ctx, fc.Args["input"].(model.UpdateCardInput))
		},
		nil,
		ec.marshalNApiResponseCard2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCard,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateCard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseCard_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseCard_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseCard_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseCard", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trashedCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_trashedCard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().TrashedCard(ctx, fc.Args["input"].(model.FindByIDCardInput))
		},
		nil,
		ec.marshalNApiResponseCardDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCardDeleteAt,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_trashedCard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseCardDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseCardDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseCardDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseCardDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trashedCard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreCard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RestoreCard(ctx, fc.Args["input"].(model.FindByIDCardInput))
		},
		nil,
		ec.marshalNApiResponseCardDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCardDeleteAt,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreCard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseCardDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseCardDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseCardDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseCardDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_restoreCard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCardPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteCardPermanent,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteCardPermanent(ctx, fc.Args["input"].(model.FindByIDCardInput))
		},
		nil,
		ec.marshalNApiResponseCardDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCardDelete,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteCardPermanent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseCardDelete_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseCardDelete_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseCardDelete", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCardPermanent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreAllCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreAllCard,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().RestoreAllCard(ctx)
		},
		nil,
		ec.marshalNApiResponseCardAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCardAll,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreAllCard(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseCardAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseCardAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseCardAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAllCardPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteAllCardPermanent,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().DeleteAllCardPermanent(ctx)
		},
		nil,
		ec.marshalNApiResponseCardAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCardAll,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteAllCardPermanent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseCardAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseCardAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseCardAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createMerchant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateMerchant(ctx, fc.Args["input"].(model.CreateMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchant2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchant_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchant_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchant_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateMerchant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateMerchant(ctx, fc.Args["input"].(model.UpdateMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchant2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchant_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchant_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchant_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trashedMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_trashedMerchant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().TrashedMerchant(ctx, fc.Args["input"].(model.FindByIDMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchantDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantDeleteAt,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_trashedMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trashedMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreMerchant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RestoreMerchant(ctx, fc.Args["input"].(model.FindByIDMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchantDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantDeleteAt,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_restoreMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMerchantPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteMerchantPermanent,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteMerchantPermanent(ctx, fc.Args["input"].(model.FindByIDMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchantDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantDelete,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteMerchantPermanent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantDelete_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantDelete_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantDelete", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMerchantPermanent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreAllMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreAllMerchant,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().RestoreAllMerchant(ctx)
		},
		nil,
		ec.marshalNApiResponseMerchantAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantAll,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreAllMerchant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAllMerchantPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteAllMerchantPermanent,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().DeleteAllMerchantPermanent(ctx)
		},
		nil,
		ec.marshalNApiResponseMerchantAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantAll,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteAllMerchantPermanent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createRole,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateRole(ctx, fc.Args["input"].(model.CreateRoleInput))
		},
		nil,
		ec.marshalOApiResponseRole2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRole,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_createRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseRole_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseRole_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseRole_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateRole,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateRole(ctx, fc.Args["input"].(model.UpdateRoleInput))
		},
		nil,
		ec.marshalOApiResponseRole2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRole,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseRole_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseRole_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseRole_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trashedRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_trashedRole,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().TrashedRole(ctx, fc.Args["input"].(model.FindByIDRoleInput))
		},
		nil,
		ec.marshalOApiResponseRoleDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRoleDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_trashedRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseRoleDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseRoleDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseRoleDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseRoleDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trashedRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreRole,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RestoreRole(ctx, fc.Args["input"].(model.FindByIDRoleInput))
		},
		nil,
		ec.marshalOApiResponseRoleDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRoleDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseRoleDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseRoleDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseRoleDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseRoleDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_restoreRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteRolePermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteRolePermanent,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteRolePermanent(ctx, fc.Args["input"].(model.FindByIDRoleInput))
		},
		nil,
		ec.marshalOApiResponseRoleDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRoleDelete,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteRolePermanent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseRoleDelete_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseRoleDelete_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseRoleDelete", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteRolePermanent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreAllRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreAllRole,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().RestoreAllRole(ctx)
		},
		nil,
		ec.marshalOApiResponseRoleAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRoleAll,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreAllRole(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseRoleAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseRoleAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseRoleAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAllRolePermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteAllRolePermanent,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().DeleteAllRolePermanent(ctx)
		},
		nil,
		ec.marshalOApiResponseRoleAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRoleAll,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteAllRolePermanent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseRoleAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseRoleAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseRoleAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSaldo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createSaldo,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateSaldo(ctx, fc.Args["input"].(model.CreateSaldoInput))
		},
		nil,
		ec.marshalOApiResponseSaldoResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseSaldoResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_createSaldo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseSaldoResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseSaldoResponse_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseSaldoResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseSaldoResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSaldo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSaldo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateSaldo,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateSaldo(ctx, fc.Args["input"].(model.UpdateSaldoInput))
		},
		nil,
		ec.marshalOApiResponseSaldoResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseSaldoResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateSaldo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseSaldoResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseSaldoResponse_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseSaldoResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseSaldoResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSaldo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trashedSaldo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_trashedSaldo,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().TrashedSaldo(ctx, fc.Args["input"].(model.FindByIDSaldoInput))
		},
		nil,
		ec.marshalOApiResponseSaldoResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseSaldoResponseDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_trashedSaldo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseSaldoResponseDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseSaldoResponseDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseSaldoResponseDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseSaldoResponseDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trashedSaldo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreSaldo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreSaldo,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RestoreSaldo(ctx, fc.Args["input"].(model.FindByIDSaldoInput))
		},
		nil,
		ec.marshalOApiResponseSaldoResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseSaldoResponseDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreSaldo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseSaldoResponseDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseSaldoResponseDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseSaldoResponseDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseSaldoResponseDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_restoreSaldo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSaldoPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteSaldoPermanent,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteSaldoPermanent(ctx, fc.Args["input"].(model.FindByIDSaldoInput))
		},
		nil,
		ec.marshalOApiResponseSaldoDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseSaldoDelete,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteSaldoPermanent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseSaldoDelete_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseSaldoDelete_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseSaldoDelete", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSaldoPermanent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreAllSaldo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreAllSaldo,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().RestoreAllSaldo(ctx)
		},
		nil,
		ec.marshalOApiResponseSaldoAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseSaldoAll,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreAllSaldo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseSaldoAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseSaldoAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseSaldoAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAllSaldoPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteAllSaldoPermanent,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().DeleteAllSaldoPermanent(ctx)
		},
		nil,
		ec.marshalOApiResponseSaldoAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseSaldoAll,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteAllSaldoPermanent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseSaldoAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseSaldoAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseSaldoAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTopup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createTopup,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateTopup(ctx, fc.Args["input"].(model.CreateTopupInput))
		},
		nil,
		ec.marshalOApiResponseTopup2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopup,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_createTopup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopup_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopup_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopup_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTopup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTopup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateTopup,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateTopup(ctx, fc.Args["input"].(model.UpdateTopupInput))
		},
		nil,
		ec.marshalOApiResponseTopup2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopup,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateTopup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopup_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopup_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopup_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTopup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trashedTopup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_trashedTopup,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().TrashedTopup(ctx, fc.Args["input"].(model.FindByIDTopupInput))
		},
		nil,
		ec.marshalOApiResponseTopupDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_trashedTopup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trashedTopup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreTopup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreTopup,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RestoreTopup(ctx, fc.Args["input"].(model.FindByIDTopupInput))
		},
		nil,
		ec.marshalOApiResponseTopupDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreTopup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_restoreTopup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTopupPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteTopupPermanent,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteTopupPermanent(ctx, fc.Args["input"].(model.FindByIDTopupInput))
		},
		nil,
		ec.marshalOApiResponseTopupDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupDelete,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteTopupPermanent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupDelete_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupDelete_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupDelete", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTopupPermanent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreAllTopup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreAllTopup,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().RestoreAllTopup(ctx)
		},
		nil,
		ec.marshalOApiResponseTopupAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupAll,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreAllTopup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAllTopupPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteAllTopupPermanent,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().DeleteAllTopupPermanent(ctx)
		},
		nil,
		ec.marshalOApiResponseTopupAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupAll,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteAllTopupPermanent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTransaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createTransaction,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateTransaction(ctx, fc.Args["input"].(model.CreateTransactionRequest))
		},
		nil,
		ec.marshalOApiResponseTransaction2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransaction,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_createTransaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransaction_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransaction_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransaction_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTransaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTransaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateTransaction,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateTransaction(ctx, fc.Args["input"].(model.UpdateTransactionRequest))
		},
		nil,
		ec.marshalOApiResponseTransaction2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransaction,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateTransaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransaction_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransaction_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransaction_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTransaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trashedTransaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_trashedTransaction,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().TrashedTransaction(ctx, fc.Args["input"].(model.FindByIDTransactionRequest))
		},
		nil,
		ec.marshalOApiResponseTransactionDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_trashedTransaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trashedTransaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreTransaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreTransaction,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RestoreTransaction(ctx, fc.Args["input"].(model.FindByIDTransactionRequest))
		},
		nil,
		ec.marshalOApiResponseTransactionDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreTransaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_restoreTransaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTransactionPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteTransactionPermanent,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteTransactionPermanent(ctx, fc.Args["input"].(model.FindByIDTransactionRequest))
		},
		nil,
		ec.marshalOApiResponseTransactionDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionDelete,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteTransactionPermanent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionDelete_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionDelete_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionDelete", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTransactionPermanent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreAllTransactions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreAllTransactions,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().RestoreAllTransactions(ctx)
		},
		nil,
		ec.marshalOApiResponseTransactionAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionAll,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreAllTransactions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAllTransactionsPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteAllTransactionsPermanent,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().DeleteAllTransactionsPermanent(ctx)
		},
		nil,
		ec.marshalOApiResponseTransactionAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionAll,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteAllTransactionsPermanent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTransfer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createTransfer,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateTransfer(ctx, fc.Args["input"].(model.CreateTransferRequest))
		},
		nil,
		ec.marshalOApiResponseTransfer2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransfer,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_createTransfer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransfer_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransfer_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransfer_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransfer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTransfer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTransfer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateTransfer,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateTransfer(ctx, fc.Args["input"].(model.UpdateTransferRequest))
		},
		nil,
		ec.marshalOApiResponseTransfer2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransfer,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateTransfer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransfer_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransfer_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransfer_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransfer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTransfer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trashedTransfer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_trashedTransfer,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().TrashedTransfer(ctx, fc.Args["input"].(model.FindByIDTransferRequest))
		},
		nil,
		ec.marshalOApiResponseTransferDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_trashedTransfer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trashedTransfer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreTransfer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreTransfer,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RestoreTransfer(ctx, fc.Args["input"].(model.FindByIDTransferRequest))
		},
		nil,
		ec.marshalOApiResponseTransferDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreTransfer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_restoreTransfer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTransferPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteTransferPermanent,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteTransferPermanent(ctx, fc.Args["input"].(model.FindByIDTransferRequest))
		},
		nil,
		ec.marshalOApiResponseTransferDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferDelete,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteTransferPermanent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferDelete_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferDelete_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferDelete", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTransferPermanent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreAllTransfers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreAllTransfers,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().RestoreAllTransfers(ctx)
		},
		nil,
		ec.marshalOApiResponseTransferAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferAll,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreAllTransfers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAllTransfersPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteAllTransfersPermanent,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().DeleteAllTransfersPermanent(ctx)
		},
		nil,
		ec.marshalOApiResponseTransferAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferAll,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteAllTransfersPermanent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createUser,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateUser(ctx, fc.Args["input"].(model.CreateUserInput))
		},
		nil,
		ec.marshalNApiResponseUserResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserResponse,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseUserResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseUserResponse_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseUserResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseUserResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateUser,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateUser(ctx, fc.Args["input"].(model.UpdateUserInput))
		},
		nil,
		ec.marshalNApiResponseUserResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserResponse,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseUserResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseUserResponse_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseUserResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseUserResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trashedUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_trashedUser,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().TrashedUser(ctx, fc.Args["input"].(model.FindByIDUserInput))
		},
		nil,
		ec.marshalNApiResponseUserResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserResponseDeleteAt,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_trashedUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseUserResponseDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseUserResponseDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseUserResponseDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseUserResponseDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trashedUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreUser,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RestoreUser(ctx, fc.Args["input"].(model.FindByIDUserInput))
		},
		nil,
		ec.marshalNApiResponseUserResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserResponseDeleteAt,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseUserResponseDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseUserResponseDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseUserResponseDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseUserResponseDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_restoreUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUserPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteUserPermanent,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteUserPermanent(ctx, fc.Args["input"].(model.FindByIDUserInput))
		},
		nil,
		ec.marshalNApiResponseUserDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserDelete,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteUserPermanent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseUserDelete_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseUserDelete_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseUserDelete", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUserPermanent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreAllUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreAllUser,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().RestoreAllUser(ctx)
		},
		nil,
		ec.marshalNApiResponseUserAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserAll,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreAllUser(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseUserAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseUserAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseUserAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAllUserPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteAllUserPermanent,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().DeleteAllUserPermanent(ctx)
		},
		nil,
		ec.marshalNApiResponseUserAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserAll,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteAllUserPermanent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseUserAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseUserAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseUserAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createWithdraw(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createWithdraw,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateWithdraw(ctx, fc.Args["input"].(model.CreateWithdrawInput))
		},
		nil,
		ec.marshalOApiResponseWithdraw2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdraw,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_createWithdraw(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdraw_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdraw_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdraw_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdraw", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createWithdraw_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateWithdraw(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateWithdraw,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateWithdraw(ctx, fc.Args["input"].(model.UpdateWithdrawInput))
		},
		nil,
		ec.marshalOApiResponseWithdraw2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdraw,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateWithdraw(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdraw_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdraw_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdraw_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdraw", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateWithdraw_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trashedWithdraw(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_trashedWithdraw,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().TrashedWithdraw(ctx, fc.Args["input"].(model.FindByIDWithdrawInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_trashedWithdraw(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdrawDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_trashedWithdraw_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreWithdraw(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreWithdraw,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RestoreWithdraw(ctx, fc.Args["input"].(model.FindByIDWithdrawInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreWithdraw(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdrawDeleteAt_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_restoreWithdraw_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteWithdrawPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteWithdrawPermanent,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteWithdrawPermanent(ctx, fc.Args["input"].(model.FindByIDWithdrawInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawDelete,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteWithdrawPermanent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawDelete_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawDelete_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawDelete", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteWithdrawPermanent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_restoreAllWithdraw(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_restoreAllWithdraw,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().RestoreAllWithdraw(ctx)
		},
		nil,
		ec.marshalOApiResponseWithdrawAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawAll,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_restoreAllWithdraw(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAllWithdrawPermanent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteAllWithdrawPermanent,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().DeleteAllWithdrawPermanent(ctx)
		},
		nil,
		ec.marshalOApiResponseWithdrawAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawAll,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteAllWithdrawPermanent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawAll_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawAll_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawAll", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginationMeta_current_page(ctx context.Context, field graphql.CollectedField, obj *model.PaginationMeta) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PaginationMeta_current_page,
		func(ctx context.Context) (any, error) {
			return obj.CurrentPage, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PaginationMeta_current_page(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginationMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginationMeta_page_size(ctx context.Context, field graphql.CollectedField, obj *model.PaginationMeta) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PaginationMeta_page_size,
		func(ctx context.Context) (any, error) {
			return obj.PageSize, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PaginationMeta_page_size(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginationMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginationMeta_total_pages(ctx context.Context, field graphql.CollectedField, obj *model.PaginationMeta) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PaginationMeta_total_pages,
		func(ctx context.Context) (any, error) {
			return obj.TotalPages, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PaginationMeta_total_pages(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginationMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginationMeta_total_records(ctx context.Context, field graphql.CollectedField, obj *model.PaginationMeta) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PaginationMeta_total_records,
		func(ctx context.Context) (any, error) {
			return obj.TotalRecords, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PaginationMeta_total_records(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginationMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getMe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getMe,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetMe(ctx)
		},
		nil,
		ec.marshalNApiResponseGetMe2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseGetMe,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getMe(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseGetMe_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseGetMe_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseGetMe_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseGetMe", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllCard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllCard(ctx, fc.Args["input"].(*model.FindAllCardInput))
		},
		nil,
		ec.marshalNApiResponsePaginationCard2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationCard,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findAllCard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationCard_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationCard_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationCard_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationCard_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationCard", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllCard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByIdCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByIdCard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByIDCard(ctx, fc.Args["input"].(model.FindByIDCardInput))
		},
		nil,
		ec.marshalNApiResponseCard2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCard,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findByIdCard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseCard_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseCard_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseCard_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseCard", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByIdCard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByUserIdCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByUserIdCard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByUserIDCard(ctx, fc.Args["input"].(model.FindByUserIDCardInput))
		},
		nil,
		ec.marshalNApiResponseCard2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCard,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findByUserIdCard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseCard_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseCard_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseCard_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseCard", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByUserIdCard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByActiveCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByActiveCard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByActiveCard(ctx, fc.Args["input"].(*model.FindAllCardInput))
		},
		nil,
		ec.marshalNApiResponsePaginationCardDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationCardDeleteAt,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findByActiveCard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationCardDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationCardDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationCardDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationCardDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationCardDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByActiveCard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByTrashedCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByTrashedCard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByTrashedCard(ctx, fc.Args["input"].(*model.FindAllCardInput))
		},
		nil,
		ec.marshalNApiResponsePaginationCardDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationCardDeleteAt,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findByTrashedCard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationCardDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationCardDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationCardDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationCardDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationCardDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByTrashedCard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByCardNumberCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByCardNumberCard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByCardNumberCard(ctx, fc.Args["input"].(model.FindByCardNumberInput))
		},
		nil,
		ec.marshalNApiResponseCard2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCard,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findByCardNumberCard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseCard_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseCard_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseCard_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseCard", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByCardNumberCard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_dashboardCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_dashboardCard,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().DashboardCard(ctx)
		},
		nil,
		ec.marshalNApiResponseDashboardCard2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseDashboardCard,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_dashboardCard(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseDashboardCard_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseDashboardCard_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseDashboardCard_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseDashboardCard", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_dashboardCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_dashboardCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().DashboardCardNumber(ctx, fc.Args["input"].(model.FindByCardNumberInput))
		},
		nil,
		ec.marshalNApiResponseDashboardCardNumber2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseDashboardCardNumber,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_dashboardCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseDashboardCardNumber_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseDashboardCardNumber_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseDashboardCardNumber_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseDashboardCardNumber", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dashboardCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyBalance,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyBalance(ctx, fc.Args["input"].(model.FindYearBalanceInput))
		},
		nil,
		ec.marshalNApiResponseMonthlyBalance2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyBalance,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMonthlyBalance_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMonthlyBalance_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMonthlyBalance_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMonthlyBalance", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyBalance,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyBalance(ctx, fc.Args["input"].(model.FindYearBalanceInput))
		},
		nil,
		ec.marshalNApiResponseYearlyBalance2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyBalance,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseYearlyBalance_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseYearlyBalance_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseYearlyBalance_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseYearlyBalance", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTopupAmount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTopupAmount,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTopupAmount(ctx, fc.Args["input"].(model.FindYearAmountInput))
		},
		nil,
		ec.marshalNApiResponseMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTopupAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMonthlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMonthlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMonthlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMonthlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTopupAmount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTopupAmount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTopupAmount,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTopupAmount(ctx, fc.Args["input"].(model.FindYearAmountInput))
		},
		nil,
		ec.marshalNApiResponseYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTopupAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseYearlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseYearlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseYearlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseYearlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTopupAmount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyWithdrawAmount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyWithdrawAmount,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyWithdrawAmount(ctx, fc.Args["input"].(model.FindYearAmountInput))
		},
		nil,
		ec.marshalNApiResponseMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyWithdrawAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMonthlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMonthlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMonthlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMonthlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyWithdrawAmount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyWithdrawAmount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyWithdrawAmount,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyWithdrawAmount(ctx, fc.Args["input"].(model.FindYearAmountInput))
		},
		nil,
		ec.marshalNApiResponseYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyWithdrawAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseYearlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseYearlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseYearlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseYearlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyWithdrawAmount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransactionAmount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransactionAmount,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransactionAmount(ctx, fc.Args["input"].(model.FindYearAmountInput))
		},
		nil,
		ec.marshalNApiResponseMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransactionAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMonthlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMonthlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMonthlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMonthlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransactionAmount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransactionAmount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransactionAmount,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransactionAmount(ctx, fc.Args["input"].(model.FindYearAmountInput))
		},
		nil,
		ec.marshalNApiResponseYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransactionAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseYearlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseYearlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseYearlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseYearlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransactionAmount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransferSenderAmount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransferSenderAmount,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransferSenderAmount(ctx, fc.Args["input"].(model.FindYearAmountInput))
		},
		nil,
		ec.marshalNApiResponseMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransferSenderAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMonthlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMonthlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMonthlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMonthlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransferSenderAmount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransferSenderAmount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransferSenderAmount,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransferSenderAmount(ctx, fc.Args["input"].(model.FindYearAmountInput))
		},
		nil,
		ec.marshalNApiResponseYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransferSenderAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseYearlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseYearlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseYearlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseYearlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransferSenderAmount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransferReceiverAmount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransferReceiverAmount,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransferReceiverAmount(ctx, fc.Args["input"].(model.FindYearAmountInput))
		},
		nil,
		ec.marshalNApiResponseMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransferReceiverAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMonthlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMonthlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMonthlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMonthlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransferReceiverAmount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransferReceiverAmount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransferReceiverAmount,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransferReceiverAmount(ctx, fc.Args["input"].(model.FindYearAmountInput))
		},
		nil,
		ec.marshalNApiResponseYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransferReceiverAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseYearlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseYearlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseYearlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseYearlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransferReceiverAmount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyBalanceByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyBalanceByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyBalanceByCardNumber(ctx, fc.Args["input"].(model.FindYearBalanceCardNumberInput))
		},
		nil,
		ec.marshalNApiResponseMonthlyBalance2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyBalance,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyBalanceByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMonthlyBalance_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMonthlyBalance_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMonthlyBalance_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMonthlyBalance", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyBalanceByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyBalanceByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyBalanceByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyBalanceByCardNumber(ctx, fc.Args["input"].(model.FindYearBalanceCardNumberInput))
		},
		nil,
		ec.marshalNApiResponseYearlyBalance2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyBalance,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyBalanceByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseYearlyBalance_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseYearlyBalance_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseYearlyBalance_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseYearlyBalance", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyBalanceByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTopupAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTopupAmountByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTopupAmountByCardNumber(ctx, fc.Args["input"].(model.FindYearAmountCardNumberInput))
		},
		nil,
		ec.marshalNApiResponseMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTopupAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMonthlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMonthlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMonthlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMonthlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTopupAmountByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTopupAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTopupAmountByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTopupAmountByCardNumber(ctx, fc.Args["input"].(model.FindYearAmountCardNumberInput))
		},
		nil,
		ec.marshalNApiResponseYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTopupAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseYearlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseYearlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseYearlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseYearlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTopupAmountByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyWithdrawAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyWithdrawAmountByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyWithdrawAmountByCardNumber(ctx, fc.Args["input"].(model.FindYearAmountCardNumberInput))
		},
		nil,
		ec.marshalNApiResponseMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyWithdrawAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMonthlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMonthlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMonthlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMonthlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyWithdrawAmountByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyWithdrawAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyWithdrawAmountByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyWithdrawAmountByCardNumber(ctx, fc.Args["input"].(model.FindYearAmountCardNumberInput))
		},
		nil,
		ec.marshalNApiResponseYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyWithdrawAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseYearlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseYearlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseYearlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseYearlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyWithdrawAmountByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransactionAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransactionAmountByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransactionAmountByCardNumber(ctx, fc.Args["input"].(model.FindYearAmountCardNumberInput))
		},
		nil,
		ec.marshalNApiResponseMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransactionAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMonthlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMonthlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMonthlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMonthlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransactionAmountByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransactionAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransactionAmountByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransactionAmountByCardNumber(ctx, fc.Args["input"].(model.FindYearAmountCardNumberInput))
		},
		nil,
		ec.marshalNApiResponseYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransactionAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseYearlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseYearlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseYearlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseYearlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransactionAmountByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransferSenderAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransferSenderAmountByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransferSenderAmountByCardNumber(ctx, fc.Args["input"].(model.FindYearAmountCardNumberInput))
		},
		nil,
		ec.marshalNApiResponseMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransferSenderAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMonthlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMonthlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMonthlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMonthlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransferSenderAmountByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransferSenderAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransferSenderAmountByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransferSenderAmountByCardNumber(ctx, fc.Args["input"].(model.FindYearAmountCardNumberInput))
		},
		nil,
		ec.marshalNApiResponseYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransferSenderAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseYearlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseYearlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseYearlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseYearlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransferSenderAmountByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransferReceiverAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransferReceiverAmountByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransferReceiverAmountByCardNumber(ctx, fc.Args["input"].(model.FindYearAmountCardNumberInput))
		},
		nil,
		ec.marshalNApiResponseMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransferReceiverAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMonthlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMonthlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMonthlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMonthlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransferReceiverAmountByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransferReceiverAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransferReceiverAmountByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransferReceiverAmountByCardNumber(ctx, fc.Args["input"].(model.FindYearAmountCardNumberInput))
		},
		nil,
		ec.marshalNApiResponseYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransferReceiverAmountByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseYearlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseYearlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseYearlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseYearlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransferReceiverAmountByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllMerchant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllMerchant(ctx, fc.Args["input"].(*model.FindAllMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchantPagination2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantPagination,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findAllMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantPagination_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantPagination_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantPagination_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponseMerchantPagination_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantPagination", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByIdMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByIdMerchant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByIDMerchant(ctx, fc.Args["input"].(model.FindByIDMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchant2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findByIdMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchant_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchant_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchant_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByIdMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByApiKey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByApiKey,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByAPIKey(ctx, fc.Args["input"].(model.FindByAPIKeyInput))
		},
		nil,
		ec.marshalNApiResponseMerchant2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findByApiKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchant_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchant_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchant_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByApiKey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllTransactionMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllTransactionMerchant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllTransactionMerchant(ctx, fc.Args["input"].(*model.FindAllMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchantTransactionPagination2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantTransactionPagination,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findAllTransactionMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantTransactionPagination_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantTransactionPagination_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantTransactionPagination_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponseMerchantTransactionPagination_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantTransactionPagination", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllTransactionMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllTransactionByMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllTransactionByMerchant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllTransactionByMerchant(ctx, fc.Args["input"].(*model.FindAllMerchantTransactionInput))
		},
		nil,
		ec.marshalNApiResponseMerchantTransactionPagination2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantTransactionPagination,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findAllTransactionByMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantTransactionPagination_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantTransactionPagination_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantTransactionPagination_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponseMerchantTransactionPagination_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantTransactionPagination", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllTransactionByMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllTransactionByApikey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllTransactionByApikey,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllTransactionByApikey(ctx, fc.Args["input"].(*model.FindAllMerchantApikeyInput))
		},
		nil,
		ec.marshalNApiResponseMerchantTransactionPagination2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantTransactionPagination,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findAllTransactionByApikey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantTransactionPagination_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantTransactionPagination_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantTransactionPagination_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponseMerchantTransactionPagination_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantTransactionPagination", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllTransactionByApikey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByMerchantUserId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByMerchantUserId,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByMerchantUserID(ctx, fc.Args["input"].(model.FindByMerchantUserIDInput))
		},
		nil,
		ec.marshalNApiResponsesMerchant2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsesMerchant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findByMerchantUserId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsesMerchant_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsesMerchant_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsesMerchant_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsesMerchant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByMerchantUserId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByActive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByActive,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByActive(ctx, fc.Args["input"].(*model.FindAllMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchantDeleteAtPagination2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantDeleteAtPagination,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findByActive(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantDeleteAtPagination_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantDeleteAtPagination_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantDeleteAtPagination_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponseMerchantDeleteAtPagination_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantDeleteAtPagination", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByActive_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByTrashed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByTrashed,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByTrashed(ctx, fc.Args["input"].(*model.FindAllMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchantDeleteAtPagination2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantDeleteAtPagination,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findByTrashed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantDeleteAtPagination_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantDeleteAtPagination_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantDeleteAtPagination_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponseMerchantDeleteAtPagination_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantDeleteAtPagination", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByTrashed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyPaymentMethodsMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyPaymentMethodsMerchant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyPaymentMethodsMerchant(ctx, fc.Args["input"].(model.FindYearMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchantMonthlyPaymentMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyPaymentMethod,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyPaymentMethodsMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantMonthlyPaymentMethod_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantMonthlyPaymentMethod_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantMonthlyPaymentMethod_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantMonthlyPaymentMethod", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyPaymentMethodsMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyPaymentMethodMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyPaymentMethodMerchant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyPaymentMethodMerchant(ctx, fc.Args["input"].(model.FindYearMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchantYearlyPaymentMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyPaymentMethod,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyPaymentMethodMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantYearlyPaymentMethod_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantYearlyPaymentMethod_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantYearlyPaymentMethod_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantYearlyPaymentMethod", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyPaymentMethodMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyAmountMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyAmountMerchant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyAmountMerchant(ctx, fc.Args["input"].(model.FindYearMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchantMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyAmountMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantMonthlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantMonthlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantMonthlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantMonthlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyAmountMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyAmountMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyAmountMerchant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyAmountMerchant(ctx, fc.Args["input"].(model.FindYearMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchantYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyAmountMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantYearlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantYearlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantYearlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantYearlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyAmountMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTotalAmountMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTotalAmountMerchant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTotalAmountMerchant(ctx, fc.Args["input"].(model.FindYearMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchantMonthlyTotalAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyTotalAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTotalAmountMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantMonthlyTotalAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantMonthlyTotalAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantMonthlyTotalAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantMonthlyTotalAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTotalAmountMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTotalAmountMerchant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTotalAmountMerchant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTotalAmountMerchant(ctx, fc.Args["input"].(model.FindYearMerchantInput))
		},
		nil,
		ec.marshalNApiResponseMerchantYearlyTotalAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyTotalAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTotalAmountMerchant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantYearlyTotalAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantYearlyTotalAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantYearlyTotalAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantYearlyTotalAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTotalAmountMerchant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyPaymentMethodByMerchants(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyPaymentMethodByMerchants,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyPaymentMethodByMerchants(ctx, fc.Args["input"].(model.FindYearMerchantByIDInput))
		},
		nil,
		ec.marshalNApiResponseMerchantMonthlyPaymentMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyPaymentMethod,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyPaymentMethodByMerchants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantMonthlyPaymentMethod_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantMonthlyPaymentMethod_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantMonthlyPaymentMethod_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantMonthlyPaymentMethod", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyPaymentMethodByMerchants_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyPaymentMethodByMerchants(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyPaymentMethodByMerchants,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyPaymentMethodByMerchants(ctx, fc.Args["input"].(model.FindYearMerchantByIDInput))
		},
		nil,
		ec.marshalNApiResponseMerchantYearlyPaymentMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyPaymentMethod,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyPaymentMethodByMerchants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantYearlyPaymentMethod_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantYearlyPaymentMethod_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantYearlyPaymentMethod_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantYearlyPaymentMethod", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyPaymentMethodByMerchants_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyAmountByMerchants(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyAmountByMerchants,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyAmountByMerchants(ctx, fc.Args["input"].(model.FindYearMerchantByIDInput))
		},
		nil,
		ec.marshalNApiResponseMerchantMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyAmountByMerchants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantMonthlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantMonthlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantMonthlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantMonthlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyAmountByMerchants_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyAmountByMerchants(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyAmountByMerchants,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyAmountByMerchants(ctx, fc.Args["input"].(model.FindYearMerchantByIDInput))
		},
		nil,
		ec.marshalNApiResponseMerchantYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyAmountByMerchants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantYearlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantYearlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantYearlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantYearlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyAmountByMerchants_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTotalAmountByMerchants(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTotalAmountByMerchants,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTotalAmountByMerchants(ctx, fc.Args["input"].(model.FindYearMerchantByIDInput))
		},
		nil,
		ec.marshalNApiResponseMerchantMonthlyTotalAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyTotalAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTotalAmountByMerchants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantMonthlyTotalAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantMonthlyTotalAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantMonthlyTotalAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantMonthlyTotalAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTotalAmountByMerchants_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTotalAmountByMerchants(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTotalAmountByMerchants,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTotalAmountByMerchants(ctx, fc.Args["input"].(model.FindYearMerchantByIDInput))
		},
		nil,
		ec.marshalNApiResponseMerchantYearlyTotalAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyTotalAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTotalAmountByMerchants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantYearlyTotalAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantYearlyTotalAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantYearlyTotalAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantYearlyTotalAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTotalAmountByMerchants_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyPaymentMethodByApikey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyPaymentMethodByApikey,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyPaymentMethodByApikey(ctx, fc.Args["input"].(model.FindYearMerchantByApikeyInput))
		},
		nil,
		ec.marshalNApiResponseMerchantMonthlyPaymentMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyPaymentMethod,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyPaymentMethodByApikey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantMonthlyPaymentMethod_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantMonthlyPaymentMethod_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantMonthlyPaymentMethod_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantMonthlyPaymentMethod", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyPaymentMethodByApikey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyPaymentMethodByApikey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyPaymentMethodByApikey,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyPaymentMethodByApikey(ctx, fc.Args["input"].(model.FindYearMerchantByApikeyInput))
		},
		nil,
		ec.marshalNApiResponseMerchantYearlyPaymentMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyPaymentMethod,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyPaymentMethodByApikey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantYearlyPaymentMethod_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantYearlyPaymentMethod_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantYearlyPaymentMethod_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantYearlyPaymentMethod", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyPaymentMethodByApikey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyAmountByApikey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyAmountByApikey,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyAmountByApikey(ctx, fc.Args["input"].(model.FindYearMerchantByApikeyInput))
		},
		nil,
		ec.marshalNApiResponseMerchantMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyAmountByApikey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantMonthlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantMonthlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantMonthlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantMonthlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyAmountByApikey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyAmountByApikey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyAmountByApikey,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyAmountByApikey(ctx, fc.Args["input"].(model.FindYearMerchantByApikeyInput))
		},
		nil,
		ec.marshalNApiResponseMerchantYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyAmountByApikey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantYearlyAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantYearlyAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantYearlyAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantYearlyAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyAmountByApikey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTotalAmountByApikey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTotalAmountByApikey,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTotalAmountByApikey(ctx, fc.Args["input"].(model.FindYearMerchantByApikeyInput))
		},
		nil,
		ec.marshalNApiResponseMerchantMonthlyTotalAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyTotalAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTotalAmountByApikey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantMonthlyTotalAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantMonthlyTotalAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantMonthlyTotalAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantMonthlyTotalAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTotalAmountByApikey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTotalAmountByApikey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTotalAmountByApikey,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTotalAmountByApikey(ctx, fc.Args["input"].(model.FindYearMerchantByApikeyInput))
		},
		nil,
		ec.marshalNApiResponseMerchantYearlyTotalAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyTotalAmount,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTotalAmountByApikey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMerchantYearlyTotalAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMerchantYearlyTotalAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMerchantYearlyTotalAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMerchantYearlyTotalAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTotalAmountByApikey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllRole,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllRole(ctx, fc.Args["input"].(*model.FindAllRoleInput))
		},
		nil,
		ec.marshalOApiResponsePaginationRole2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationRole,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findAllRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationRole_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationRole_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationRole_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationRole_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByIdRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByIdRole,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByIDRole(ctx, fc.Args["input"].(model.FindByIDRoleInput))
		},
		nil,
		ec.marshalOApiResponseRole2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRole,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findByIdRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseRole_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseRole_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseRole_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByIdRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByActiveRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByActiveRole,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByActiveRole(ctx, fc.Args["input"].(*model.FindAllRoleInput))
		},
		nil,
		ec.marshalOApiResponsePaginationRoleDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationRoleDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findByActiveRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationRoleDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationRoleDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationRoleDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationRoleDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationRoleDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByActiveRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByTrashedRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByTrashedRole,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByTrashedRole(ctx, fc.Args["input"].(*model.FindAllRoleInput))
		},
		nil,
		ec.marshalOApiResponsePaginationRoleDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationRoleDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findByTrashedRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationRoleDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationRoleDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationRoleDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationRoleDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationRoleDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByTrashedRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByUserIdRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByUserIdRole,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByUserIDRole(ctx, fc.Args["input"].(model.FindByIDUserRoleInput))
		},
		nil,
		ec.marshalOApiResponsesRole2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsesRole,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findByUserIdRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsesRole_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsesRole_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsesRole_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsesRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByUserIdRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllSaldo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllSaldo,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllSaldo(ctx, fc.Args["input"].(*model.FindAllSaldoInput))
		},
		nil,
		ec.marshalOApiResponsePaginationSaldo2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationSaldo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findAllSaldo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationSaldo_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationSaldo_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationSaldo_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationSaldo_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationSaldo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllSaldo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByIdSaldo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByIdSaldo,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByIDSaldo(ctx, fc.Args["input"].(model.FindByIDSaldoInput))
		},
		nil,
		ec.marshalOApiResponseSaldoResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseSaldoResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findByIdSaldo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseSaldoResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseSaldoResponse_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseSaldoResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseSaldoResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByIdSaldo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTotalSaldoBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTotalSaldoBalance,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTotalSaldoBalance(ctx, fc.Args["input"].(model.FindMonthlySaldoTotalBalanceInput))
		},
		nil,
		ec.marshalOApiResponseMonthTotalSaldo2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthTotalSaldo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTotalSaldoBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMonthTotalSaldo_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMonthTotalSaldo_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMonthTotalSaldo_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMonthTotalSaldo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTotalSaldoBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearTotalSaldoBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearTotalSaldoBalance,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearTotalSaldoBalance(ctx, fc.Args["input"].(model.FindYearlySaldoInput))
		},
		nil,
		ec.marshalOApiResponseYearTotalSaldo2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearTotalSaldo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearTotalSaldoBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseYearTotalSaldo_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseYearTotalSaldo_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseYearTotalSaldo_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseYearTotalSaldo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearTotalSaldoBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlySaldoBalances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlySaldoBalances,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlySaldoBalances(ctx, fc.Args["input"].(model.FindYearlySaldoInput))
		},
		nil,
		ec.marshalOApiResponseMonthSaldoBalances2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthSaldoBalances,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlySaldoBalances(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseMonthSaldoBalances_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseMonthSaldoBalances_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseMonthSaldoBalances_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseMonthSaldoBalances", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlySaldoBalances_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlySaldoBalances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlySaldoBalances,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlySaldoBalances(ctx, fc.Args["input"].(model.FindYearlySaldoInput))
		},
		nil,
		ec.marshalOApiResponseYearSaldoBalances2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearSaldoBalances,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlySaldoBalances(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseYearSaldoBalances_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseYearSaldoBalances_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseYearSaldoBalances_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseYearSaldoBalances", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlySaldoBalances_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByCardNumberSaldo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByCardNumberSaldo,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByCardNumberSaldo(ctx, fc.Args["card_number"].(string))
		},
		nil,
		ec.marshalOApiResponseSaldoResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseSaldoResponse,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findByCardNumberSaldo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseSaldoResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseSaldoResponse_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseSaldoResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseSaldoResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByCardNumberSaldo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByActiveSaldo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByActiveSaldo,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByActiveSaldo(ctx, fc.Args["input"].(*model.FindAllSaldoInput))
		},
		nil,
		ec.marshalOApiResponsePaginationSaldoDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationSaldoDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findByActiveSaldo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationSaldoDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationSaldoDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationSaldoDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationSaldoDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationSaldoDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByActiveSaldo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByTrashedSaldo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByTrashedSaldo,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByTrashedSaldo(ctx, fc.Args["input"].(*model.FindAllSaldoInput))
		},
		nil,
		ec.marshalOApiResponsePaginationSaldoDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationSaldoDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findByTrashedSaldo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationSaldoDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationSaldoDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationSaldoDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationSaldoDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationSaldoDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByTrashedSaldo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllTopup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllTopup,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllTopup(ctx, fc.Args["input"].(*model.FindAllTopupInput))
		},
		nil,
		ec.marshalOApiResponsePaginationTopup2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTopup,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findAllTopup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationTopup_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationTopup_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationTopup_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationTopup_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationTopup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllTopup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllTopupByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllTopupByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllTopupByCardNumber(ctx, fc.Args["input"].(*model.FindAllTopupByCardNumberInput))
		},
		nil,
		ec.marshalOApiResponsePaginationTopup2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTopup,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findAllTopupByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationTopup_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationTopup_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationTopup_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationTopup_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationTopup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllTopupByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByIdTopup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByIdTopup,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByIDTopup(ctx, fc.Args["input"].(model.FindByIDTopupInput))
		},
		nil,
		ec.marshalOApiResponseTopup2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopup,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findByIdTopup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopup_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopup_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopup_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByIdTopup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTopupStatusSuccess(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTopupStatusSuccess,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTopupStatusSuccess(ctx, fc.Args["input"].(model.FindMonthlyTopupStatusInput))
		},
		nil,
		ec.marshalOApiResponseTopupMonthStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupMonthStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTopupStatusSuccess(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupMonthStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupMonthStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupMonthStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupMonthStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTopupStatusSuccess_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTopupStatusSuccess(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTopupStatusSuccess,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTopupStatusSuccess(ctx, fc.Args["input"].(model.FindYearTopupStatusInput))
		},
		nil,
		ec.marshalOApiResponseTopupYearStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupYearStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTopupStatusSuccess(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupYearStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupYearStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupYearStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupYearStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTopupStatusSuccess_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTopupStatusFailed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTopupStatusFailed,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTopupStatusFailed(ctx, fc.Args["input"].(model.FindMonthlyTopupStatusInput))
		},
		nil,
		ec.marshalOApiResponseTopupMonthStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupMonthStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTopupStatusFailed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupMonthStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupMonthStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupMonthStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupMonthStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTopupStatusFailed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTopupStatusFailed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTopupStatusFailed,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTopupStatusFailed(ctx, fc.Args["input"].(model.FindYearTopupStatusInput))
		},
		nil,
		ec.marshalOApiResponseTopupYearStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupYearStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTopupStatusFailed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupYearStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupYearStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupYearStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupYearStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTopupStatusFailed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTopupStatusSuccessByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTopupStatusSuccessByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTopupStatusSuccessByCardNumber(ctx, fc.Args["input"].(model.FindMonthlyTopupStatusCardNumberInput))
		},
		nil,
		ec.marshalOApiResponseTopupMonthStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupMonthStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTopupStatusSuccessByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupMonthStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupMonthStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupMonthStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupMonthStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTopupStatusSuccessByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTopupStatusSuccessByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTopupStatusSuccessByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTopupStatusSuccessByCardNumber(ctx, fc.Args["input"].(model.FindYearTopupStatusCardNumberInput))
		},
		nil,
		ec.marshalOApiResponseTopupYearStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupYearStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTopupStatusSuccessByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupYearStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupYearStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupYearStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupYearStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTopupStatusSuccessByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTopupStatusFailedByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTopupStatusFailedByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTopupStatusFailedByCardNumber(ctx, fc.Args["input"].(model.FindMonthlyTopupStatusCardNumberInput))
		},
		nil,
		ec.marshalOApiResponseTopupMonthStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupMonthStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTopupStatusFailedByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupMonthStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupMonthStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupMonthStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupMonthStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTopupStatusFailedByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTopupStatusFailedByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTopupStatusFailedByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTopupStatusFailedByCardNumber(ctx, fc.Args["input"].(model.FindYearTopupStatusCardNumberInput))
		},
		nil,
		ec.marshalOApiResponseTopupYearStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupYearStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTopupStatusFailedByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupYearStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupYearStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupYearStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupYearStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTopupStatusFailedByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTopupMethods(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTopupMethods,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTopupMethods(ctx, fc.Args["input"].(model.FindYearTopupStatusInput))
		},
		nil,
		ec.marshalOApiResponseTopupMonthMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupMonthMethod,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTopupMethods(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupMonthMethod_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupMonthMethod_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupMonthMethod_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupMonthMethod", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTopupMethods_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTopupMethods(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTopupMethods,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTopupMethods(ctx, fc.Args["input"].(model.FindYearTopupStatusInput))
		},
		nil,
		ec.marshalOApiResponseTopupYearMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupYearMethod,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTopupMethods(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupYearMethod_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupYearMethod_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupYearMethod_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupYearMethod", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTopupMethods_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTopupAmounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTopupAmounts,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTopupAmounts(ctx, fc.Args["input"].(model.FindYearTopupStatusInput))
		},
		nil,
		ec.marshalOApiResponseTopupMonthAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupMonthAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTopupAmounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupMonthAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupMonthAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupMonthAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupMonthAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTopupAmounts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTopupAmounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTopupAmounts,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTopupAmounts(ctx, fc.Args["input"].(model.FindYearTopupStatusInput))
		},
		nil,
		ec.marshalOApiResponseTopupYearAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupYearAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTopupAmounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupYearAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupYearAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupYearAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupYearAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTopupAmounts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTopupMethodsByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTopupMethodsByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTopupMethodsByCardNumber(ctx, fc.Args["input"].(model.FindYearTopupCardNumberInput))
		},
		nil,
		ec.marshalOApiResponseTopupMonthMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupMonthMethod,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTopupMethodsByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupMonthMethod_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupMonthMethod_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupMonthMethod_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupMonthMethod", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTopupMethodsByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTopupMethodsByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTopupMethodsByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTopupMethodsByCardNumber(ctx, fc.Args["input"].(model.FindYearTopupCardNumberInput))
		},
		nil,
		ec.marshalOApiResponseTopupYearMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupYearMethod,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTopupMethodsByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupYearMethod_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupYearMethod_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupYearMethod_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupYearMethod", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTopupMethodsByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTopupAmountsByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTopupAmountsByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTopupAmountsByCardNumber(ctx, fc.Args["input"].(model.FindYearTopupCardNumberInput))
		},
		nil,
		ec.marshalOApiResponseTopupMonthAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupMonthAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTopupAmountsByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupMonthAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupMonthAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupMonthAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupMonthAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTopupAmountsByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTopupAmountsByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTopupAmountsByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTopupAmountsByCardNumber(ctx, fc.Args["input"].(model.FindYearTopupCardNumberInput))
		},
		nil,
		ec.marshalOApiResponseTopupYearAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupYearAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTopupAmountsByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTopupYearAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTopupYearAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTopupYearAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTopupYearAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTopupAmountsByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByActiveTopup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByActiveTopup,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByActiveTopup(ctx, fc.Args["input"].(*model.FindAllTopupInput))
		},
		nil,
		ec.marshalOApiResponsePaginationTopupDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTopupDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findByActiveTopup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationTopupDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationTopupDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationTopupDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationTopupDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationTopupDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByActiveTopup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByTrashedTopup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByTrashedTopup,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByTrashedTopup(ctx, fc.Args["input"].(*model.FindAllTopupInput))
		},
		nil,
		ec.marshalOApiResponsePaginationTopupDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTopupDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findByTrashedTopup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationTopupDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationTopupDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationTopupDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationTopupDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationTopupDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByTrashedTopup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllTransactions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllTransactions,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllTransactions(ctx, fc.Args["input"].(*model.FindAllTransactionRequest))
		},
		nil,
		ec.marshalOApiResponsePaginationTransaction2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTransaction,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findAllTransactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationTransaction_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationTransaction_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationTransaction_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationTransaction_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationTransaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllTransactions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllTransactionsByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllTransactionsByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllTransactionsByCardNumber(ctx, fc.Args["input"].(*model.FindAllTransactionCardNumberRequest))
		},
		nil,
		ec.marshalOApiResponsePaginationTransaction2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTransaction,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findAllTransactionsByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationTransaction_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationTransaction_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationTransaction_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationTransaction_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationTransaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllTransactionsByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findTransactionById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findTransactionById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindTransactionByID(ctx, fc.Args["input"].(*model.FindByIDTransactionRequest))
		},
		nil,
		ec.marshalOApiResponseTransaction2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransaction,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findTransactionById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransaction_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransaction_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransaction_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findTransactionById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findTransactionByMerchantId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findTransactionByMerchantId,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindTransactionByMerchantID(ctx, fc.Args["input"].(*model.FindTransactionByMerchantIDRequest))
		},
		nil,
		ec.marshalOApiResponseTransactions2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactions,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findTransactionByMerchantId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactions_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactions_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactions_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactions", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findTransactionByMerchantId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findActiveTransactions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findActiveTransactions,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindActiveTransactions(ctx, fc.Args["input"].(*model.FindAllTransactionRequest))
		},
		nil,
		ec.marshalOApiResponsePaginationTransactionDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTransactionDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findActiveTransactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationTransactionDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationTransactionDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationTransactionDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationTransactionDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationTransactionDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findActiveTransactions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findTrashedTransactions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findTrashedTransactions,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindTrashedTransactions(ctx, fc.Args["input"].(*model.FindAllTransactionRequest))
		},
		nil,
		ec.marshalOApiResponsePaginationTransactionDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTransactionDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findTrashedTransactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationTransactionDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationTransactionDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationTransactionDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationTransactionDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationTransactionDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findTrashedTransactions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransactionStatusSuccess(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransactionStatusSuccess,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransactionStatusSuccess(ctx, fc.Args["input"].(model.FindMonthlyTransactionStatus))
		},
		nil,
		ec.marshalOApiResponseTransactionMonthStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionMonthStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransactionStatusSuccess(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionMonthStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionMonthStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionMonthStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionMonthStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransactionStatusSuccess_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransactionStatusSuccess(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransactionStatusSuccess,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransactionStatusSuccess(ctx, fc.Args["input"].(model.FindYearTransactionStatus))
		},
		nil,
		ec.marshalOApiResponseTransactionYearStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionYearStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransactionStatusSuccess(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionYearStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionYearStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionYearStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionYearStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransactionStatusSuccess_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransactionStatusFailed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransactionStatusFailed,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransactionStatusFailed(ctx, fc.Args["input"].(model.FindMonthlyTransactionStatus))
		},
		nil,
		ec.marshalOApiResponseTransactionMonthStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionMonthStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransactionStatusFailed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionMonthStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionMonthStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionMonthStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionMonthStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransactionStatusFailed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransactionStatusFailed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransactionStatusFailed,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransactionStatusFailed(ctx, fc.Args["input"].(model.FindYearTransactionStatus))
		},
		nil,
		ec.marshalOApiResponseTransactionYearStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionYearStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransactionStatusFailed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionYearStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionYearStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionYearStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionYearStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransactionStatusFailed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransactionStatusSuccessByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransactionStatusSuccessByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransactionStatusSuccessByCardNumber(ctx, fc.Args["input"].(model.FindMonthlyTransactionStatusCardNumber))
		},
		nil,
		ec.marshalOApiResponseTransactionMonthStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionMonthStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransactionStatusSuccessByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionMonthStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionMonthStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionMonthStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionMonthStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransactionStatusSuccessByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransactionStatusSuccessByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransactionStatusSuccessByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransactionStatusSuccessByCardNumber(ctx, fc.Args["input"].(model.FindYearTransactionStatusCardNumber))
		},
		nil,
		ec.marshalOApiResponseTransactionYearStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionYearStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransactionStatusSuccessByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionYearStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionYearStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionYearStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionYearStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransactionStatusSuccessByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransactionStatusFailedByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransactionStatusFailedByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransactionStatusFailedByCardNumber(ctx, fc.Args["input"].(model.FindMonthlyTransactionStatusCardNumber))
		},
		nil,
		ec.marshalOApiResponseTransactionMonthStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionMonthStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransactionStatusFailedByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionMonthStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionMonthStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionMonthStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionMonthStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransactionStatusFailedByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransactionStatusFailedByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransactionStatusFailedByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransactionStatusFailedByCardNumber(ctx, fc.Args["input"].(model.FindYearTransactionStatusCardNumber))
		},
		nil,
		ec.marshalOApiResponseTransactionYearStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionYearStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransactionStatusFailedByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionYearStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionYearStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionYearStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionYearStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransactionStatusFailedByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyPaymentMethods(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyPaymentMethods,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyPaymentMethods(ctx, fc.Args["input"].(model.FindYearTransactionStatus))
		},
		nil,
		ec.marshalOApiResponseTransactionMonthMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionMonthMethod,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyPaymentMethods(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionMonthMethod_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionMonthMethod_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionMonthMethod_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionMonthMethod", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyPaymentMethods_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyPaymentMethods(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyPaymentMethods,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyPaymentMethods(ctx, fc.Args["input"].(model.FindYearTransactionStatus))
		},
		nil,
		ec.marshalOApiResponseTransactionYearMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionYearMethod,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyPaymentMethods(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionYearMethod_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionYearMethod_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionYearMethod_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionYearMethod", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyPaymentMethods_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyAmounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyAmounts,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyAmounts(ctx, fc.Args["input"].(model.FindYearTransactionStatus))
		},
		nil,
		ec.marshalOApiResponseTransactionMonthAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionMonthAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyAmounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionMonthAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionMonthAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionMonthAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionMonthAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyAmounts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyAmounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyAmounts,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyAmounts(ctx, fc.Args["input"].(model.FindYearTransactionStatus))
		},
		nil,
		ec.marshalOApiResponseTransactionYearAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionYearAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyAmounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionYearAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionYearAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionYearAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionYearAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyAmounts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyPaymentMethodsByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyPaymentMethodsByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyPaymentMethodsByCardNumber(ctx, fc.Args["input"].(model.FindByYearCardNumberTransactionRequest))
		},
		nil,
		ec.marshalOApiResponseTransactionMonthMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionMonthMethod,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyPaymentMethodsByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionMonthMethod_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionMonthMethod_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionMonthMethod_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionMonthMethod", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyPaymentMethodsByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyPaymentMethodsByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyPaymentMethodsByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyPaymentMethodsByCardNumber(ctx, fc.Args["input"].(model.FindByYearCardNumberTransactionRequest))
		},
		nil,
		ec.marshalOApiResponseTransactionYearMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionYearMethod,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyPaymentMethodsByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionYearMethod_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionYearMethod_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionYearMethod_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionYearMethod", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyPaymentMethodsByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyAmountsByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyAmountsByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyAmountsByCardNumber(ctx, fc.Args["input"].(model.FindByYearCardNumberTransactionRequest))
		},
		nil,
		ec.marshalOApiResponseTransactionMonthAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionMonthAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyAmountsByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionMonthAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionMonthAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionMonthAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionMonthAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyAmountsByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyAmountsByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyAmountsByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyAmountsByCardNumber(ctx, fc.Args["input"].(model.FindByYearCardNumberTransactionRequest))
		},
		nil,
		ec.marshalOApiResponseTransactionYearAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionYearAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyAmountsByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransactionYearAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransactionYearAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransactionYearAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransactionYearAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyAmountsByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllTransfers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllTransfers,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllTransfers(ctx, fc.Args["input"].(*model.FindAllTransferRequest))
		},
		nil,
		ec.marshalOApiResponsePaginationTransfer2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTransfer,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findAllTransfers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationTransfer_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationTransfer_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationTransfer_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationTransfer_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationTransfer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllTransfers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findTransferById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findTransferById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindTransferByID(ctx, fc.Args["input"].(*model.FindByIDTransferRequest))
		},
		nil,
		ec.marshalOApiResponseTransfer2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransfer,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findTransferById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransfer_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransfer_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransfer_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransfer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findTransferById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findTransfersBySender(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findTransfersBySender,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindTransfersBySender(ctx, fc.Args["input"].(*model.FindTransferByTransferFromRequest))
		},
		nil,
		ec.marshalOApiResponseTransfers2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransfers,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findTransfersBySender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransfers_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransfers_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransfers_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransfers", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findTransfersBySender_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findTransfersByReceiver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findTransfersByReceiver,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindTransfersByReceiver(ctx, fc.Args["input"].(*model.FindTransferByTransferToRequest))
		},
		nil,
		ec.marshalOApiResponseTransfers2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransfers,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findTransfersByReceiver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransfers_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransfers_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransfers_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransfers", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findTransfersByReceiver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findActiveTransfers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findActiveTransfers,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindActiveTransfers(ctx, fc.Args["input"].(*model.FindAllTransferRequest))
		},
		nil,
		ec.marshalOApiResponsePaginationTransferDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTransferDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findActiveTransfers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationTransferDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationTransferDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationTransferDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationTransferDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationTransferDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findActiveTransfers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findTrashedTransfers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findTrashedTransfers,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindTrashedTransfers(ctx, fc.Args["input"].(*model.FindAllTransferRequest))
		},
		nil,
		ec.marshalOApiResponsePaginationTransferDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTransferDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findTrashedTransfers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationTransferDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationTransferDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationTransferDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationTransferDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationTransferDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findTrashedTransfers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransferStatusSuccess(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransferStatusSuccess,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransferStatusSuccess(ctx, fc.Args["input"].(model.FindMonthlyTransferStatus))
		},
		nil,
		ec.marshalOApiResponseTransferMonthStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferMonthStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransferStatusSuccess(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferMonthStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferMonthStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferMonthStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferMonthStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransferStatusSuccess_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransferStatusSuccess(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransferStatusSuccess,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransferStatusSuccess(ctx, fc.Args["input"].(model.FindYearTransferStatus))
		},
		nil,
		ec.marshalOApiResponseTransferYearStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferYearStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransferStatusSuccess(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferYearStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferYearStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferYearStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferYearStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransferStatusSuccess_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransferStatusFailed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransferStatusFailed,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransferStatusFailed(ctx, fc.Args["input"].(model.FindMonthlyTransferStatus))
		},
		nil,
		ec.marshalOApiResponseTransferMonthStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferMonthStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransferStatusFailed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferMonthStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferMonthStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferMonthStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferMonthStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransferStatusFailed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransferStatusFailed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransferStatusFailed,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransferStatusFailed(ctx, fc.Args["input"].(model.FindYearTransferStatus))
		},
		nil,
		ec.marshalOApiResponseTransferYearStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferYearStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransferStatusFailed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferYearStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferYearStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferYearStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferYearStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransferStatusFailed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransferStatusSuccessByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransferStatusSuccessByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransferStatusSuccessByCardNumber(ctx, fc.Args["input"].(model.FindMonthlyTransferStatusCardNumber))
		},
		nil,
		ec.marshalOApiResponseTransferMonthStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferMonthStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransferStatusSuccessByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferMonthStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferMonthStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferMonthStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferMonthStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransferStatusSuccessByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransferStatusSuccessByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransferStatusSuccessByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransferStatusSuccessByCardNumber(ctx, fc.Args["input"].(model.FindYearTransferStatusCardNumber))
		},
		nil,
		ec.marshalOApiResponseTransferYearStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferYearStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransferStatusSuccessByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferYearStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferYearStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferYearStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferYearStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransferStatusSuccessByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransferStatusFailedByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransferStatusFailedByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransferStatusFailedByCardNumber(ctx, fc.Args["input"].(model.FindMonthlyTransferStatusCardNumber))
		},
		nil,
		ec.marshalOApiResponseTransferMonthStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferMonthStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransferStatusFailedByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferMonthStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferMonthStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferMonthStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferMonthStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransferStatusFailedByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransferStatusFailedByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransferStatusFailedByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransferStatusFailedByCardNumber(ctx, fc.Args["input"].(model.FindYearTransferStatusCardNumber))
		},
		nil,
		ec.marshalOApiResponseTransferYearStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferYearStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransferStatusFailedByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferYearStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferYearStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferYearStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferYearStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransferStatusFailedByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransferAmounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransferAmounts,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransferAmounts(ctx, fc.Args["input"].(model.FindYearTransferStatus))
		},
		nil,
		ec.marshalOApiResponseTransferMonthAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferMonthAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransferAmounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferMonthAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferMonthAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferMonthAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferMonthAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransferAmounts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransferAmounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransferAmounts,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransferAmounts(ctx, fc.Args["input"].(model.FindYearTransferStatus))
		},
		nil,
		ec.marshalOApiResponseTransferYearAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferYearAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransferAmounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferYearAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferYearAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferYearAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferYearAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransferAmounts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransferAmountsBySenderCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransferAmountsBySenderCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransferAmountsBySenderCardNumber(ctx, fc.Args["input"].(model.FindByCardNumberTransferRequest))
		},
		nil,
		ec.marshalOApiResponseTransferMonthAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferMonthAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransferAmountsBySenderCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferMonthAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferMonthAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferMonthAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferMonthAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransferAmountsBySenderCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyTransferAmountsByReceiverCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyTransferAmountsByReceiverCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyTransferAmountsByReceiverCardNumber(ctx, fc.Args["input"].(model.FindByCardNumberTransferRequest))
		},
		nil,
		ec.marshalOApiResponseTransferMonthAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferMonthAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyTransferAmountsByReceiverCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferMonthAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferMonthAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferMonthAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferMonthAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyTransferAmountsByReceiverCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransferAmountsBySenderCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransferAmountsBySenderCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransferAmountsBySenderCardNumber(ctx, fc.Args["input"].(model.FindByCardNumberTransferRequest))
		},
		nil,
		ec.marshalOApiResponseTransferYearAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferYearAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransferAmountsBySenderCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferYearAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferYearAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferYearAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferYearAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransferAmountsBySenderCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyTransferAmountsByReceiverCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyTransferAmountsByReceiverCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyTransferAmountsByReceiverCardNumber(ctx, fc.Args["input"].(model.FindByCardNumberTransferRequest))
		},
		nil,
		ec.marshalOApiResponseTransferYearAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferYearAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyTransferAmountsByReceiverCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseTransferYearAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseTransferYearAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseTransferYearAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseTransferYearAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyTransferAmountsByReceiverCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllUsers,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllUsers(ctx, fc.Args["input"].(*model.FindAllUserInput))
		},
		nil,
		ec.marshalNApiResponsePaginationUser2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationUser,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findAllUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationUser_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationUser_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationUser_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationUser_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationUser", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByIdUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByIdUser,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByIDUser(ctx, fc.Args["input"].(model.FindByIDUserInput))
		},
		nil,
		ec.marshalNApiResponseUserResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserResponse,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findByIdUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseUserResponse_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseUserResponse_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseUserResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseUserResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByIdUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByActiveUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByActiveUsers,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByActiveUsers(ctx, fc.Args["input"].(*model.FindAllUserInput))
		},
		nil,
		ec.marshalNApiResponsePaginationUserDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationUserDeleteAt,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findByActiveUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationUserDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationUserDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationUserDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationUserDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationUserDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByActiveUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByTrashedUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByTrashedUsers,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByTrashedUsers(ctx, fc.Args["input"].(*model.FindAllUserInput))
		},
		nil,
		ec.marshalNApiResponsePaginationUserDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationUserDeleteAt,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_findByTrashedUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationUserDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationUserDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationUserDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationUserDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationUserDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByTrashedUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllWithdraw(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllWithdraw,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllWithdraw(ctx, fc.Args["input"].(model.FindAllWithdrawInput))
		},
		nil,
		ec.marshalOApiResponsePaginationWithdraw2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationWithdraw,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findAllWithdraw(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationWithdraw_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationWithdraw_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationWithdraw_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationWithdraw_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationWithdraw", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllWithdraw_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findAllWithdrawByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findAllWithdrawByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindAllWithdrawByCardNumber(ctx, fc.Args["input"].(model.FindAllWithdrawByCardNumberInput))
		},
		nil,
		ec.marshalOApiResponsePaginationWithdraw2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationWithdraw,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findAllWithdrawByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationWithdraw_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationWithdraw_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationWithdraw_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationWithdraw_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationWithdraw", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findAllWithdrawByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByIdWithdraw(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByIdWithdraw,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByIDWithdraw(ctx, fc.Args["input"].(model.FindByIDWithdrawInput))
		},
		nil,
		ec.marshalOApiResponseWithdraw2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdraw,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findByIdWithdraw(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdraw_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdraw_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdraw_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdraw", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByIdWithdraw_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyWithdrawStatusSuccess(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyWithdrawStatusSuccess,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyWithdrawStatusSuccess(ctx, fc.Args["input"].(model.FindMonthlyWithdrawStatusInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawMonthStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawMonthStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyWithdrawStatusSuccess(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawMonthStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawMonthStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdrawMonthStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawMonthStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyWithdrawStatusSuccess_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyWithdrawStatusSuccess(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyWithdrawStatusSuccess,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyWithdrawStatusSuccess(ctx, fc.Args["input"].(model.FindYearWithdrawStatusInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawYearStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawYearStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyWithdrawStatusSuccess(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawYearStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawYearStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdrawYearStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawYearStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyWithdrawStatusSuccess_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyWithdrawStatusFailed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyWithdrawStatusFailed,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyWithdrawStatusFailed(ctx, fc.Args["input"].(model.FindMonthlyWithdrawStatusInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawMonthStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawMonthStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyWithdrawStatusFailed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawMonthStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawMonthStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdrawMonthStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawMonthStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyWithdrawStatusFailed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyWithdrawStatusFailed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyWithdrawStatusFailed,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyWithdrawStatusFailed(ctx, fc.Args["input"].(model.FindYearWithdrawStatusInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawYearStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawYearStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyWithdrawStatusFailed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawYearStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawYearStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdrawYearStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawYearStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyWithdrawStatusFailed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyWithdrawStatusSuccessCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyWithdrawStatusSuccessCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyWithdrawStatusSuccessCardNumber(ctx, fc.Args["input"].(model.FindMonthlyWithdrawStatusCardNumberInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawMonthStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawMonthStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyWithdrawStatusSuccessCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawMonthStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawMonthStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdrawMonthStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawMonthStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyWithdrawStatusSuccessCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyWithdrawStatusSuccessCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyWithdrawStatusSuccessCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyWithdrawStatusSuccessCardNumber(ctx, fc.Args["input"].(model.FindYearWithdrawStatusCardNumberInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawYearStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawYearStatusSuccess,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyWithdrawStatusSuccessCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawYearStatusSuccess_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawYearStatusSuccess_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdrawYearStatusSuccess_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawYearStatusSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyWithdrawStatusSuccessCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyWithdrawStatusFailedCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyWithdrawStatusFailedCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyWithdrawStatusFailedCardNumber(ctx, fc.Args["input"].(model.FindMonthlyWithdrawStatusCardNumberInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawMonthStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawMonthStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyWithdrawStatusFailedCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawMonthStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawMonthStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdrawMonthStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawMonthStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyWithdrawStatusFailedCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyWithdrawStatusFailedCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyWithdrawStatusFailedCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyWithdrawStatusFailedCardNumber(ctx, fc.Args["input"].(model.FindYearWithdrawStatusCardNumberInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawYearStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawYearStatusFailed,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyWithdrawStatusFailedCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawYearStatusFailed_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawYearStatusFailed_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdrawYearStatusFailed_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawYearStatusFailed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyWithdrawStatusFailedCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyWithdraws(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyWithdraws,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyWithdraws(ctx, fc.Args["input"].(model.FindYearWithdrawStatusInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawMonthAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawMonthAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyWithdraws(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawMonthAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawMonthAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdrawMonthAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawMonthAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyWithdraws_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyWithdraws(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyWithdraws,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyWithdraws(ctx, fc.Args["input"].(model.FindYearWithdrawStatusInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawYearAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawYearAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyWithdraws(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawYearAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawYearAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdrawYearAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawYearAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyWithdraws_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMonthlyWithdrawsByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findMonthlyWithdrawsByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindMonthlyWithdrawsByCardNumber(ctx, fc.Args["input"].(model.FindYearWithdrawCardNumberInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawMonthAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawMonthAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findMonthlyWithdrawsByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawMonthAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawMonthAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdrawMonthAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawMonthAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMonthlyWithdrawsByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findYearlyWithdrawsByCardNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findYearlyWithdrawsByCardNumber,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindYearlyWithdrawsByCardNumber(ctx, fc.Args["input"].(model.FindYearWithdrawCardNumberInput))
		},
		nil,
		ec.marshalOApiResponseWithdrawYearAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawYearAmount,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findYearlyWithdrawsByCardNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponseWithdrawYearAmount_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponseWithdrawYearAmount_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponseWithdrawYearAmount_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponseWithdrawYearAmount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findYearlyWithdrawsByCardNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByActiveWithdraw(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByActiveWithdraw,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByActiveWithdraw(ctx, fc.Args["input"].(model.FindAllWithdrawInput))
		},
		nil,
		ec.marshalOApiResponsePaginationWithdrawDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationWithdrawDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findByActiveWithdraw(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationWithdrawDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationWithdrawDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationWithdrawDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationWithdrawDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationWithdrawDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByActiveWithdraw_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findByTrashedWithdraw(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_findByTrashedWithdraw,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FindByTrashedWithdraw(ctx, fc.Args["input"].(model.FindAllWithdrawInput))
		},
		nil,
		ec.marshalOApiResponsePaginationWithdrawDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationWithdrawDeleteAt,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_findByTrashedWithdraw(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ApiResponsePaginationWithdrawDeleteAt_status(ctx, field)
			case "message":
				return ec.fieldContext_ApiResponsePaginationWithdrawDeleteAt_message(ctx, field)
			case "data":
				return ec.fieldContext_ApiResponsePaginationWithdrawDeleteAt_data(ctx, field)
			case "pagination":
				return ec.fieldContext_ApiResponsePaginationWithdrawDeleteAt_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiResponsePaginationWithdrawDeleteAt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findByTrashedWithdraw_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___type,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.introspectType(fc.Args["name"].(string))
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___schema,
		func(ctx context.Context) (any, error) {
			return ec.introspectSchema()
		},
		nil,
		ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.RoleResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RoleResponse_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RoleResponse_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleResponse_name(ctx context.Context, field graphql.CollectedField, obj *model.RoleResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RoleResponse_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RoleResponse_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.RoleResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RoleResponse_created_at,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RoleResponse_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.RoleResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RoleResponse_updated_at,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RoleResponse_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleResponseDeleteAt_id(ctx context.Context, field graphql.CollectedField, obj *model.RoleResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RoleResponseDeleteAt_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RoleResponseDeleteAt_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleResponseDeleteAt_name(ctx context.Context, field graphql.CollectedField, obj *model.RoleResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RoleResponseDeleteAt_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RoleResponseDeleteAt_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleResponseDeleteAt_created_at(ctx context.Context, field graphql.CollectedField, obj *model.RoleResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RoleResponseDeleteAt_created_at,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RoleResponseDeleteAt_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleResponseDeleteAt_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.RoleResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RoleResponseDeleteAt_updated_at,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RoleResponseDeleteAt_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleResponseDeleteAt_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.RoleResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RoleResponseDeleteAt_deleted_at,
		func(ctx context.Context) (any, error) {
			return obj.DeletedAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RoleResponseDeleteAt_deleted_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoMonthBalanceResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.SaldoMonthBalanceResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoMonthBalanceResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoMonthBalanceResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoMonthBalanceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoMonthBalanceResponse_total_balance(ctx context.Context, field graphql.CollectedField, obj *model.SaldoMonthBalanceResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoMonthBalanceResponse_total_balance,
		func(ctx context.Context) (any, error) {
			return obj.TotalBalance, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoMonthBalanceResponse_total_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoMonthBalanceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoMonthTotalBalanceResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.SaldoMonthTotalBalanceResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoMonthTotalBalanceResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoMonthTotalBalanceResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoMonthTotalBalanceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoMonthTotalBalanceResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.SaldoMonthTotalBalanceResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoMonthTotalBalanceResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoMonthTotalBalanceResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoMonthTotalBalanceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoMonthTotalBalanceResponse_total_balance(ctx context.Context, field graphql.CollectedField, obj *model.SaldoMonthTotalBalanceResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoMonthTotalBalanceResponse_total_balance,
		func(ctx context.Context) (any, error) {
			return obj.TotalBalance, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoMonthTotalBalanceResponse_total_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoMonthTotalBalanceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponse_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoResponse_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponse_card_number(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponse_card_number,
		func(ctx context.Context) (any, error) {
			return obj.CardNumber, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoResponse_card_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponse_total_balance(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponse_total_balance,
		func(ctx context.Context) (any, error) {
			return obj.TotalBalance, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoResponse_total_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponse_withdraw_time(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponse_withdraw_time,
		func(ctx context.Context) (any, error) {
			return obj.WithdrawTime, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SaldoResponse_withdraw_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponse_withdraw_amount(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponse_withdraw_amount,
		func(ctx context.Context) (any, error) {
			return obj.WithdrawAmount, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SaldoResponse_withdraw_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponse_created_at,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoResponse_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponse_updated_at,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoResponse_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponseDeleteAt_id(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponseDeleteAt_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoResponseDeleteAt_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponseDeleteAt_card_number(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponseDeleteAt_card_number,
		func(ctx context.Context) (any, error) {
			return obj.CardNumber, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoResponseDeleteAt_card_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponseDeleteAt_total_balance(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponseDeleteAt_total_balance,
		func(ctx context.Context) (any, error) {
			return obj.TotalBalance, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoResponseDeleteAt_total_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponseDeleteAt_withdraw_time(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponseDeleteAt_withdraw_time,
		func(ctx context.Context) (any, error) {
			return obj.WithdrawTime, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SaldoResponseDeleteAt_withdraw_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponseDeleteAt_withdraw_amount(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponseDeleteAt_withdraw_amount,
		func(ctx context.Context) (any, error) {
			return obj.WithdrawAmount, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SaldoResponseDeleteAt_withdraw_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponseDeleteAt_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponseDeleteAt_created_at,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoResponseDeleteAt_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponseDeleteAt_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponseDeleteAt_updated_at,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoResponseDeleteAt_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoResponseDeleteAt_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.SaldoResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoResponseDeleteAt_deleted_at,
		func(ctx context.Context) (any, error) {
			return obj.DeletedAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SaldoResponseDeleteAt_deleted_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoYearBalanceResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.SaldoYearBalanceResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoYearBalanceResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoYearBalanceResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoYearBalanceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoYearBalanceResponse_total_balance(ctx context.Context, field graphql.CollectedField, obj *model.SaldoYearBalanceResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoYearBalanceResponse_total_balance,
		func(ctx context.Context) (any, error) {
			return obj.TotalBalance, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoYearBalanceResponse_total_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoYearBalanceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoYearTotalBalanceResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.SaldoYearTotalBalanceResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoYearTotalBalanceResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoYearTotalBalanceResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoYearTotalBalanceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SaldoYearTotalBalanceResponse_total_balance(ctx context.Context, field graphql.CollectedField, obj *model.SaldoYearTotalBalanceResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SaldoYearTotalBalanceResponse_total_balance,
		func(ctx context.Context) (any, error) {
			return obj.TotalBalance, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SaldoYearTotalBalanceResponse_total_balance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SaldoYearTotalBalanceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TokenResponse_access_token(ctx context.Context, field graphql.CollectedField, obj *model.TokenResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TokenResponse_access_token,
		func(ctx context.Context) (any, error) {
			return obj.AccessToken, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TokenResponse_access_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TokenResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TokenResponse_refresh_token(ctx context.Context, field graphql.CollectedField, obj *model.TokenResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TokenResponse_refresh_token,
		func(ctx context.Context) (any, error) {
			return obj.RefreshToken, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TokenResponse_refresh_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TokenResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupMonthAmountResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.TopupMonthAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupMonthAmountResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupMonthAmountResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupMonthAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupMonthAmountResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TopupMonthAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupMonthAmountResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupMonthAmountResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupMonthAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupMonthMethodResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.TopupMonthMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupMonthMethodResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupMonthMethodResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupMonthMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupMonthMethodResponse_topup_method(ctx context.Context, field graphql.CollectedField, obj *model.TopupMonthMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupMonthMethodResponse_topup_method,
		func(ctx context.Context) (any, error) {
			return obj.TopupMethod, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupMonthMethodResponse_topup_method(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupMonthMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupMonthMethodResponse_total_topups(ctx context.Context, field graphql.CollectedField, obj *model.TopupMonthMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupMonthMethodResponse_total_topups,
		func(ctx context.Context) (any, error) {
			return obj.TotalTopups, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupMonthMethodResponse_total_topups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupMonthMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupMonthMethodResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TopupMonthMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupMonthMethodResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupMonthMethodResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupMonthMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupMonthStatusFailedResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TopupMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupMonthStatusFailedResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupMonthStatusFailedResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupMonthStatusFailedResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.TopupMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupMonthStatusFailedResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupMonthStatusFailedResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupMonthStatusFailedResponse_total_failed(ctx context.Context, field graphql.CollectedField, obj *model.TopupMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupMonthStatusFailedResponse_total_failed,
		func(ctx context.Context) (any, error) {
			return obj.TotalFailed, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupMonthStatusFailedResponse_total_failed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupMonthStatusFailedResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TopupMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupMonthStatusFailedResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupMonthStatusFailedResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupMonthStatusSuccessResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TopupMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupMonthStatusSuccessResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupMonthStatusSuccessResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupMonthStatusSuccessResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.TopupMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupMonthStatusSuccessResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupMonthStatusSuccessResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupMonthStatusSuccessResponse_total_success(ctx context.Context, field graphql.CollectedField, obj *model.TopupMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupMonthStatusSuccessResponse_total_success,
		func(ctx context.Context) (any, error) {
			return obj.TotalSuccess, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupMonthStatusSuccessResponse_total_success(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupMonthStatusSuccessResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TopupMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupMonthStatusSuccessResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupMonthStatusSuccessResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponse_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupResponse_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponse_card_number(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponse_card_number,
		func(ctx context.Context) (any, error) {
			return obj.CardNumber, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupResponse_card_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponse_topup_no(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponse_topup_no,
		func(ctx context.Context) (any, error) {
			return obj.TopupNo, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupResponse_topup_no(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponse_topup_amount(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponse_topup_amount,
		func(ctx context.Context) (any, error) {
			return obj.TopupAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupResponse_topup_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponse_topup_method(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponse_topup_method,
		func(ctx context.Context) (any, error) {
			return obj.TopupMethod, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupResponse_topup_method(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponse_topup_time(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponse_topup_time,
		func(ctx context.Context) (any, error) {
			return obj.TopupTime, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopupResponse_topup_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponse_created_at,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupResponse_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponse_updated_at,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupResponse_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponseDeleteAt_id(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponseDeleteAt_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupResponseDeleteAt_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponseDeleteAt_card_number(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponseDeleteAt_card_number,
		func(ctx context.Context) (any, error) {
			return obj.CardNumber, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupResponseDeleteAt_card_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponseDeleteAt_topup_no(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponseDeleteAt_topup_no,
		func(ctx context.Context) (any, error) {
			return obj.TopupNo, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupResponseDeleteAt_topup_no(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponseDeleteAt_topup_amount(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponseDeleteAt_topup_amount,
		func(ctx context.Context) (any, error) {
			return obj.TopupAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupResponseDeleteAt_topup_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponseDeleteAt_topup_method(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponseDeleteAt_topup_method,
		func(ctx context.Context) (any, error) {
			return obj.TopupMethod, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupResponseDeleteAt_topup_method(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponseDeleteAt_topup_time(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponseDeleteAt_topup_time,
		func(ctx context.Context) (any, error) {
			return obj.TopupTime, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopupResponseDeleteAt_topup_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponseDeleteAt_created_at(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponseDeleteAt_created_at,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupResponseDeleteAt_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponseDeleteAt_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponseDeleteAt_updated_at,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupResponseDeleteAt_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupResponseDeleteAt_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.TopupResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupResponseDeleteAt_deleted_at,
		func(ctx context.Context) (any, error) {
			return obj.DeletedAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopupResponseDeleteAt_deleted_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupYearAmountResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TopupYearAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupYearAmountResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupYearAmountResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupYearAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupYearAmountResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TopupYearAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupYearAmountResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupYearAmountResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupYearAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupYearMethodResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TopupYearMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupYearMethodResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupYearMethodResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupYearMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupYearMethodResponse_topup_method(ctx context.Context, field graphql.CollectedField, obj *model.TopupYearMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupYearMethodResponse_topup_method,
		func(ctx context.Context) (any, error) {
			return obj.TopupMethod, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupYearMethodResponse_topup_method(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupYearMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupYearMethodResponse_total_topups(ctx context.Context, field graphql.CollectedField, obj *model.TopupYearMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupYearMethodResponse_total_topups,
		func(ctx context.Context) (any, error) {
			return obj.TotalTopups, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupYearMethodResponse_total_topups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupYearMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupYearMethodResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TopupYearMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupYearMethodResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupYearMethodResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupYearMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupYearStatusFailedResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TopupYearStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupYearStatusFailedResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupYearStatusFailedResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupYearStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupYearStatusFailedResponse_total_failed(ctx context.Context, field graphql.CollectedField, obj *model.TopupYearStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupYearStatusFailedResponse_total_failed,
		func(ctx context.Context) (any, error) {
			return obj.TotalFailed, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupYearStatusFailedResponse_total_failed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupYearStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupYearStatusFailedResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TopupYearStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupYearStatusFailedResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupYearStatusFailedResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupYearStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupYearStatusSuccessResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TopupYearStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupYearStatusSuccessResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupYearStatusSuccessResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupYearStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupYearStatusSuccessResponse_total_success(ctx context.Context, field graphql.CollectedField, obj *model.TopupYearStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupYearStatusSuccessResponse_total_success,
		func(ctx context.Context) (any, error) {
			return obj.TotalSuccess, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupYearStatusSuccessResponse_total_success(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupYearStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopupYearStatusSuccessResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TopupYearStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopupYearStatusSuccessResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopupYearStatusSuccessResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopupYearStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionMonthAmountResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.TransactionMonthAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionMonthAmountResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionMonthAmountResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionMonthAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionMonthAmountResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransactionMonthAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionMonthAmountResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionMonthAmountResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionMonthAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionMonthMethodResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.TransactionMonthMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionMonthMethodResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionMonthMethodResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionMonthMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionMonthMethodResponse_payment_method(ctx context.Context, field graphql.CollectedField, obj *model.TransactionMonthMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionMonthMethodResponse_payment_method,
		func(ctx context.Context) (any, error) {
			return obj.PaymentMethod, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionMonthMethodResponse_payment_method(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionMonthMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionMonthMethodResponse_total_transactions(ctx context.Context, field graphql.CollectedField, obj *model.TransactionMonthMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionMonthMethodResponse_total_transactions,
		func(ctx context.Context) (any, error) {
			return obj.TotalTransactions, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionMonthMethodResponse_total_transactions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionMonthMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionMonthMethodResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransactionMonthMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionMonthMethodResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionMonthMethodResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionMonthMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionMonthStatusFailedResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TransactionMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionMonthStatusFailedResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionMonthStatusFailedResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionMonthStatusFailedResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.TransactionMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionMonthStatusFailedResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionMonthStatusFailedResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionMonthStatusFailedResponse_total_failed(ctx context.Context, field graphql.CollectedField, obj *model.TransactionMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionMonthStatusFailedResponse_total_failed,
		func(ctx context.Context) (any, error) {
			return obj.TotalFailed, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionMonthStatusFailedResponse_total_failed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionMonthStatusFailedResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransactionMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionMonthStatusFailedResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionMonthStatusFailedResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionMonthStatusSuccessResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TransactionMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionMonthStatusSuccessResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionMonthStatusSuccessResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionMonthStatusSuccessResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.TransactionMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionMonthStatusSuccessResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionMonthStatusSuccessResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionMonthStatusSuccessResponse_total_success(ctx context.Context, field graphql.CollectedField, obj *model.TransactionMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionMonthStatusSuccessResponse_total_success,
		func(ctx context.Context) (any, error) {
			return obj.TotalSuccess, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionMonthStatusSuccessResponse_total_success(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionMonthStatusSuccessResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransactionMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionMonthStatusSuccessResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionMonthStatusSuccessResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponse_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponse_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponse_card_number(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponse_card_number,
		func(ctx context.Context) (any, error) {
			return obj.CardNumber, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponse_card_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponse_transaction_no(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponse_transaction_no,
		func(ctx context.Context) (any, error) {
			return obj.TransactionNo, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponse_transaction_no(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponse_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponse_amount,
		func(ctx context.Context) (any, error) {
			return obj.Amount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponse_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponse_payment_method(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponse_payment_method,
		func(ctx context.Context) (any, error) {
			return obj.PaymentMethod, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponse_payment_method(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponse_merchant_id(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponse_merchant_id,
		func(ctx context.Context) (any, error) {
			return obj.MerchantID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponse_merchant_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponse_transaction_time(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponse_transaction_time,
		func(ctx context.Context) (any, error) {
			return obj.TransactionTime, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponse_transaction_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponse_created_at,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponse_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponse_updated_at,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponse_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponseDeleteAt_id(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponseDeleteAt_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponseDeleteAt_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponseDeleteAt_card_number(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponseDeleteAt_card_number,
		func(ctx context.Context) (any, error) {
			return obj.CardNumber, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponseDeleteAt_card_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponseDeleteAt_transaction_no(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponseDeleteAt_transaction_no,
		func(ctx context.Context) (any, error) {
			return obj.TransactionNo, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponseDeleteAt_transaction_no(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponseDeleteAt_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponseDeleteAt_amount,
		func(ctx context.Context) (any, error) {
			return obj.Amount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponseDeleteAt_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponseDeleteAt_payment_method(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponseDeleteAt_payment_method,
		func(ctx context.Context) (any, error) {
			return obj.PaymentMethod, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponseDeleteAt_payment_method(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponseDeleteAt_merchant_id(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponseDeleteAt_merchant_id,
		func(ctx context.Context) (any, error) {
			return obj.MerchantID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponseDeleteAt_merchant_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponseDeleteAt_transaction_time(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponseDeleteAt_transaction_time,
		func(ctx context.Context) (any, error) {
			return obj.TransactionTime, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponseDeleteAt_transaction_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponseDeleteAt_created_at(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponseDeleteAt_created_at,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponseDeleteAt_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponseDeleteAt_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponseDeleteAt_updated_at,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionResponseDeleteAt_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionResponseDeleteAt_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.TransactionResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionResponseDeleteAt_deleted_at,
		func(ctx context.Context) (any, error) {
			return obj.DeletedAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TransactionResponseDeleteAt_deleted_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionYearMethodResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TransactionYearMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionYearMethodResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionYearMethodResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionYearMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionYearMethodResponse_payment_method(ctx context.Context, field graphql.CollectedField, obj *model.TransactionYearMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionYearMethodResponse_payment_method,
		func(ctx context.Context) (any, error) {
			return obj.PaymentMethod, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionYearMethodResponse_payment_method(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionYearMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionYearMethodResponse_total_transactions(ctx context.Context, field graphql.CollectedField, obj *model.TransactionYearMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionYearMethodResponse_total_transactions,
		func(ctx context.Context) (any, error) {
			return obj.TotalTransactions, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionYearMethodResponse_total_transactions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionYearMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionYearMethodResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransactionYearMethodResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionYearMethodResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionYearMethodResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionYearMethodResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionYearStatusFailedResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TransactionYearStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionYearStatusFailedResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionYearStatusFailedResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionYearStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionYearStatusFailedResponse_total_failed(ctx context.Context, field graphql.CollectedField, obj *model.TransactionYearStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionYearStatusFailedResponse_total_failed,
		func(ctx context.Context) (any, error) {
			return obj.TotalFailed, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionYearStatusFailedResponse_total_failed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionYearStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionYearStatusFailedResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransactionYearStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionYearStatusFailedResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionYearStatusFailedResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionYearStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionYearStatusSuccessResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TransactionYearStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionYearStatusSuccessResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionYearStatusSuccessResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionYearStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionYearStatusSuccessResponse_total_success(ctx context.Context, field graphql.CollectedField, obj *model.TransactionYearStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionYearStatusSuccessResponse_total_success,
		func(ctx context.Context) (any, error) {
			return obj.TotalSuccess, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionYearStatusSuccessResponse_total_success(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionYearStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionYearStatusSuccessResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransactionYearStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionYearStatusSuccessResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionYearStatusSuccessResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionYearStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionYearlyAmountResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TransactionYearlyAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionYearlyAmountResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionYearlyAmountResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionYearlyAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionYearlyAmountResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransactionYearlyAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransactionYearlyAmountResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransactionYearlyAmountResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionYearlyAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferMonthAmountResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.TransferMonthAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferMonthAmountResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferMonthAmountResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferMonthAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferMonthAmountResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransferMonthAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferMonthAmountResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferMonthAmountResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferMonthAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferMonthStatusFailedResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TransferMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferMonthStatusFailedResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferMonthStatusFailedResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferMonthStatusFailedResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.TransferMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferMonthStatusFailedResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferMonthStatusFailedResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferMonthStatusFailedResponse_total_failed(ctx context.Context, field graphql.CollectedField, obj *model.TransferMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferMonthStatusFailedResponse_total_failed,
		func(ctx context.Context) (any, error) {
			return obj.TotalFailed, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferMonthStatusFailedResponse_total_failed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferMonthStatusFailedResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransferMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferMonthStatusFailedResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferMonthStatusFailedResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferMonthStatusSuccessResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TransferMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferMonthStatusSuccessResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferMonthStatusSuccessResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferMonthStatusSuccessResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.TransferMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferMonthStatusSuccessResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferMonthStatusSuccessResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferMonthStatusSuccessResponse_total_success(ctx context.Context, field graphql.CollectedField, obj *model.TransferMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferMonthStatusSuccessResponse_total_success,
		func(ctx context.Context) (any, error) {
			return obj.TotalSuccess, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferMonthStatusSuccessResponse_total_success(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferMonthStatusSuccessResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransferMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferMonthStatusSuccessResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferMonthStatusSuccessResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponse_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponse_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponse_transfer_no(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponse_transfer_no,
		func(ctx context.Context) (any, error) {
			return obj.TransferNo, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponse_transfer_no(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponse_transfer_from(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponse_transfer_from,
		func(ctx context.Context) (any, error) {
			return obj.TransferFrom, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponse_transfer_from(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponse_transfer_to(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponse_transfer_to,
		func(ctx context.Context) (any, error) {
			return obj.TransferTo, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponse_transfer_to(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponse_transfer_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponse_transfer_amount,
		func(ctx context.Context) (any, error) {
			return obj.TransferAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponse_transfer_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponse_transfer_time(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponse_transfer_time,
		func(ctx context.Context) (any, error) {
			return obj.TransferTime, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponse_transfer_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponse_created_at,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponse_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponse_updated_at,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponse_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponseDeleteAt_id(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponseDeleteAt_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponseDeleteAt_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponseDeleteAt_transfer_no(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponseDeleteAt_transfer_no,
		func(ctx context.Context) (any, error) {
			return obj.TransferNo, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponseDeleteAt_transfer_no(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponseDeleteAt_transfer_from(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponseDeleteAt_transfer_from,
		func(ctx context.Context) (any, error) {
			return obj.TransferFrom, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponseDeleteAt_transfer_from(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponseDeleteAt_transfer_to(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponseDeleteAt_transfer_to,
		func(ctx context.Context) (any, error) {
			return obj.TransferTo, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponseDeleteAt_transfer_to(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponseDeleteAt_transfer_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponseDeleteAt_transfer_amount,
		func(ctx context.Context) (any, error) {
			return obj.TransferAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponseDeleteAt_transfer_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponseDeleteAt_transfer_time(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponseDeleteAt_transfer_time,
		func(ctx context.Context) (any, error) {
			return obj.TransferTime, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponseDeleteAt_transfer_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponseDeleteAt_created_at(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponseDeleteAt_created_at,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponseDeleteAt_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponseDeleteAt_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponseDeleteAt_updated_at,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferResponseDeleteAt_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferResponseDeleteAt_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.TransferResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferResponseDeleteAt_deleted_at,
		func(ctx context.Context) (any, error) {
			return obj.DeletedAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TransferResponseDeleteAt_deleted_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferYearAmountResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TransferYearAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferYearAmountResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferYearAmountResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferYearAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferYearAmountResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransferYearAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferYearAmountResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferYearAmountResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferYearAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferYearStatusFailedResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TransferYearStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferYearStatusFailedResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferYearStatusFailedResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferYearStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferYearStatusFailedResponse_total_failed(ctx context.Context, field graphql.CollectedField, obj *model.TransferYearStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferYearStatusFailedResponse_total_failed,
		func(ctx context.Context) (any, error) {
			return obj.TotalFailed, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferYearStatusFailedResponse_total_failed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferYearStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferYearStatusFailedResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransferYearStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferYearStatusFailedResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferYearStatusFailedResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferYearStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferYearStatusSuccessResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.TransferYearStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferYearStatusSuccessResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferYearStatusSuccessResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferYearStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferYearStatusSuccessResponse_total_success(ctx context.Context, field graphql.CollectedField, obj *model.TransferYearStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferYearStatusSuccessResponse_total_success,
		func(ctx context.Context) (any, error) {
			return obj.TotalSuccess, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferYearStatusSuccessResponse_total_success(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferYearStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransferYearStatusSuccessResponse_total_amount(ctx context.Context, field graphql.CollectedField, obj *model.TransferYearStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TransferYearStatusSuccessResponse_total_amount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TransferYearStatusSuccessResponse_total_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransferYearStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.UserResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserResponse_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserResponse_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponse_firstname(ctx context.Context, field graphql.CollectedField, obj *model.UserResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserResponse_firstname,
		func(ctx context.Context) (any, error) {
			return obj.Firstname, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserResponse_firstname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponse_lastname(ctx context.Context, field graphql.CollectedField, obj *model.UserResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserResponse_lastname,
		func(ctx context.Context) (any, error) {
			return obj.Lastname, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserResponse_lastname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponse_email(ctx context.Context, field graphql.CollectedField, obj *model.UserResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserResponse_email,
		func(ctx context.Context) (any, error) {
			return obj.Email, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserResponse_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserResponse_created_at,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserResponse_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserResponse_updated_at,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserResponse_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponseDeleteAt_id(ctx context.Context, field graphql.CollectedField, obj *model.UserResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserResponseDeleteAt_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserResponseDeleteAt_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponseDeleteAt_firstname(ctx context.Context, field graphql.CollectedField, obj *model.UserResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserResponseDeleteAt_firstname,
		func(ctx context.Context) (any, error) {
			return obj.Firstname, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserResponseDeleteAt_firstname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponseDeleteAt_lastname(ctx context.Context, field graphql.CollectedField, obj *model.UserResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserResponseDeleteAt_lastname,
		func(ctx context.Context) (any, error) {
			return obj.Lastname, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserResponseDeleteAt_lastname(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponseDeleteAt_email(ctx context.Context, field graphql.CollectedField, obj *model.UserResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserResponseDeleteAt_email,
		func(ctx context.Context) (any, error) {
			return obj.Email, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserResponseDeleteAt_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponseDeleteAt_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserResponseDeleteAt_created_at,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserResponseDeleteAt_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponseDeleteAt_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserResponseDeleteAt_updated_at,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserResponseDeleteAt_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponseDeleteAt_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.UserResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserResponseDeleteAt_deleted_at,
		func(ctx context.Context) (any, error) {
			return obj.DeletedAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_UserResponseDeleteAt_deleted_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawMonthStatusFailedResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawMonthStatusFailedResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawMonthStatusFailedResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawMonthStatusFailedResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawMonthStatusFailedResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawMonthStatusFailedResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawMonthStatusFailedResponse_totalFailed(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawMonthStatusFailedResponse_totalFailed,
		func(ctx context.Context) (any, error) {
			return obj.TotalFailed, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawMonthStatusFailedResponse_totalFailed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawMonthStatusFailedResponse_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawMonthStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawMonthStatusFailedResponse_totalAmount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawMonthStatusFailedResponse_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawMonthStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawMonthStatusSuccessResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawMonthStatusSuccessResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawMonthStatusSuccessResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawMonthStatusSuccessResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawMonthStatusSuccessResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawMonthStatusSuccessResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawMonthStatusSuccessResponse_totalSuccess(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawMonthStatusSuccessResponse_totalSuccess,
		func(ctx context.Context) (any, error) {
			return obj.TotalSuccess, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawMonthStatusSuccessResponse_totalSuccess(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawMonthStatusSuccessResponse_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawMonthStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawMonthStatusSuccessResponse_totalAmount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawMonthStatusSuccessResponse_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawMonthStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawMonthlyAmountResponse_month(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawMonthlyAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawMonthlyAmountResponse_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawMonthlyAmountResponse_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawMonthlyAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawMonthlyAmountResponse_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawMonthlyAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawMonthlyAmountResponse_totalAmount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawMonthlyAmountResponse_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawMonthlyAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponse_id(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponse_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponse_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponse_withdrawNo(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponse_withdrawNo,
		func(ctx context.Context) (any, error) {
			return obj.WithdrawNo, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponse_withdrawNo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponse_cardNumber(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponse_cardNumber,
		func(ctx context.Context) (any, error) {
			return obj.CardNumber, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponse_cardNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponse_withdrawAmount(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponse_withdrawAmount,
		func(ctx context.Context) (any, error) {
			return obj.WithdrawAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponse_withdrawAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponse_withdrawTime(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponse_withdrawTime,
		func(ctx context.Context) (any, error) {
			return obj.WithdrawTime, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponse_withdrawTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponse_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponse_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponse_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponse_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponse_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponse_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponseDeleteAt_id(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponseDeleteAt_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponseDeleteAt_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponseDeleteAt_withdrawNo(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponseDeleteAt_withdrawNo,
		func(ctx context.Context) (any, error) {
			return obj.WithdrawNo, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponseDeleteAt_withdrawNo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponseDeleteAt_cardNumber(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponseDeleteAt_cardNumber,
		func(ctx context.Context) (any, error) {
			return obj.CardNumber, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponseDeleteAt_cardNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponseDeleteAt_withdrawAmount(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponseDeleteAt_withdrawAmount,
		func(ctx context.Context) (any, error) {
			return obj.WithdrawAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponseDeleteAt_withdrawAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponseDeleteAt_withdrawTime(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponseDeleteAt_withdrawTime,
		func(ctx context.Context) (any, error) {
			return obj.WithdrawTime, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponseDeleteAt_withdrawTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponseDeleteAt_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponseDeleteAt_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponseDeleteAt_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponseDeleteAt_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponseDeleteAt_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponseDeleteAt_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawResponseDeleteAt_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawResponseDeleteAt) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawResponseDeleteAt_deletedAt,
		func(ctx context.Context) (any, error) {
			return obj.DeletedAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_WithdrawResponseDeleteAt_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawResponseDeleteAt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawYearStatusFailedResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawYearStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawYearStatusFailedResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawYearStatusFailedResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawYearStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawYearStatusFailedResponse_totalFailed(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawYearStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawYearStatusFailedResponse_totalFailed,
		func(ctx context.Context) (any, error) {
			return obj.TotalFailed, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawYearStatusFailedResponse_totalFailed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawYearStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawYearStatusFailedResponse_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawYearStatusFailedResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawYearStatusFailedResponse_totalAmount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawYearStatusFailedResponse_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawYearStatusFailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawYearStatusSuccessResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawYearStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawYearStatusSuccessResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawYearStatusSuccessResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawYearStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawYearStatusSuccessResponse_totalSuccess(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawYearStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawYearStatusSuccessResponse_totalSuccess,
		func(ctx context.Context) (any, error) {
			return obj.TotalSuccess, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawYearStatusSuccessResponse_totalSuccess(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawYearStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawYearStatusSuccessResponse_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawYearStatusSuccessResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawYearStatusSuccessResponse_totalAmount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawYearStatusSuccessResponse_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawYearStatusSuccessResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawYearlyAmountResponse_year(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawYearlyAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawYearlyAmountResponse_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawYearlyAmountResponse_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawYearlyAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawYearlyAmountResponse_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawYearlyAmountResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WithdrawYearlyAmountResponse_totalAmount,
		func(ctx context.Context) (any, error) {
			return obj.TotalAmount, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WithdrawYearlyAmountResponse_totalAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawYearlyAmountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_isRepeatable,
		func(ctx context.Context) (any, error) {
			return obj.IsRepeatable, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_locations,
		func(ctx context.Context) (any, error) {
			return obj.Locations, nil
		},
		nil,
		ec.marshalN__DirectiveLocation2ᚕstringᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_defaultValue,
		func(ctx context.Context) (any, error) {
			return obj.DefaultValue, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_types,
		func(ctx context.Context) (any, error) {
			return obj.Types(), nil
		},
		nil,
		ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_queryType,
		func(ctx context.Context) (any, error) {
			return obj.QueryType(), nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_mutationType,
		func(ctx context.Context) (any, error) {
			return obj.MutationType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_subscriptionType,
		func(ctx context.Context) (any, error) {
			return obj.SubscriptionType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_directives,
		func(ctx context.Context) (any, error) {
			return obj.Directives(), nil
		},
		nil,
		ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_kind,
		func(ctx context.Context) (any, error) {
			return obj.Kind(), nil
		},
		nil,
		ec.marshalN__TypeKind2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_name,
		func(ctx context.Context) (any, error) {
			return obj.Name(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_specifiedByURL,
		func(ctx context.Context) (any, error) {
			return obj.SpecifiedByURL(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_fields,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_interfaces,
		func(ctx context.Context) (any, error) {
			return obj.Interfaces(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_possibleTypes,
		func(ctx context.Context) (any, error) {
			return obj.PossibleTypes(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_enumValues,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_inputFields,
		func(ctx context.Context) (any, error) {
			return obj.InputFields(), nil
		},
		nil,
		ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_ofType,
		func(ctx context.Context) (any, error) {
			return obj.OfType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_isOneOf,
		func(ctx context.Context) (any, error) {
			return obj.IsOneOf(), nil
		},
		nil,
		ec.marshalOBoolean2bool,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateCardInput(ctx context.Context, obj any) (model.CreateCardInput, error) {
	var it model.CreateCardInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_id", "card_type", "expire_date", "cvv", "card_provider"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "card_type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_type"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardType = data
		case "expire_date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expire_date"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpireDate = data
		case "cvv":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cvv"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cvv = data
		case "card_provider":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_provider"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardProvider = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMerchantInput(ctx context.Context, obj any) (model.CreateMerchantInput, error) {
	var it model.CreateMerchantInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "userId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "userId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateRoleInput(ctx context.Context, obj any) (model.CreateRoleInput, error) {
	var it model.CreateRoleInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSaldoInput(ctx context.Context, obj any) (model.CreateSaldoInput, error) {
	var it model.CreateSaldoInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_number", "total_balance"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "total_balance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_balance"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalBalance = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTopupInput(ctx context.Context, obj any) (model.CreateTopupInput, error) {
	var it model.CreateTopupInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_number", "topup_no", "topup_amount", "topup_method"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "topup_no":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topup_no"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopupNo = data
		case "topup_amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topup_amount"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopupAmount = data
		case "topup_method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topup_method"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopupMethod = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTransactionRequest(ctx context.Context, obj any) (model.CreateTransactionRequest, error) {
	var it model.CreateTransactionRequest
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"api_key", "card_number", "amount", "payment_method", "merchant_id", "transaction_time"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "api_key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("api_key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.APIKey = data
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "payment_method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_method"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PaymentMethod = data
		case "merchant_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchant_id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantID = data
		case "transaction_time":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_time"))
			data, err := ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransactionTime = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTransferRequest(ctx context.Context, obj any) (model.CreateTransferRequest, error) {
	var it model.CreateTransferRequest
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"transfer_from", "transfer_to", "transfer_amount"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "transfer_from":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transfer_from"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransferFrom = data
		case "transfer_to":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transfer_to"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransferTo = data
		case "transfer_amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transfer_amount"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransferAmount = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUserInput(ctx context.Context, obj any) (model.CreateUserInput, error) {
	var it model.CreateUserInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"firstname", "lastname", "email", "password", "confirm_password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "firstname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstname"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Firstname = data
		case "lastname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastname"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Lastname = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "confirm_password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfirmPassword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateWithdrawInput(ctx context.Context, obj any) (model.CreateWithdrawInput, error) {
	var it model.CreateWithdrawInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"cardNumber", "withdrawAmount", "withdrawTime"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "cardNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardNumber"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "withdrawAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withdrawAmount"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.WithdrawAmount = data
		case "withdrawTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withdrawTime"))
			data, err := ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.WithdrawTime = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindAllCardInput(ctx context.Context, obj any) (model.FindAllCardInput, error) {
	var it model.FindAllCardInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "page_size", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "page_size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindAllMerchantApikeyInput(ctx context.Context, obj any) (model.FindAllMerchantApikeyInput, error) {
	var it model.FindAllMerchantApikeyInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "pageSize", "search", "apiKey"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "pageSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		case "apiKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiKey"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.APIKey = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindAllMerchantInput(ctx context.Context, obj any) (model.FindAllMerchantInput, error) {
	var it model.FindAllMerchantInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "pageSize", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "pageSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindAllMerchantTransactionInput(ctx context.Context, obj any) (model.FindAllMerchantTransactionInput, error) {
	var it model.FindAllMerchantTransactionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "pageSize", "search", "merchantId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "pageSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		case "merchantId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindAllRoleInput(ctx context.Context, obj any) (model.FindAllRoleInput, error) {
	var it model.FindAllRoleInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "page_size", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "page_size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindAllSaldoInput(ctx context.Context, obj any) (model.FindAllSaldoInput, error) {
	var it model.FindAllSaldoInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "page_size", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "page_size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindAllTopupByCardNumberInput(ctx context.Context, obj any) (model.FindAllTopupByCardNumberInput, error) {
	var it model.FindAllTopupByCardNumberInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_number", "page", "page_size", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "page_size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindAllTopupInput(ctx context.Context, obj any) (model.FindAllTopupInput, error) {
	var it model.FindAllTopupInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "page_size", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "page_size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindAllTransactionCardNumberRequest(ctx context.Context, obj any) (model.FindAllTransactionCardNumberRequest, error) {
	var it model.FindAllTransactionCardNumberRequest
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_number", "page", "page_size", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "page_size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindAllTransactionRequest(ctx context.Context, obj any) (model.FindAllTransactionRequest, error) {
	var it model.FindAllTransactionRequest
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "page_size", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "page_size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindAllTransferRequest(ctx context.Context, obj any) (model.FindAllTransferRequest, error) {
	var it model.FindAllTransferRequest
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "page_size", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "page_size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindAllUserInput(ctx context.Context, obj any) (model.FindAllUserInput, error) {
	var it model.FindAllUserInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["page_size"]; !present {
		asMap["page_size"] = 10
	}

	fieldsInOrder := [...]string{"page", "page_size", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "page_size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindAllWithdrawByCardNumberInput(ctx context.Context, obj any) (model.FindAllWithdrawByCardNumberInput, error) {
	var it model.FindAllWithdrawByCardNumberInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"cardNumber", "page", "pageSize", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "cardNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardNumber"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "pageSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindAllWithdrawInput(ctx context.Context, obj any) (model.FindAllWithdrawInput, error) {
	var it model.FindAllWithdrawInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "pageSize", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "pageSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByApiKeyInput(ctx context.Context, obj any) (model.FindByAPIKeyInput, error) {
	var it model.FindByAPIKeyInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"apiKey"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "apiKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.APIKey = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByCardNumberInput(ctx context.Context, obj any) (model.FindByCardNumberInput, error) {
	var it model.FindByCardNumberInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_number"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByCardNumberTransferRequest(ctx context.Context, obj any) (model.FindByCardNumberTransferRequest, error) {
	var it model.FindByCardNumberTransferRequest
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_number", "year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByIdCardInput(ctx context.Context, obj any) (model.FindByIDCardInput, error) {
	var it model.FindByIDCardInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByIdMerchantInput(ctx context.Context, obj any) (model.FindByIDMerchantInput, error) {
	var it model.FindByIDMerchantInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByIdRoleInput(ctx context.Context, obj any) (model.FindByIDRoleInput, error) {
	var it model.FindByIDRoleInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"role_id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "role_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role_id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoleID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByIdSaldoInput(ctx context.Context, obj any) (model.FindByIDSaldoInput, error) {
	var it model.FindByIDSaldoInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByIdTopupInput(ctx context.Context, obj any) (model.FindByIDTopupInput, error) {
	var it model.FindByIDTopupInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"topup_id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "topup_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topup_id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopupID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByIdTransactionRequest(ctx context.Context, obj any) (model.FindByIDTransactionRequest, error) {
	var it model.FindByIDTransactionRequest
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"transaction_id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "transaction_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransactionID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByIdTransferRequest(ctx context.Context, obj any) (model.FindByIDTransferRequest, error) {
	var it model.FindByIDTransferRequest
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"transfer_id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "transfer_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transfer_id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransferID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByIdUserInput(ctx context.Context, obj any) (model.FindByIDUserInput, error) {
	var it model.FindByIDUserInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByIdUserRoleInput(ctx context.Context, obj any) (model.FindByIDUserRoleInput, error) {
	var it model.FindByIDUserRoleInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByIdWithdrawInput(ctx context.Context, obj any) (model.FindByIDWithdrawInput, error) {
	var it model.FindByIDWithdrawInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"withdrawId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "withdrawId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withdrawId"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.WithdrawID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByMerchantUserIdInput(ctx context.Context, obj any) (model.FindByMerchantUserIDInput, error) {
	var it model.FindByMerchantUserIDInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByUserIdCardInput(ctx context.Context, obj any) (model.FindByUserIDCardInput, error) {
	var it model.FindByUserIDCardInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindByYearCardNumberTransactionRequest(ctx context.Context, obj any) (model.FindByYearCardNumberTransactionRequest, error) {
	var it model.FindByYearCardNumberTransactionRequest
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_number", "year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindMonthlySaldoTotalBalanceInput(ctx context.Context, obj any) (model.FindMonthlySaldoTotalBalanceInput, error) {
	var it model.FindMonthlySaldoTotalBalanceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year", "month"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "month":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Month = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindMonthlyTopupStatusCardNumberInput(ctx context.Context, obj any) (model.FindMonthlyTopupStatusCardNumberInput, error) {
	var it model.FindMonthlyTopupStatusCardNumberInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_number", "year", "month"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "month":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Month = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindMonthlyTopupStatusInput(ctx context.Context, obj any) (model.FindMonthlyTopupStatusInput, error) {
	var it model.FindMonthlyTopupStatusInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year", "month"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "month":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Month = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindMonthlyTransactionStatus(ctx context.Context, obj any) (model.FindMonthlyTransactionStatus, error) {
	var it model.FindMonthlyTransactionStatus
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year", "month"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "month":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Month = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindMonthlyTransactionStatusCardNumber(ctx context.Context, obj any) (model.FindMonthlyTransactionStatusCardNumber, error) {
	var it model.FindMonthlyTransactionStatusCardNumber
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_number", "year", "month"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "month":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Month = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindMonthlyTransferStatus(ctx context.Context, obj any) (model.FindMonthlyTransferStatus, error) {
	var it model.FindMonthlyTransferStatus
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year", "month"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "month":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Month = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindMonthlyTransferStatusCardNumber(ctx context.Context, obj any) (model.FindMonthlyTransferStatusCardNumber, error) {
	var it model.FindMonthlyTransferStatusCardNumber
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_number", "year", "month"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "month":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Month = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindMonthlyWithdrawStatusCardNumberInput(ctx context.Context, obj any) (model.FindMonthlyWithdrawStatusCardNumberInput, error) {
	var it model.FindMonthlyWithdrawStatusCardNumberInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"cardNumber", "year", "month"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "cardNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardNumber"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "month":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Month = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindMonthlyWithdrawStatusInput(ctx context.Context, obj any) (model.FindMonthlyWithdrawStatusInput, error) {
	var it model.FindMonthlyWithdrawStatusInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year", "month"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "month":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Month = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindTransactionByMerchantIdRequest(ctx context.Context, obj any) (model.FindTransactionByMerchantIDRequest, error) {
	var it model.FindTransactionByMerchantIDRequest
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"merchant_id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "merchant_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchant_id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindTransferByTransferFromRequest(ctx context.Context, obj any) (model.FindTransferByTransferFromRequest, error) {
	var it model.FindTransferByTransferFromRequest
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"transfer_from"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "transfer_from":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transfer_from"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransferFrom = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindTransferByTransferToRequest(ctx context.Context, obj any) (model.FindTransferByTransferToRequest, error) {
	var it model.FindTransferByTransferToRequest
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"transfer_to"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "transfer_to":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transfer_to"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransferTo = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearAmountCardNumberInput(ctx context.Context, obj any) (model.FindYearAmountCardNumberInput, error) {
	var it model.FindYearAmountCardNumberInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year", "card_number"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearAmountInput(ctx context.Context, obj any) (model.FindYearAmountInput, error) {
	var it model.FindYearAmountInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearBalanceCardNumberInput(ctx context.Context, obj any) (model.FindYearBalanceCardNumberInput, error) {
	var it model.FindYearBalanceCardNumberInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year", "card_number"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearBalanceInput(ctx context.Context, obj any) (model.FindYearBalanceInput, error) {
	var it model.FindYearBalanceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearMerchantByApikeyInput(ctx context.Context, obj any) (model.FindYearMerchantByApikeyInput, error) {
	var it model.FindYearMerchantByApikeyInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year", "apiKey"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "apiKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiKey"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.APIKey = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearMerchantByIdInput(ctx context.Context, obj any) (model.FindYearMerchantByIDInput, error) {
	var it model.FindYearMerchantByIDInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year", "merchantId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "merchantId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearMerchantInput(ctx context.Context, obj any) (model.FindYearMerchantInput, error) {
	var it model.FindYearMerchantInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearTopupCardNumberInput(ctx context.Context, obj any) (model.FindYearTopupCardNumberInput, error) {
	var it model.FindYearTopupCardNumberInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_number", "year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearTopupStatusCardNumberInput(ctx context.Context, obj any) (model.FindYearTopupStatusCardNumberInput, error) {
	var it model.FindYearTopupStatusCardNumberInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_number", "year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearTopupStatusInput(ctx context.Context, obj any) (model.FindYearTopupStatusInput, error) {
	var it model.FindYearTopupStatusInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearTransactionStatus(ctx context.Context, obj any) (model.FindYearTransactionStatus, error) {
	var it model.FindYearTransactionStatus
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearTransactionStatusCardNumber(ctx context.Context, obj any) (model.FindYearTransactionStatusCardNumber, error) {
	var it model.FindYearTransactionStatusCardNumber
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_number", "year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearTransferStatus(ctx context.Context, obj any) (model.FindYearTransferStatus, error) {
	var it model.FindYearTransferStatus
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearTransferStatusCardNumber(ctx context.Context, obj any) (model.FindYearTransferStatusCardNumber, error) {
	var it model.FindYearTransferStatusCardNumber
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"card_number", "year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearWithdrawCardNumberInput(ctx context.Context, obj any) (model.FindYearWithdrawCardNumberInput, error) {
	var it model.FindYearWithdrawCardNumberInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"cardNumber", "year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "cardNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardNumber"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearWithdrawStatusCardNumberInput(ctx context.Context, obj any) (model.FindYearWithdrawStatusCardNumberInput, error) {
	var it model.FindYearWithdrawStatusCardNumberInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"cardNumber", "year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "cardNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardNumber"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearWithdrawStatusInput(ctx context.Context, obj any) (model.FindYearWithdrawStatusInput, error) {
	var it model.FindYearWithdrawStatusInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindYearlySaldoInput(ctx context.Context, obj any) (model.FindYearlySaldoInput, error) {
	var it model.FindYearlySaldoInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"year"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetMeInput(ctx context.Context, obj any) (model.GetMeInput, error) {
	var it model.GetMeInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"access_token"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "access_token":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("access_token"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccessToken = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLoginInput(ctx context.Context, obj any) (model.LoginInput, error) {
	var it model.LoginInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRefreshTokenInput(ctx context.Context, obj any) (model.RefreshTokenInput, error) {
	var it model.RefreshTokenInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"refresh_token"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "refresh_token":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refresh_token"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefreshToken = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegisterInput(ctx context.Context, obj any) (model.RegisterInput, error) {
	var it model.RegisterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"firstname", "lastname", "email", "password", "confirm_password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "firstname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstname"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Firstname = data
		case "lastname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastname"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Lastname = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "confirm_password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfirmPassword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCardInput(ctx context.Context, obj any) (model.UpdateCardInput, error) {
	var it model.UpdateCardInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "user_id", "card_type", "expire_date", "cvv", "card_provider"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "user_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "card_type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_type"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardType = data
		case "expire_date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expire_date"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpireDate = data
		case "cvv":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cvv"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cvv = data
		case "card_provider":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_provider"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardProvider = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMerchantInput(ctx context.Context, obj any) (model.UpdateMerchantInput, error) {
	var it model.UpdateMerchantInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"merchantId", "name", "userId", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "merchantId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantId"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "userId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateRoleInput(ctx context.Context, obj any) (model.UpdateRoleInput, error) {
	var it model.UpdateRoleInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSaldoInput(ctx context.Context, obj any) (model.UpdateSaldoInput, error) {
	var it model.UpdateSaldoInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "card_number", "total_balance"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "total_balance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_balance"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalBalance = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTopupInput(ctx context.Context, obj any) (model.UpdateTopupInput, error) {
	var it model.UpdateTopupInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"topup_id", "card_number", "topup_amount", "topup_method"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "topup_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topup_id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopupID = data
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "topup_amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topup_amount"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopupAmount = data
		case "topup_method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topup_method"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopupMethod = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTransactionRequest(ctx context.Context, obj any) (model.UpdateTransactionRequest, error) {
	var it model.UpdateTransactionRequest
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "api_key", "card_number", "amount", "payment_method", "merchant_id", "transaction_time"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "api_key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("api_key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.APIKey = data
		case "card_number":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_number"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "payment_method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payment_method"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PaymentMethod = data
		case "merchant_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchant_id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MerchantID = data
		case "transaction_time":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_time"))
			data, err := ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransactionTime = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTransferRequest(ctx context.Context, obj any) (model.UpdateTransferRequest, error) {
	var it model.UpdateTransferRequest
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"transfer_id", "transfer_from", "transfer_to", "transfer_amount"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "transfer_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transfer_id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransferID = data
		case "transfer_from":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transfer_from"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransferFrom = data
		case "transfer_to":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transfer_to"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransferTo = data
		case "transfer_amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transfer_amount"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransferAmount = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserInput(ctx context.Context, obj any) (model.UpdateUserInput, error) {
	var it model.UpdateUserInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "firstname", "lastname", "email", "password", "confirm_password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "firstname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstname"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Firstname = data
		case "lastname":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastname"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Lastname = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "confirm_password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_password"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConfirmPassword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateWithdrawInput(ctx context.Context, obj any) (model.UpdateWithdrawInput, error) {
	var it model.UpdateWithdrawInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"withdrawId", "cardNumber", "withdrawAmount", "withdrawTime"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "withdrawId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withdrawId"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.WithdrawID = data
		case "cardNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardNumber"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CardNumber = data
		case "withdrawAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withdrawAmount"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.WithdrawAmount = data
		case "withdrawTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withdrawTime"))
			data, err := ec.unmarshalNDateTime2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.WithdrawTime = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var apiResponseCardImplementors = []string{"ApiResponseCard"}

func (ec *executionContext) _ApiResponseCard(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseCard) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseCardImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseCard")
		case "status":
			out.Values[i] = ec._ApiResponseCard_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseCard_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseCard_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseCardAllImplementors = []string{"ApiResponseCardAll"}

func (ec *executionContext) _ApiResponseCardAll(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseCardAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseCardAllImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseCardAll")
		case "status":
			out.Values[i] = ec._ApiResponseCardAll_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseCardAll_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseCardDeleteImplementors = []string{"ApiResponseCardDelete"}

func (ec *executionContext) _ApiResponseCardDelete(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseCardDelete) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseCardDeleteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseCardDelete")
		case "status":
			out.Values[i] = ec._ApiResponseCardDelete_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseCardDelete_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseCardDeleteAtImplementors = []string{"ApiResponseCardDeleteAt"}

func (ec *executionContext) _ApiResponseCardDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseCardDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseCardDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseCardDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponseCardDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseCardDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseCardDeleteAt_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseDashboardCardImplementors = []string{"ApiResponseDashboardCard"}

func (ec *executionContext) _ApiResponseDashboardCard(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseDashboardCard) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseDashboardCardImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseDashboardCard")
		case "status":
			out.Values[i] = ec._ApiResponseDashboardCard_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseDashboardCard_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseDashboardCard_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseDashboardCardNumberImplementors = []string{"ApiResponseDashboardCardNumber"}

func (ec *executionContext) _ApiResponseDashboardCardNumber(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseDashboardCardNumber) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseDashboardCardNumberImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseDashboardCardNumber")
		case "status":
			out.Values[i] = ec._ApiResponseDashboardCardNumber_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseDashboardCardNumber_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseDashboardCardNumber_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseGetMeImplementors = []string{"ApiResponseGetMe"}

func (ec *executionContext) _ApiResponseGetMe(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseGetMe) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseGetMeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseGetMe")
		case "status":
			out.Values[i] = ec._ApiResponseGetMe_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseGetMe_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseGetMe_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseLoginImplementors = []string{"ApiResponseLogin"}

func (ec *executionContext) _ApiResponseLogin(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseLogin) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseLoginImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseLogin")
		case "status":
			out.Values[i] = ec._ApiResponseLogin_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseLogin_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseLogin_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMerchantImplementors = []string{"ApiResponseMerchant"}

func (ec *executionContext) _ApiResponseMerchant(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMerchant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMerchantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMerchant")
		case "status":
			out.Values[i] = ec._ApiResponseMerchant_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMerchant_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMerchant_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMerchantAllImplementors = []string{"ApiResponseMerchantAll"}

func (ec *executionContext) _ApiResponseMerchantAll(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMerchantAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMerchantAllImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMerchantAll")
		case "status":
			out.Values[i] = ec._ApiResponseMerchantAll_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMerchantAll_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMerchantDeleteImplementors = []string{"ApiResponseMerchantDelete"}

func (ec *executionContext) _ApiResponseMerchantDelete(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMerchantDelete) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMerchantDeleteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMerchantDelete")
		case "status":
			out.Values[i] = ec._ApiResponseMerchantDelete_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMerchantDelete_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMerchantDeleteAtImplementors = []string{"ApiResponseMerchantDeleteAt"}

func (ec *executionContext) _ApiResponseMerchantDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMerchantDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMerchantDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMerchantDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponseMerchantDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMerchantDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMerchantDeleteAt_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMerchantDeleteAtPaginationImplementors = []string{"ApiResponseMerchantDeleteAtPagination"}

func (ec *executionContext) _ApiResponseMerchantDeleteAtPagination(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMerchantDeleteAtPagination) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMerchantDeleteAtPaginationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMerchantDeleteAtPagination")
		case "status":
			out.Values[i] = ec._ApiResponseMerchantDeleteAtPagination_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMerchantDeleteAtPagination_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMerchantDeleteAtPagination_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pagination":
			out.Values[i] = ec._ApiResponseMerchantDeleteAtPagination_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMerchantMonthlyAmountImplementors = []string{"ApiResponseMerchantMonthlyAmount"}

func (ec *executionContext) _ApiResponseMerchantMonthlyAmount(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMerchantMonthlyAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMerchantMonthlyAmountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMerchantMonthlyAmount")
		case "status":
			out.Values[i] = ec._ApiResponseMerchantMonthlyAmount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMerchantMonthlyAmount_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMerchantMonthlyAmount_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMerchantMonthlyPaymentMethodImplementors = []string{"ApiResponseMerchantMonthlyPaymentMethod"}

func (ec *executionContext) _ApiResponseMerchantMonthlyPaymentMethod(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMerchantMonthlyPaymentMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMerchantMonthlyPaymentMethodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMerchantMonthlyPaymentMethod")
		case "status":
			out.Values[i] = ec._ApiResponseMerchantMonthlyPaymentMethod_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMerchantMonthlyPaymentMethod_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMerchantMonthlyPaymentMethod_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMerchantMonthlyTotalAmountImplementors = []string{"ApiResponseMerchantMonthlyTotalAmount"}

func (ec *executionContext) _ApiResponseMerchantMonthlyTotalAmount(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMerchantMonthlyTotalAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMerchantMonthlyTotalAmountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMerchantMonthlyTotalAmount")
		case "status":
			out.Values[i] = ec._ApiResponseMerchantMonthlyTotalAmount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMerchantMonthlyTotalAmount_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMerchantMonthlyTotalAmount_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMerchantPaginationImplementors = []string{"ApiResponseMerchantPagination"}

func (ec *executionContext) _ApiResponseMerchantPagination(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMerchantPagination) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMerchantPaginationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMerchantPagination")
		case "status":
			out.Values[i] = ec._ApiResponseMerchantPagination_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMerchantPagination_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMerchantPagination_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pagination":
			out.Values[i] = ec._ApiResponseMerchantPagination_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMerchantTransactionPaginationImplementors = []string{"ApiResponseMerchantTransactionPagination"}

func (ec *executionContext) _ApiResponseMerchantTransactionPagination(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMerchantTransactionPagination) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMerchantTransactionPaginationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMerchantTransactionPagination")
		case "status":
			out.Values[i] = ec._ApiResponseMerchantTransactionPagination_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMerchantTransactionPagination_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMerchantTransactionPagination_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pagination":
			out.Values[i] = ec._ApiResponseMerchantTransactionPagination_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMerchantYearlyAmountImplementors = []string{"ApiResponseMerchantYearlyAmount"}

func (ec *executionContext) _ApiResponseMerchantYearlyAmount(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMerchantYearlyAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMerchantYearlyAmountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMerchantYearlyAmount")
		case "status":
			out.Values[i] = ec._ApiResponseMerchantYearlyAmount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMerchantYearlyAmount_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMerchantYearlyAmount_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMerchantYearlyPaymentMethodImplementors = []string{"ApiResponseMerchantYearlyPaymentMethod"}

func (ec *executionContext) _ApiResponseMerchantYearlyPaymentMethod(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMerchantYearlyPaymentMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMerchantYearlyPaymentMethodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMerchantYearlyPaymentMethod")
		case "status":
			out.Values[i] = ec._ApiResponseMerchantYearlyPaymentMethod_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMerchantYearlyPaymentMethod_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMerchantYearlyPaymentMethod_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMerchantYearlyTotalAmountImplementors = []string{"ApiResponseMerchantYearlyTotalAmount"}

func (ec *executionContext) _ApiResponseMerchantYearlyTotalAmount(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMerchantYearlyTotalAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMerchantYearlyTotalAmountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMerchantYearlyTotalAmount")
		case "status":
			out.Values[i] = ec._ApiResponseMerchantYearlyTotalAmount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMerchantYearlyTotalAmount_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMerchantYearlyTotalAmount_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMonthSaldoBalancesImplementors = []string{"ApiResponseMonthSaldoBalances"}

func (ec *executionContext) _ApiResponseMonthSaldoBalances(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMonthSaldoBalances) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMonthSaldoBalancesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMonthSaldoBalances")
		case "status":
			out.Values[i] = ec._ApiResponseMonthSaldoBalances_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMonthSaldoBalances_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMonthSaldoBalances_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMonthTotalSaldoImplementors = []string{"ApiResponseMonthTotalSaldo"}

func (ec *executionContext) _ApiResponseMonthTotalSaldo(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMonthTotalSaldo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMonthTotalSaldoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMonthTotalSaldo")
		case "status":
			out.Values[i] = ec._ApiResponseMonthTotalSaldo_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMonthTotalSaldo_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMonthTotalSaldo_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMonthlyAmountImplementors = []string{"ApiResponseMonthlyAmount"}

func (ec *executionContext) _ApiResponseMonthlyAmount(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMonthlyAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMonthlyAmountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMonthlyAmount")
		case "status":
			out.Values[i] = ec._ApiResponseMonthlyAmount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMonthlyAmount_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMonthlyAmount_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseMonthlyBalanceImplementors = []string{"ApiResponseMonthlyBalance"}

func (ec *executionContext) _ApiResponseMonthlyBalance(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseMonthlyBalance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseMonthlyBalanceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseMonthlyBalance")
		case "status":
			out.Values[i] = ec._ApiResponseMonthlyBalance_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseMonthlyBalance_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseMonthlyBalance_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationCardImplementors = []string{"ApiResponsePaginationCard"}

func (ec *executionContext) _ApiResponsePaginationCard(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationCard) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationCardImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationCard")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationCard_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationCard_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationCard_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationCard_pagination(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationCardDeleteAtImplementors = []string{"ApiResponsePaginationCardDeleteAt"}

func (ec *executionContext) _ApiResponsePaginationCardDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationCardDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationCardDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationCardDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationCardDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationCardDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationCardDeleteAt_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationCardDeleteAt_pagination(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationRoleImplementors = []string{"ApiResponsePaginationRole"}

func (ec *executionContext) _ApiResponsePaginationRole(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationRoleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationRole")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationRole_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationRole_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationRole_data(ctx, field, obj)
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationRole_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationRoleDeleteAtImplementors = []string{"ApiResponsePaginationRoleDeleteAt"}

func (ec *executionContext) _ApiResponsePaginationRoleDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationRoleDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationRoleDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationRoleDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationRoleDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationRoleDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationRoleDeleteAt_data(ctx, field, obj)
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationRoleDeleteAt_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationSaldoImplementors = []string{"ApiResponsePaginationSaldo"}

func (ec *executionContext) _ApiResponsePaginationSaldo(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationSaldo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationSaldoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationSaldo")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationSaldo_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationSaldo_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationSaldo_data(ctx, field, obj)
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationSaldo_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationSaldoDeleteAtImplementors = []string{"ApiResponsePaginationSaldoDeleteAt"}

func (ec *executionContext) _ApiResponsePaginationSaldoDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationSaldoDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationSaldoDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationSaldoDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationSaldoDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationSaldoDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationSaldoDeleteAt_data(ctx, field, obj)
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationSaldoDeleteAt_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationTopupImplementors = []string{"ApiResponsePaginationTopup"}

func (ec *executionContext) _ApiResponsePaginationTopup(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationTopup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationTopupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationTopup")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationTopup_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationTopup_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationTopup_data(ctx, field, obj)
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationTopup_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationTopupDeleteAtImplementors = []string{"ApiResponsePaginationTopupDeleteAt"}

func (ec *executionContext) _ApiResponsePaginationTopupDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationTopupDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationTopupDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationTopupDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationTopupDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationTopupDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationTopupDeleteAt_data(ctx, field, obj)
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationTopupDeleteAt_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationTransactionImplementors = []string{"ApiResponsePaginationTransaction"}

func (ec *executionContext) _ApiResponsePaginationTransaction(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationTransaction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationTransactionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationTransaction")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationTransaction_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationTransaction_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationTransaction_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationTransaction_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationTransactionDeleteAtImplementors = []string{"ApiResponsePaginationTransactionDeleteAt"}

func (ec *executionContext) _ApiResponsePaginationTransactionDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationTransactionDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationTransactionDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationTransactionDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationTransactionDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationTransactionDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationTransactionDeleteAt_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationTransactionDeleteAt_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationTransferImplementors = []string{"ApiResponsePaginationTransfer"}

func (ec *executionContext) _ApiResponsePaginationTransfer(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationTransfer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationTransferImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationTransfer")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationTransfer_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationTransfer_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationTransfer_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationTransfer_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationTransferDeleteAtImplementors = []string{"ApiResponsePaginationTransferDeleteAt"}

func (ec *executionContext) _ApiResponsePaginationTransferDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationTransferDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationTransferDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationTransferDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationTransferDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationTransferDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationTransferDeleteAt_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationTransferDeleteAt_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationUserImplementors = []string{"ApiResponsePaginationUser"}

func (ec *executionContext) _ApiResponsePaginationUser(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationUserImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationUser")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationUser_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationUser_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationUser_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationUser_pagination(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationUserDeleteAtImplementors = []string{"ApiResponsePaginationUserDeleteAt"}

func (ec *executionContext) _ApiResponsePaginationUserDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationUserDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationUserDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationUserDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationUserDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationUserDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationUserDeleteAt_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationUserDeleteAt_pagination(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationWithdrawImplementors = []string{"ApiResponsePaginationWithdraw"}

func (ec *executionContext) _ApiResponsePaginationWithdraw(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationWithdraw) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationWithdrawImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationWithdraw")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationWithdraw_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationWithdraw_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationWithdraw_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationWithdraw_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsePaginationWithdrawDeleteAtImplementors = []string{"ApiResponsePaginationWithdrawDeleteAt"}

func (ec *executionContext) _ApiResponsePaginationWithdrawDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsePaginationWithdrawDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsePaginationWithdrawDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsePaginationWithdrawDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponsePaginationWithdrawDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsePaginationWithdrawDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsePaginationWithdrawDeleteAt_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pagination":
			out.Values[i] = ec._ApiResponsePaginationWithdrawDeleteAt_pagination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseRefreshTokenImplementors = []string{"ApiResponseRefreshToken"}

func (ec *executionContext) _ApiResponseRefreshToken(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseRefreshToken) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseRefreshTokenImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseRefreshToken")
		case "status":
			out.Values[i] = ec._ApiResponseRefreshToken_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseRefreshToken_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseRefreshToken_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseRegisterImplementors = []string{"ApiResponseRegister"}

func (ec *executionContext) _ApiResponseRegister(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseRegister) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseRegisterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseRegister")
		case "status":
			out.Values[i] = ec._ApiResponseRegister_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseRegister_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseRegister_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseRoleImplementors = []string{"ApiResponseRole"}

func (ec *executionContext) _ApiResponseRole(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseRoleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseRole")
		case "status":
			out.Values[i] = ec._ApiResponseRole_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseRole_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseRole_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseRoleAllImplementors = []string{"ApiResponseRoleAll"}

func (ec *executionContext) _ApiResponseRoleAll(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseRoleAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseRoleAllImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseRoleAll")
		case "status":
			out.Values[i] = ec._ApiResponseRoleAll_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseRoleAll_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseRoleDeleteImplementors = []string{"ApiResponseRoleDelete"}

func (ec *executionContext) _ApiResponseRoleDelete(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseRoleDelete) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseRoleDeleteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseRoleDelete")
		case "status":
			out.Values[i] = ec._ApiResponseRoleDelete_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseRoleDelete_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseRoleDeleteAtImplementors = []string{"ApiResponseRoleDeleteAt"}

func (ec *executionContext) _ApiResponseRoleDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseRoleDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseRoleDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseRoleDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponseRoleDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseRoleDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseRoleDeleteAt_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseSaldoAllImplementors = []string{"ApiResponseSaldoAll"}

func (ec *executionContext) _ApiResponseSaldoAll(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseSaldoAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseSaldoAllImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseSaldoAll")
		case "status":
			out.Values[i] = ec._ApiResponseSaldoAll_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseSaldoAll_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseSaldoDeleteImplementors = []string{"ApiResponseSaldoDelete"}

func (ec *executionContext) _ApiResponseSaldoDelete(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseSaldoDelete) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseSaldoDeleteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseSaldoDelete")
		case "status":
			out.Values[i] = ec._ApiResponseSaldoDelete_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseSaldoDelete_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseSaldoResponseImplementors = []string{"ApiResponseSaldoResponse"}

func (ec *executionContext) _ApiResponseSaldoResponse(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseSaldoResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseSaldoResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseSaldoResponse")
		case "status":
			out.Values[i] = ec._ApiResponseSaldoResponse_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseSaldoResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseSaldoResponse_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseSaldoResponseDeleteAtImplementors = []string{"ApiResponseSaldoResponseDeleteAt"}

func (ec *executionContext) _ApiResponseSaldoResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseSaldoResponseDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseSaldoResponseDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseSaldoResponseDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponseSaldoResponseDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseSaldoResponseDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseSaldoResponseDeleteAt_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTopupImplementors = []string{"ApiResponseTopup"}

func (ec *executionContext) _ApiResponseTopup(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTopup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTopupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTopup")
		case "status":
			out.Values[i] = ec._ApiResponseTopup_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTopup_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTopup_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTopupAllImplementors = []string{"ApiResponseTopupAll"}

func (ec *executionContext) _ApiResponseTopupAll(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTopupAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTopupAllImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTopupAll")
		case "status":
			out.Values[i] = ec._ApiResponseTopupAll_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTopupAll_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTopupDeleteImplementors = []string{"ApiResponseTopupDelete"}

func (ec *executionContext) _ApiResponseTopupDelete(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTopupDelete) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTopupDeleteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTopupDelete")
		case "status":
			out.Values[i] = ec._ApiResponseTopupDelete_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTopupDelete_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTopupDeleteAtImplementors = []string{"ApiResponseTopupDeleteAt"}

func (ec *executionContext) _ApiResponseTopupDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTopupDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTopupDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTopupDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponseTopupDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTopupDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTopupDeleteAt_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTopupMonthAmountImplementors = []string{"ApiResponseTopupMonthAmount"}

func (ec *executionContext) _ApiResponseTopupMonthAmount(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTopupMonthAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTopupMonthAmountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTopupMonthAmount")
		case "status":
			out.Values[i] = ec._ApiResponseTopupMonthAmount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTopupMonthAmount_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTopupMonthAmount_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTopupMonthMethodImplementors = []string{"ApiResponseTopupMonthMethod"}

func (ec *executionContext) _ApiResponseTopupMonthMethod(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTopupMonthMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTopupMonthMethodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTopupMonthMethod")
		case "status":
			out.Values[i] = ec._ApiResponseTopupMonthMethod_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTopupMonthMethod_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTopupMonthMethod_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTopupMonthStatusFailedImplementors = []string{"ApiResponseTopupMonthStatusFailed"}

func (ec *executionContext) _ApiResponseTopupMonthStatusFailed(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTopupMonthStatusFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTopupMonthStatusFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTopupMonthStatusFailed")
		case "status":
			out.Values[i] = ec._ApiResponseTopupMonthStatusFailed_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTopupMonthStatusFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTopupMonthStatusFailed_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTopupMonthStatusSuccessImplementors = []string{"ApiResponseTopupMonthStatusSuccess"}

func (ec *executionContext) _ApiResponseTopupMonthStatusSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTopupMonthStatusSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTopupMonthStatusSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTopupMonthStatusSuccess")
		case "status":
			out.Values[i] = ec._ApiResponseTopupMonthStatusSuccess_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTopupMonthStatusSuccess_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTopupMonthStatusSuccess_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTopupYearAmountImplementors = []string{"ApiResponseTopupYearAmount"}

func (ec *executionContext) _ApiResponseTopupYearAmount(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTopupYearAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTopupYearAmountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTopupYearAmount")
		case "status":
			out.Values[i] = ec._ApiResponseTopupYearAmount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTopupYearAmount_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTopupYearAmount_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTopupYearMethodImplementors = []string{"ApiResponseTopupYearMethod"}

func (ec *executionContext) _ApiResponseTopupYearMethod(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTopupYearMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTopupYearMethodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTopupYearMethod")
		case "status":
			out.Values[i] = ec._ApiResponseTopupYearMethod_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTopupYearMethod_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTopupYearMethod_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTopupYearStatusFailedImplementors = []string{"ApiResponseTopupYearStatusFailed"}

func (ec *executionContext) _ApiResponseTopupYearStatusFailed(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTopupYearStatusFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTopupYearStatusFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTopupYearStatusFailed")
		case "status":
			out.Values[i] = ec._ApiResponseTopupYearStatusFailed_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTopupYearStatusFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTopupYearStatusFailed_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTopupYearStatusSuccessImplementors = []string{"ApiResponseTopupYearStatusSuccess"}

func (ec *executionContext) _ApiResponseTopupYearStatusSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTopupYearStatusSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTopupYearStatusSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTopupYearStatusSuccess")
		case "status":
			out.Values[i] = ec._ApiResponseTopupYearStatusSuccess_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTopupYearStatusSuccess_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTopupYearStatusSuccess_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransactionImplementors = []string{"ApiResponseTransaction"}

func (ec *executionContext) _ApiResponseTransaction(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransaction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransactionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransaction")
		case "status":
			out.Values[i] = ec._ApiResponseTransaction_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransaction_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransaction_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransactionAllImplementors = []string{"ApiResponseTransactionAll"}

func (ec *executionContext) _ApiResponseTransactionAll(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransactionAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransactionAllImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransactionAll")
		case "status":
			out.Values[i] = ec._ApiResponseTransactionAll_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransactionAll_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransactionDeleteImplementors = []string{"ApiResponseTransactionDelete"}

func (ec *executionContext) _ApiResponseTransactionDelete(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransactionDelete) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransactionDeleteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransactionDelete")
		case "status":
			out.Values[i] = ec._ApiResponseTransactionDelete_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransactionDelete_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransactionDeleteAtImplementors = []string{"ApiResponseTransactionDeleteAt"}

func (ec *executionContext) _ApiResponseTransactionDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransactionDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransactionDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransactionDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponseTransactionDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransactionDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransactionDeleteAt_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransactionMonthAmountImplementors = []string{"ApiResponseTransactionMonthAmount"}

func (ec *executionContext) _ApiResponseTransactionMonthAmount(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransactionMonthAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransactionMonthAmountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransactionMonthAmount")
		case "status":
			out.Values[i] = ec._ApiResponseTransactionMonthAmount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransactionMonthAmount_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransactionMonthAmount_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransactionMonthMethodImplementors = []string{"ApiResponseTransactionMonthMethod"}

func (ec *executionContext) _ApiResponseTransactionMonthMethod(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransactionMonthMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransactionMonthMethodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransactionMonthMethod")
		case "status":
			out.Values[i] = ec._ApiResponseTransactionMonthMethod_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransactionMonthMethod_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransactionMonthMethod_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransactionMonthStatusFailedImplementors = []string{"ApiResponseTransactionMonthStatusFailed"}

func (ec *executionContext) _ApiResponseTransactionMonthStatusFailed(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransactionMonthStatusFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransactionMonthStatusFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransactionMonthStatusFailed")
		case "status":
			out.Values[i] = ec._ApiResponseTransactionMonthStatusFailed_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransactionMonthStatusFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransactionMonthStatusFailed_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransactionMonthStatusSuccessImplementors = []string{"ApiResponseTransactionMonthStatusSuccess"}

func (ec *executionContext) _ApiResponseTransactionMonthStatusSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransactionMonthStatusSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransactionMonthStatusSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransactionMonthStatusSuccess")
		case "status":
			out.Values[i] = ec._ApiResponseTransactionMonthStatusSuccess_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransactionMonthStatusSuccess_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransactionMonthStatusSuccess_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransactionYearAmountImplementors = []string{"ApiResponseTransactionYearAmount"}

func (ec *executionContext) _ApiResponseTransactionYearAmount(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransactionYearAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransactionYearAmountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransactionYearAmount")
		case "status":
			out.Values[i] = ec._ApiResponseTransactionYearAmount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransactionYearAmount_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransactionYearAmount_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransactionYearMethodImplementors = []string{"ApiResponseTransactionYearMethod"}

func (ec *executionContext) _ApiResponseTransactionYearMethod(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransactionYearMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransactionYearMethodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransactionYearMethod")
		case "status":
			out.Values[i] = ec._ApiResponseTransactionYearMethod_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransactionYearMethod_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransactionYearMethod_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransactionYearStatusFailedImplementors = []string{"ApiResponseTransactionYearStatusFailed"}

func (ec *executionContext) _ApiResponseTransactionYearStatusFailed(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransactionYearStatusFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransactionYearStatusFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransactionYearStatusFailed")
		case "status":
			out.Values[i] = ec._ApiResponseTransactionYearStatusFailed_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransactionYearStatusFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransactionYearStatusFailed_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransactionYearStatusSuccessImplementors = []string{"ApiResponseTransactionYearStatusSuccess"}

func (ec *executionContext) _ApiResponseTransactionYearStatusSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransactionYearStatusSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransactionYearStatusSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransactionYearStatusSuccess")
		case "status":
			out.Values[i] = ec._ApiResponseTransactionYearStatusSuccess_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransactionYearStatusSuccess_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransactionYearStatusSuccess_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransactionsImplementors = []string{"ApiResponseTransactions"}

func (ec *executionContext) _ApiResponseTransactions(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransactions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransactionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransactions")
		case "status":
			out.Values[i] = ec._ApiResponseTransactions_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransactions_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransactions_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransferImplementors = []string{"ApiResponseTransfer"}

func (ec *executionContext) _ApiResponseTransfer(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransfer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransferImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransfer")
		case "status":
			out.Values[i] = ec._ApiResponseTransfer_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransfer_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransfer_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransferAllImplementors = []string{"ApiResponseTransferAll"}

func (ec *executionContext) _ApiResponseTransferAll(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransferAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransferAllImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransferAll")
		case "status":
			out.Values[i] = ec._ApiResponseTransferAll_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransferAll_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransferDeleteImplementors = []string{"ApiResponseTransferDelete"}

func (ec *executionContext) _ApiResponseTransferDelete(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransferDelete) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransferDeleteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransferDelete")
		case "status":
			out.Values[i] = ec._ApiResponseTransferDelete_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransferDelete_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransferDeleteAtImplementors = []string{"ApiResponseTransferDeleteAt"}

func (ec *executionContext) _ApiResponseTransferDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransferDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransferDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransferDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponseTransferDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransferDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransferDeleteAt_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransferMonthAmountImplementors = []string{"ApiResponseTransferMonthAmount"}

func (ec *executionContext) _ApiResponseTransferMonthAmount(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransferMonthAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransferMonthAmountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransferMonthAmount")
		case "status":
			out.Values[i] = ec._ApiResponseTransferMonthAmount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransferMonthAmount_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransferMonthAmount_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransferMonthStatusFailedImplementors = []string{"ApiResponseTransferMonthStatusFailed"}

func (ec *executionContext) _ApiResponseTransferMonthStatusFailed(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransferMonthStatusFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransferMonthStatusFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransferMonthStatusFailed")
		case "status":
			out.Values[i] = ec._ApiResponseTransferMonthStatusFailed_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransferMonthStatusFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransferMonthStatusFailed_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransferMonthStatusSuccessImplementors = []string{"ApiResponseTransferMonthStatusSuccess"}

func (ec *executionContext) _ApiResponseTransferMonthStatusSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransferMonthStatusSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransferMonthStatusSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransferMonthStatusSuccess")
		case "status":
			out.Values[i] = ec._ApiResponseTransferMonthStatusSuccess_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransferMonthStatusSuccess_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransferMonthStatusSuccess_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransferYearAmountImplementors = []string{"ApiResponseTransferYearAmount"}

func (ec *executionContext) _ApiResponseTransferYearAmount(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransferYearAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransferYearAmountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransferYearAmount")
		case "status":
			out.Values[i] = ec._ApiResponseTransferYearAmount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransferYearAmount_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransferYearAmount_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransferYearStatusFailedImplementors = []string{"ApiResponseTransferYearStatusFailed"}

func (ec *executionContext) _ApiResponseTransferYearStatusFailed(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransferYearStatusFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransferYearStatusFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransferYearStatusFailed")
		case "status":
			out.Values[i] = ec._ApiResponseTransferYearStatusFailed_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransferYearStatusFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransferYearStatusFailed_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransferYearStatusSuccessImplementors = []string{"ApiResponseTransferYearStatusSuccess"}

func (ec *executionContext) _ApiResponseTransferYearStatusSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransferYearStatusSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransferYearStatusSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransferYearStatusSuccess")
		case "status":
			out.Values[i] = ec._ApiResponseTransferYearStatusSuccess_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransferYearStatusSuccess_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransferYearStatusSuccess_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseTransfersImplementors = []string{"ApiResponseTransfers"}

func (ec *executionContext) _ApiResponseTransfers(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseTransfers) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseTransfersImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseTransfers")
		case "status":
			out.Values[i] = ec._ApiResponseTransfers_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseTransfers_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseTransfers_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseUserAllImplementors = []string{"ApiResponseUserAll"}

func (ec *executionContext) _ApiResponseUserAll(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseUserAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseUserAllImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseUserAll")
		case "status":
			out.Values[i] = ec._ApiResponseUserAll_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseUserAll_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseUserDeleteImplementors = []string{"ApiResponseUserDelete"}

func (ec *executionContext) _ApiResponseUserDelete(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseUserDelete) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseUserDeleteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseUserDelete")
		case "status":
			out.Values[i] = ec._ApiResponseUserDelete_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseUserDelete_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseUserResponseImplementors = []string{"ApiResponseUserResponse"}

func (ec *executionContext) _ApiResponseUserResponse(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseUserResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseUserResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseUserResponse")
		case "status":
			out.Values[i] = ec._ApiResponseUserResponse_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseUserResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseUserResponse_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseUserResponseDeleteAtImplementors = []string{"ApiResponseUserResponseDeleteAt"}

func (ec *executionContext) _ApiResponseUserResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseUserResponseDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseUserResponseDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseUserResponseDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponseUserResponseDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseUserResponseDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseUserResponseDeleteAt_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseWithdrawImplementors = []string{"ApiResponseWithdraw"}

func (ec *executionContext) _ApiResponseWithdraw(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseWithdraw) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseWithdrawImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseWithdraw")
		case "status":
			out.Values[i] = ec._ApiResponseWithdraw_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseWithdraw_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseWithdraw_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseWithdrawAllImplementors = []string{"ApiResponseWithdrawAll"}

func (ec *executionContext) _ApiResponseWithdrawAll(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseWithdrawAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseWithdrawAllImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseWithdrawAll")
		case "status":
			out.Values[i] = ec._ApiResponseWithdrawAll_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseWithdrawAll_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseWithdrawDeleteImplementors = []string{"ApiResponseWithdrawDelete"}

func (ec *executionContext) _ApiResponseWithdrawDelete(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseWithdrawDelete) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseWithdrawDeleteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseWithdrawDelete")
		case "status":
			out.Values[i] = ec._ApiResponseWithdrawDelete_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseWithdrawDelete_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseWithdrawDeleteAtImplementors = []string{"ApiResponseWithdrawDeleteAt"}

func (ec *executionContext) _ApiResponseWithdrawDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseWithdrawDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseWithdrawDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseWithdrawDeleteAt")
		case "status":
			out.Values[i] = ec._ApiResponseWithdrawDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseWithdrawDeleteAt_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseWithdrawDeleteAt_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseWithdrawMonthAmountImplementors = []string{"ApiResponseWithdrawMonthAmount"}

func (ec *executionContext) _ApiResponseWithdrawMonthAmount(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseWithdrawMonthAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseWithdrawMonthAmountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseWithdrawMonthAmount")
		case "status":
			out.Values[i] = ec._ApiResponseWithdrawMonthAmount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseWithdrawMonthAmount_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseWithdrawMonthAmount_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseWithdrawMonthStatusFailedImplementors = []string{"ApiResponseWithdrawMonthStatusFailed"}

func (ec *executionContext) _ApiResponseWithdrawMonthStatusFailed(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseWithdrawMonthStatusFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseWithdrawMonthStatusFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseWithdrawMonthStatusFailed")
		case "status":
			out.Values[i] = ec._ApiResponseWithdrawMonthStatusFailed_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseWithdrawMonthStatusFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseWithdrawMonthStatusFailed_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseWithdrawMonthStatusSuccessImplementors = []string{"ApiResponseWithdrawMonthStatusSuccess"}

func (ec *executionContext) _ApiResponseWithdrawMonthStatusSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseWithdrawMonthStatusSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseWithdrawMonthStatusSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseWithdrawMonthStatusSuccess")
		case "status":
			out.Values[i] = ec._ApiResponseWithdrawMonthStatusSuccess_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseWithdrawMonthStatusSuccess_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseWithdrawMonthStatusSuccess_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseWithdrawYearAmountImplementors = []string{"ApiResponseWithdrawYearAmount"}

func (ec *executionContext) _ApiResponseWithdrawYearAmount(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseWithdrawYearAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseWithdrawYearAmountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseWithdrawYearAmount")
		case "status":
			out.Values[i] = ec._ApiResponseWithdrawYearAmount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseWithdrawYearAmount_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseWithdrawYearAmount_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseWithdrawYearStatusFailedImplementors = []string{"ApiResponseWithdrawYearStatusFailed"}

func (ec *executionContext) _ApiResponseWithdrawYearStatusFailed(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseWithdrawYearStatusFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseWithdrawYearStatusFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseWithdrawYearStatusFailed")
		case "status":
			out.Values[i] = ec._ApiResponseWithdrawYearStatusFailed_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseWithdrawYearStatusFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseWithdrawYearStatusFailed_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseWithdrawYearStatusSuccessImplementors = []string{"ApiResponseWithdrawYearStatusSuccess"}

func (ec *executionContext) _ApiResponseWithdrawYearStatusSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseWithdrawYearStatusSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseWithdrawYearStatusSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseWithdrawYearStatusSuccess")
		case "status":
			out.Values[i] = ec._ApiResponseWithdrawYearStatusSuccess_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseWithdrawYearStatusSuccess_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseWithdrawYearStatusSuccess_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseYearSaldoBalancesImplementors = []string{"ApiResponseYearSaldoBalances"}

func (ec *executionContext) _ApiResponseYearSaldoBalances(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseYearSaldoBalances) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseYearSaldoBalancesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseYearSaldoBalances")
		case "status":
			out.Values[i] = ec._ApiResponseYearSaldoBalances_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseYearSaldoBalances_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseYearSaldoBalances_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseYearTotalSaldoImplementors = []string{"ApiResponseYearTotalSaldo"}

func (ec *executionContext) _ApiResponseYearTotalSaldo(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseYearTotalSaldo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseYearTotalSaldoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseYearTotalSaldo")
		case "status":
			out.Values[i] = ec._ApiResponseYearTotalSaldo_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseYearTotalSaldo_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseYearTotalSaldo_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseYearlyAmountImplementors = []string{"ApiResponseYearlyAmount"}

func (ec *executionContext) _ApiResponseYearlyAmount(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseYearlyAmount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseYearlyAmountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseYearlyAmount")
		case "status":
			out.Values[i] = ec._ApiResponseYearlyAmount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseYearlyAmount_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseYearlyAmount_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponseYearlyBalanceImplementors = []string{"ApiResponseYearlyBalance"}

func (ec *executionContext) _ApiResponseYearlyBalance(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponseYearlyBalance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponseYearlyBalanceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponseYearlyBalance")
		case "status":
			out.Values[i] = ec._ApiResponseYearlyBalance_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponseYearlyBalance_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponseYearlyBalance_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsesMerchantImplementors = []string{"ApiResponsesMerchant"}

func (ec *executionContext) _ApiResponsesMerchant(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsesMerchant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsesMerchantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsesMerchant")
		case "status":
			out.Values[i] = ec._ApiResponsesMerchant_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsesMerchant_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsesMerchant_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsesRoleImplementors = []string{"ApiResponsesRole"}

func (ec *executionContext) _ApiResponsesRole(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsesRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsesRoleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsesRole")
		case "status":
			out.Values[i] = ec._ApiResponsesRole_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsesRole_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsesRole_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsesSaldoImplementors = []string{"ApiResponsesSaldo"}

func (ec *executionContext) _ApiResponsesSaldo(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsesSaldo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsesSaldoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsesSaldo")
		case "status":
			out.Values[i] = ec._ApiResponsesSaldo_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsesSaldo_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsesSaldo_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsesTopupImplementors = []string{"ApiResponsesTopup"}

func (ec *executionContext) _ApiResponsesTopup(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsesTopup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsesTopupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsesTopup")
		case "status":
			out.Values[i] = ec._ApiResponsesTopup_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsesTopup_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsesTopup_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsesUserImplementors = []string{"ApiResponsesUser"}

func (ec *executionContext) _ApiResponsesUser(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsesUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsesUserImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsesUser")
		case "status":
			out.Values[i] = ec._ApiResponsesUser_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsesUser_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsesUser_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var apiResponsesWithdrawImplementors = []string{"ApiResponsesWithdraw"}

func (ec *executionContext) _ApiResponsesWithdraw(ctx context.Context, sel ast.SelectionSet, obj *model.APIResponsesWithdraw) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiResponsesWithdrawImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiResponsesWithdraw")
		case "status":
			out.Values[i] = ec._ApiResponsesWithdraw_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ApiResponsesWithdraw_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._ApiResponsesWithdraw_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cardDashboardByNumberResponseImplementors = []string{"CardDashboardByNumberResponse"}

func (ec *executionContext) _CardDashboardByNumberResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CardDashboardByNumberResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cardDashboardByNumberResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CardDashboardByNumberResponse")
		case "total_balance":
			out.Values[i] = ec._CardDashboardByNumberResponse_total_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_topup":
			out.Values[i] = ec._CardDashboardByNumberResponse_total_topup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_withdraw":
			out.Values[i] = ec._CardDashboardByNumberResponse_total_withdraw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_transaction":
			out.Values[i] = ec._CardDashboardByNumberResponse_total_transaction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_transfer_send":
			out.Values[i] = ec._CardDashboardByNumberResponse_total_transfer_send(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_transfer_receiver":
			out.Values[i] = ec._CardDashboardByNumberResponse_total_transfer_receiver(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cardDashboardResponseImplementors = []string{"CardDashboardResponse"}

func (ec *executionContext) _CardDashboardResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CardDashboardResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cardDashboardResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CardDashboardResponse")
		case "total_balance":
			out.Values[i] = ec._CardDashboardResponse_total_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_topup":
			out.Values[i] = ec._CardDashboardResponse_total_topup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_withdraw":
			out.Values[i] = ec._CardDashboardResponse_total_withdraw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_transaction":
			out.Values[i] = ec._CardDashboardResponse_total_transaction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_transfer":
			out.Values[i] = ec._CardDashboardResponse_total_transfer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cardMonthlyAmountResponseImplementors = []string{"CardMonthlyAmountResponse"}

func (ec *executionContext) _CardMonthlyAmountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CardMonthlyAmountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cardMonthlyAmountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CardMonthlyAmountResponse")
		case "month":
			out.Values[i] = ec._CardMonthlyAmountResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._CardMonthlyAmountResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cardMonthlyBalanceResponseImplementors = []string{"CardMonthlyBalanceResponse"}

func (ec *executionContext) _CardMonthlyBalanceResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CardMonthlyBalanceResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cardMonthlyBalanceResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CardMonthlyBalanceResponse")
		case "month":
			out.Values[i] = ec._CardMonthlyBalanceResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_balance":
			out.Values[i] = ec._CardMonthlyBalanceResponse_total_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cardResponseImplementors = []string{"CardResponse"}

func (ec *executionContext) _CardResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CardResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cardResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CardResponse")
		case "id":
			out.Values[i] = ec._CardResponse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user_id":
			out.Values[i] = ec._CardResponse_user_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "card_number":
			out.Values[i] = ec._CardResponse_card_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "card_type":
			out.Values[i] = ec._CardResponse_card_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "expire_date":
			out.Values[i] = ec._CardResponse_expire_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cvv":
			out.Values[i] = ec._CardResponse_cvv(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "card_provider":
			out.Values[i] = ec._CardResponse_card_provider(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "created_at":
			out.Values[i] = ec._CardResponse_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updated_at":
			out.Values[i] = ec._CardResponse_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cardResponseDeleteAtImplementors = []string{"CardResponseDeleteAt"}

func (ec *executionContext) _CardResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.CardResponseDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cardResponseDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CardResponseDeleteAt")
		case "id":
			out.Values[i] = ec._CardResponseDeleteAt_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user_id":
			out.Values[i] = ec._CardResponseDeleteAt_user_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "card_number":
			out.Values[i] = ec._CardResponseDeleteAt_card_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "card_type":
			out.Values[i] = ec._CardResponseDeleteAt_card_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "expire_date":
			out.Values[i] = ec._CardResponseDeleteAt_expire_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cvv":
			out.Values[i] = ec._CardResponseDeleteAt_cvv(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "card_provider":
			out.Values[i] = ec._CardResponseDeleteAt_card_provider(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "created_at":
			out.Values[i] = ec._CardResponseDeleteAt_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updated_at":
			out.Values[i] = ec._CardResponseDeleteAt_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._CardResponseDeleteAt_deleted_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cardYearlyAmountResponseImplementors = []string{"CardYearlyAmountResponse"}

func (ec *executionContext) _CardYearlyAmountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CardYearlyAmountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cardYearlyAmountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CardYearlyAmountResponse")
		case "year":
			out.Values[i] = ec._CardYearlyAmountResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._CardYearlyAmountResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cardYearlyBalanceResponseImplementors = []string{"CardYearlyBalanceResponse"}

func (ec *executionContext) _CardYearlyBalanceResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CardYearlyBalanceResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cardYearlyBalanceResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CardYearlyBalanceResponse")
		case "year":
			out.Values[i] = ec._CardYearlyBalanceResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_balance":
			out.Values[i] = ec._CardYearlyBalanceResponse_total_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantMonthlyAmountResponseImplementors = []string{"MerchantMonthlyAmountResponse"}

func (ec *executionContext) _MerchantMonthlyAmountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MerchantMonthlyAmountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantMonthlyAmountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantMonthlyAmountResponse")
		case "month":
			out.Values[i] = ec._MerchantMonthlyAmountResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._MerchantMonthlyAmountResponse_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantMonthlyPaymentMethodResponseImplementors = []string{"MerchantMonthlyPaymentMethodResponse"}

func (ec *executionContext) _MerchantMonthlyPaymentMethodResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MerchantMonthlyPaymentMethodResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantMonthlyPaymentMethodResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantMonthlyPaymentMethodResponse")
		case "month":
			out.Values[i] = ec._MerchantMonthlyPaymentMethodResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "paymentMethod":
			out.Values[i] = ec._MerchantMonthlyPaymentMethodResponse_paymentMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._MerchantMonthlyPaymentMethodResponse_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantMonthlyTotalAmountResponseImplementors = []string{"MerchantMonthlyTotalAmountResponse"}

func (ec *executionContext) _MerchantMonthlyTotalAmountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MerchantMonthlyTotalAmountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantMonthlyTotalAmountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantMonthlyTotalAmountResponse")
		case "month":
			out.Values[i] = ec._MerchantMonthlyTotalAmountResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "year":
			out.Values[i] = ec._MerchantMonthlyTotalAmountResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._MerchantMonthlyTotalAmountResponse_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantResponseImplementors = []string{"MerchantResponse"}

func (ec *executionContext) _MerchantResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MerchantResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantResponse")
		case "id":
			out.Values[i] = ec._MerchantResponse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._MerchantResponse_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "apiKey":
			out.Values[i] = ec._MerchantResponse_apiKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._MerchantResponse_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userId":
			out.Values[i] = ec._MerchantResponse_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MerchantResponse_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MerchantResponse_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantResponseDeleteAtImplementors = []string{"MerchantResponseDeleteAt"}

func (ec *executionContext) _MerchantResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.MerchantResponseDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantResponseDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantResponseDeleteAt")
		case "id":
			out.Values[i] = ec._MerchantResponseDeleteAt_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._MerchantResponseDeleteAt_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "apiKey":
			out.Values[i] = ec._MerchantResponseDeleteAt_apiKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._MerchantResponseDeleteAt_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userId":
			out.Values[i] = ec._MerchantResponseDeleteAt_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MerchantResponseDeleteAt_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MerchantResponseDeleteAt_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._MerchantResponseDeleteAt_deletedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantTransactionResponseImplementors = []string{"MerchantTransactionResponse"}

func (ec *executionContext) _MerchantTransactionResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MerchantTransactionResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantTransactionResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantTransactionResponse")
		case "id":
			out.Values[i] = ec._MerchantTransactionResponse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cardNumber":
			out.Values[i] = ec._MerchantTransactionResponse_cardNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amount":
			out.Values[i] = ec._MerchantTransactionResponse_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "paymentMethod":
			out.Values[i] = ec._MerchantTransactionResponse_paymentMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "merchantId":
			out.Values[i] = ec._MerchantTransactionResponse_merchantId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "merchantName":
			out.Values[i] = ec._MerchantTransactionResponse_merchantName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transactionTime":
			out.Values[i] = ec._MerchantTransactionResponse_transactionTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MerchantTransactionResponse_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MerchantTransactionResponse_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._MerchantTransactionResponse_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantYearlyAmountResponseImplementors = []string{"MerchantYearlyAmountResponse"}

func (ec *executionContext) _MerchantYearlyAmountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MerchantYearlyAmountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantYearlyAmountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantYearlyAmountResponse")
		case "year":
			out.Values[i] = ec._MerchantYearlyAmountResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._MerchantYearlyAmountResponse_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantYearlyPaymentMethodResponseImplementors = []string{"MerchantYearlyPaymentMethodResponse"}

func (ec *executionContext) _MerchantYearlyPaymentMethodResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MerchantYearlyPaymentMethodResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantYearlyPaymentMethodResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantYearlyPaymentMethodResponse")
		case "year":
			out.Values[i] = ec._MerchantYearlyPaymentMethodResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "paymentMethod":
			out.Values[i] = ec._MerchantYearlyPaymentMethodResponse_paymentMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._MerchantYearlyPaymentMethodResponse_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var merchantYearlyTotalAmountResponseImplementors = []string{"MerchantYearlyTotalAmountResponse"}

func (ec *executionContext) _MerchantYearlyTotalAmountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MerchantYearlyTotalAmountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantYearlyTotalAmountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantYearlyTotalAmountResponse")
		case "year":
			out.Values[i] = ec._MerchantYearlyTotalAmountResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._MerchantYearlyTotalAmountResponse_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "registerUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "loginUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_loginUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "refreshToken":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_refreshToken(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCard":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCard(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCard":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCard(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "trashedCard":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trashedCard(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "restoreCard":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreCard(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteCardPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCardPermanent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "restoreAllCard":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreAllCard(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteAllCardPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAllCardPermanent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMerchant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMerchant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMerchant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMerchant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "trashedMerchant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trashedMerchant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "restoreMerchant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreMerchant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMerchantPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMerchantPermanent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "restoreAllMerchant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreAllMerchant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteAllMerchantPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAllMerchantPermanent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createRole(ctx, field)
			})
		case "updateRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateRole(ctx, field)
			})
		case "trashedRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trashedRole(ctx, field)
			})
		case "restoreRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreRole(ctx, field)
			})
		case "deleteRolePermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteRolePermanent(ctx, field)
			})
		case "restoreAllRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreAllRole(ctx, field)
			})
		case "deleteAllRolePermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAllRolePermanent(ctx, field)
			})
		case "createSaldo":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSaldo(ctx, field)
			})
		case "updateSaldo":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSaldo(ctx, field)
			})
		case "trashedSaldo":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trashedSaldo(ctx, field)
			})
		case "restoreSaldo":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreSaldo(ctx, field)
			})
		case "deleteSaldoPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSaldoPermanent(ctx, field)
			})
		case "restoreAllSaldo":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreAllSaldo(ctx, field)
			})
		case "deleteAllSaldoPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAllSaldoPermanent(ctx, field)
			})
		case "createTopup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTopup(ctx, field)
			})
		case "updateTopup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTopup(ctx, field)
			})
		case "trashedTopup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trashedTopup(ctx, field)
			})
		case "restoreTopup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreTopup(ctx, field)
			})
		case "deleteTopupPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTopupPermanent(ctx, field)
			})
		case "restoreAllTopup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreAllTopup(ctx, field)
			})
		case "deleteAllTopupPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAllTopupPermanent(ctx, field)
			})
		case "createTransaction":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTransaction(ctx, field)
			})
		case "updateTransaction":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTransaction(ctx, field)
			})
		case "trashedTransaction":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trashedTransaction(ctx, field)
			})
		case "restoreTransaction":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreTransaction(ctx, field)
			})
		case "deleteTransactionPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTransactionPermanent(ctx, field)
			})
		case "restoreAllTransactions":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreAllTransactions(ctx, field)
			})
		case "deleteAllTransactionsPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAllTransactionsPermanent(ctx, field)
			})
		case "createTransfer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTransfer(ctx, field)
			})
		case "updateTransfer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTransfer(ctx, field)
			})
		case "trashedTransfer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trashedTransfer(ctx, field)
			})
		case "restoreTransfer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreTransfer(ctx, field)
			})
		case "deleteTransferPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTransferPermanent(ctx, field)
			})
		case "restoreAllTransfers":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreAllTransfers(ctx, field)
			})
		case "deleteAllTransfersPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAllTransfersPermanent(ctx, field)
			})
		case "createUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "trashedUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trashedUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "restoreUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteUserPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUserPermanent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "restoreAllUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreAllUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteAllUserPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAllUserPermanent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createWithdraw":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createWithdraw(ctx, field)
			})
		case "updateWithdraw":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateWithdraw(ctx, field)
			})
		case "trashedWithdraw":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trashedWithdraw(ctx, field)
			})
		case "restoreWithdraw":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreWithdraw(ctx, field)
			})
		case "deleteWithdrawPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteWithdrawPermanent(ctx, field)
			})
		case "restoreAllWithdraw":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_restoreAllWithdraw(ctx, field)
			})
		case "deleteAllWithdrawPermanent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAllWithdrawPermanent(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var paginationMetaImplementors = []string{"PaginationMeta"}

func (ec *executionContext) _PaginationMeta(ctx context.Context, sel ast.SelectionSet, obj *model.PaginationMeta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginationMetaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaginationMeta")
		case "current_page":
			out.Values[i] = ec._PaginationMeta_current_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "page_size":
			out.Values[i] = ec._PaginationMeta_page_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_pages":
			out.Values[i] = ec._PaginationMeta_total_pages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_records":
			out.Values[i] = ec._PaginationMeta_total_records(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getMe":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMe(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllCard":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllCard(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByIdCard":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByIdCard(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByUserIdCard":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByUserIdCard(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByActiveCard":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByActiveCard(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByTrashedCard":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByTrashedCard(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByCardNumberCard":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByCardNumberCard(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dashboardCard":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dashboardCard(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dashboardCardNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dashboardCardNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyBalance":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyBalance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyBalance":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyBalance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTopupAmount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTopupAmount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTopupAmount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTopupAmount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyWithdrawAmount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyWithdrawAmount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyWithdrawAmount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyWithdrawAmount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransactionAmount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransactionAmount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransactionAmount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransactionAmount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransferSenderAmount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransferSenderAmount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransferSenderAmount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransferSenderAmount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransferReceiverAmount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransferReceiverAmount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransferReceiverAmount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransferReceiverAmount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyBalanceByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyBalanceByCardNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyBalanceByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyBalanceByCardNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTopupAmountByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTopupAmountByCardNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTopupAmountByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTopupAmountByCardNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyWithdrawAmountByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyWithdrawAmountByCardNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyWithdrawAmountByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyWithdrawAmountByCardNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransactionAmountByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransactionAmountByCardNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransactionAmountByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransactionAmountByCardNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransferSenderAmountByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransferSenderAmountByCardNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransferSenderAmountByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransferSenderAmountByCardNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransferReceiverAmountByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransferReceiverAmountByCardNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransferReceiverAmountByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransferReceiverAmountByCardNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllMerchant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllMerchant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByIdMerchant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByIdMerchant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByApiKey":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByApiKey(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllTransactionMerchant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllTransactionMerchant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllTransactionByMerchant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllTransactionByMerchant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllTransactionByApikey":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllTransactionByApikey(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByMerchantUserId":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByMerchantUserId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByActive":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByActive(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByTrashed":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByTrashed(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyPaymentMethodsMerchant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyPaymentMethodsMerchant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyPaymentMethodMerchant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyPaymentMethodMerchant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyAmountMerchant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyAmountMerchant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyAmountMerchant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyAmountMerchant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTotalAmountMerchant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTotalAmountMerchant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTotalAmountMerchant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTotalAmountMerchant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyPaymentMethodByMerchants":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyPaymentMethodByMerchants(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyPaymentMethodByMerchants":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyPaymentMethodByMerchants(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyAmountByMerchants":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyAmountByMerchants(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyAmountByMerchants":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyAmountByMerchants(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTotalAmountByMerchants":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTotalAmountByMerchants(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTotalAmountByMerchants":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTotalAmountByMerchants(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyPaymentMethodByApikey":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyPaymentMethodByApikey(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyPaymentMethodByApikey":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyPaymentMethodByApikey(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyAmountByApikey":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyAmountByApikey(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyAmountByApikey":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyAmountByApikey(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTotalAmountByApikey":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTotalAmountByApikey(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTotalAmountByApikey":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTotalAmountByApikey(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllRole":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllRole(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByIdRole":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByIdRole(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByActiveRole":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByActiveRole(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByTrashedRole":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByTrashedRole(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByUserIdRole":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByUserIdRole(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllSaldo":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllSaldo(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByIdSaldo":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByIdSaldo(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTotalSaldoBalance":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTotalSaldoBalance(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearTotalSaldoBalance":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearTotalSaldoBalance(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlySaldoBalances":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlySaldoBalances(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlySaldoBalances":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlySaldoBalances(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByCardNumberSaldo":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByCardNumberSaldo(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByActiveSaldo":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByActiveSaldo(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByTrashedSaldo":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByTrashedSaldo(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllTopup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllTopup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllTopupByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllTopupByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByIdTopup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByIdTopup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTopupStatusSuccess":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTopupStatusSuccess(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTopupStatusSuccess":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTopupStatusSuccess(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTopupStatusFailed":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTopupStatusFailed(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTopupStatusFailed":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTopupStatusFailed(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTopupStatusSuccessByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTopupStatusSuccessByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTopupStatusSuccessByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTopupStatusSuccessByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTopupStatusFailedByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTopupStatusFailedByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTopupStatusFailedByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTopupStatusFailedByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTopupMethods":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTopupMethods(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTopupMethods":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTopupMethods(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTopupAmounts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTopupAmounts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTopupAmounts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTopupAmounts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTopupMethodsByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTopupMethodsByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTopupMethodsByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTopupMethodsByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTopupAmountsByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTopupAmountsByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTopupAmountsByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTopupAmountsByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByActiveTopup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByActiveTopup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByTrashedTopup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByTrashedTopup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllTransactions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllTransactions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllTransactionsByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllTransactionsByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findTransactionById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTransactionById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findTransactionByMerchantId":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTransactionByMerchantId(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findActiveTransactions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findActiveTransactions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findTrashedTransactions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTrashedTransactions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransactionStatusSuccess":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransactionStatusSuccess(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransactionStatusSuccess":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransactionStatusSuccess(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransactionStatusFailed":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransactionStatusFailed(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransactionStatusFailed":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransactionStatusFailed(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransactionStatusSuccessByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransactionStatusSuccessByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransactionStatusSuccessByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransactionStatusSuccessByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransactionStatusFailedByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransactionStatusFailedByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransactionStatusFailedByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransactionStatusFailedByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyPaymentMethods":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyPaymentMethods(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyPaymentMethods":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyPaymentMethods(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyAmounts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyAmounts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyAmounts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyAmounts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyPaymentMethodsByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyPaymentMethodsByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyPaymentMethodsByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyPaymentMethodsByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyAmountsByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyAmountsByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyAmountsByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyAmountsByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllTransfers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllTransfers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findTransferById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTransferById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findTransfersBySender":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTransfersBySender(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findTransfersByReceiver":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTransfersByReceiver(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findActiveTransfers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findActiveTransfers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findTrashedTransfers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTrashedTransfers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransferStatusSuccess":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransferStatusSuccess(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransferStatusSuccess":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransferStatusSuccess(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransferStatusFailed":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransferStatusFailed(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransferStatusFailed":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransferStatusFailed(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransferStatusSuccessByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransferStatusSuccessByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransferStatusSuccessByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransferStatusSuccessByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransferStatusFailedByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransferStatusFailedByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransferStatusFailedByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransferStatusFailedByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransferAmounts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransferAmounts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransferAmounts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransferAmounts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransferAmountsBySenderCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransferAmountsBySenderCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyTransferAmountsByReceiverCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyTransferAmountsByReceiverCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransferAmountsBySenderCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransferAmountsBySenderCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyTransferAmountsByReceiverCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyTransferAmountsByReceiverCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllUsers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllUsers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByIdUser":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByIdUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByActiveUsers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByActiveUsers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByTrashedUsers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByTrashedUsers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllWithdraw":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllWithdraw(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findAllWithdrawByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findAllWithdrawByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByIdWithdraw":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByIdWithdraw(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyWithdrawStatusSuccess":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyWithdrawStatusSuccess(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyWithdrawStatusSuccess":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyWithdrawStatusSuccess(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyWithdrawStatusFailed":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyWithdrawStatusFailed(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyWithdrawStatusFailed":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyWithdrawStatusFailed(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyWithdrawStatusSuccessCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyWithdrawStatusSuccessCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyWithdrawStatusSuccessCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyWithdrawStatusSuccessCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyWithdrawStatusFailedCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyWithdrawStatusFailedCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyWithdrawStatusFailedCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyWithdrawStatusFailedCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyWithdraws":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyWithdraws(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyWithdraws":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyWithdraws(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMonthlyWithdrawsByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMonthlyWithdrawsByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findYearlyWithdrawsByCardNumber":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findYearlyWithdrawsByCardNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByActiveWithdraw":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByActiveWithdraw(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findByTrashedWithdraw":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findByTrashedWithdraw(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var roleResponseImplementors = []string{"RoleResponse"}

func (ec *executionContext) _RoleResponse(ctx context.Context, sel ast.SelectionSet, obj *model.RoleResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RoleResponse")
		case "id":
			out.Values[i] = ec._RoleResponse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._RoleResponse_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "created_at":
			out.Values[i] = ec._RoleResponse_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updated_at":
			out.Values[i] = ec._RoleResponse_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var roleResponseDeleteAtImplementors = []string{"RoleResponseDeleteAt"}

func (ec *executionContext) _RoleResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.RoleResponseDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleResponseDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RoleResponseDeleteAt")
		case "id":
			out.Values[i] = ec._RoleResponseDeleteAt_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._RoleResponseDeleteAt_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "created_at":
			out.Values[i] = ec._RoleResponseDeleteAt_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updated_at":
			out.Values[i] = ec._RoleResponseDeleteAt_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._RoleResponseDeleteAt_deleted_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var saldoMonthBalanceResponseImplementors = []string{"SaldoMonthBalanceResponse"}

func (ec *executionContext) _SaldoMonthBalanceResponse(ctx context.Context, sel ast.SelectionSet, obj *model.SaldoMonthBalanceResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, saldoMonthBalanceResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SaldoMonthBalanceResponse")
		case "month":
			out.Values[i] = ec._SaldoMonthBalanceResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_balance":
			out.Values[i] = ec._SaldoMonthBalanceResponse_total_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var saldoMonthTotalBalanceResponseImplementors = []string{"SaldoMonthTotalBalanceResponse"}

func (ec *executionContext) _SaldoMonthTotalBalanceResponse(ctx context.Context, sel ast.SelectionSet, obj *model.SaldoMonthTotalBalanceResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, saldoMonthTotalBalanceResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SaldoMonthTotalBalanceResponse")
		case "month":
			out.Values[i] = ec._SaldoMonthTotalBalanceResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "year":
			out.Values[i] = ec._SaldoMonthTotalBalanceResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_balance":
			out.Values[i] = ec._SaldoMonthTotalBalanceResponse_total_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var saldoResponseImplementors = []string{"SaldoResponse"}

func (ec *executionContext) _SaldoResponse(ctx context.Context, sel ast.SelectionSet, obj *model.SaldoResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, saldoResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SaldoResponse")
		case "id":
			out.Values[i] = ec._SaldoResponse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "card_number":
			out.Values[i] = ec._SaldoResponse_card_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_balance":
			out.Values[i] = ec._SaldoResponse_total_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "withdraw_time":
			out.Values[i] = ec._SaldoResponse_withdraw_time(ctx, field, obj)
		case "withdraw_amount":
			out.Values[i] = ec._SaldoResponse_withdraw_amount(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SaldoResponse_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updated_at":
			out.Values[i] = ec._SaldoResponse_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var saldoResponseDeleteAtImplementors = []string{"SaldoResponseDeleteAt"}

func (ec *executionContext) _SaldoResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.SaldoResponseDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, saldoResponseDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SaldoResponseDeleteAt")
		case "id":
			out.Values[i] = ec._SaldoResponseDeleteAt_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "card_number":
			out.Values[i] = ec._SaldoResponseDeleteAt_card_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_balance":
			out.Values[i] = ec._SaldoResponseDeleteAt_total_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "withdraw_time":
			out.Values[i] = ec._SaldoResponseDeleteAt_withdraw_time(ctx, field, obj)
		case "withdraw_amount":
			out.Values[i] = ec._SaldoResponseDeleteAt_withdraw_amount(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SaldoResponseDeleteAt_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updated_at":
			out.Values[i] = ec._SaldoResponseDeleteAt_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._SaldoResponseDeleteAt_deleted_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var saldoYearBalanceResponseImplementors = []string{"SaldoYearBalanceResponse"}

func (ec *executionContext) _SaldoYearBalanceResponse(ctx context.Context, sel ast.SelectionSet, obj *model.SaldoYearBalanceResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, saldoYearBalanceResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SaldoYearBalanceResponse")
		case "year":
			out.Values[i] = ec._SaldoYearBalanceResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_balance":
			out.Values[i] = ec._SaldoYearBalanceResponse_total_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var saldoYearTotalBalanceResponseImplementors = []string{"SaldoYearTotalBalanceResponse"}

func (ec *executionContext) _SaldoYearTotalBalanceResponse(ctx context.Context, sel ast.SelectionSet, obj *model.SaldoYearTotalBalanceResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, saldoYearTotalBalanceResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SaldoYearTotalBalanceResponse")
		case "year":
			out.Values[i] = ec._SaldoYearTotalBalanceResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_balance":
			out.Values[i] = ec._SaldoYearTotalBalanceResponse_total_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tokenResponseImplementors = []string{"TokenResponse"}

func (ec *executionContext) _TokenResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TokenResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tokenResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TokenResponse")
		case "access_token":
			out.Values[i] = ec._TokenResponse_access_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "refresh_token":
			out.Values[i] = ec._TokenResponse_refresh_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topupMonthAmountResponseImplementors = []string{"TopupMonthAmountResponse"}

func (ec *executionContext) _TopupMonthAmountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TopupMonthAmountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topupMonthAmountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopupMonthAmountResponse")
		case "month":
			out.Values[i] = ec._TopupMonthAmountResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TopupMonthAmountResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topupMonthMethodResponseImplementors = []string{"TopupMonthMethodResponse"}

func (ec *executionContext) _TopupMonthMethodResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TopupMonthMethodResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topupMonthMethodResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopupMonthMethodResponse")
		case "month":
			out.Values[i] = ec._TopupMonthMethodResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "topup_method":
			out.Values[i] = ec._TopupMonthMethodResponse_topup_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_topups":
			out.Values[i] = ec._TopupMonthMethodResponse_total_topups(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TopupMonthMethodResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topupMonthStatusFailedResponseImplementors = []string{"TopupMonthStatusFailedResponse"}

func (ec *executionContext) _TopupMonthStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TopupMonthStatusFailedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topupMonthStatusFailedResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopupMonthStatusFailedResponse")
		case "year":
			out.Values[i] = ec._TopupMonthStatusFailedResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._TopupMonthStatusFailedResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_failed":
			out.Values[i] = ec._TopupMonthStatusFailedResponse_total_failed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TopupMonthStatusFailedResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topupMonthStatusSuccessResponseImplementors = []string{"TopupMonthStatusSuccessResponse"}

func (ec *executionContext) _TopupMonthStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TopupMonthStatusSuccessResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topupMonthStatusSuccessResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopupMonthStatusSuccessResponse")
		case "year":
			out.Values[i] = ec._TopupMonthStatusSuccessResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._TopupMonthStatusSuccessResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_success":
			out.Values[i] = ec._TopupMonthStatusSuccessResponse_total_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TopupMonthStatusSuccessResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topupResponseImplementors = []string{"TopupResponse"}

func (ec *executionContext) _TopupResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TopupResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topupResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopupResponse")
		case "id":
			out.Values[i] = ec._TopupResponse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "card_number":
			out.Values[i] = ec._TopupResponse_card_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "topup_no":
			out.Values[i] = ec._TopupResponse_topup_no(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "topup_amount":
			out.Values[i] = ec._TopupResponse_topup_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "topup_method":
			out.Values[i] = ec._TopupResponse_topup_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "topup_time":
			out.Values[i] = ec._TopupResponse_topup_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._TopupResponse_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updated_at":
			out.Values[i] = ec._TopupResponse_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topupResponseDeleteAtImplementors = []string{"TopupResponseDeleteAt"}

func (ec *executionContext) _TopupResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.TopupResponseDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topupResponseDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopupResponseDeleteAt")
		case "id":
			out.Values[i] = ec._TopupResponseDeleteAt_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "card_number":
			out.Values[i] = ec._TopupResponseDeleteAt_card_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "topup_no":
			out.Values[i] = ec._TopupResponseDeleteAt_topup_no(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "topup_amount":
			out.Values[i] = ec._TopupResponseDeleteAt_topup_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "topup_method":
			out.Values[i] = ec._TopupResponseDeleteAt_topup_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "topup_time":
			out.Values[i] = ec._TopupResponseDeleteAt_topup_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._TopupResponseDeleteAt_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updated_at":
			out.Values[i] = ec._TopupResponseDeleteAt_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._TopupResponseDeleteAt_deleted_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topupYearAmountResponseImplementors = []string{"TopupYearAmountResponse"}

func (ec *executionContext) _TopupYearAmountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TopupYearAmountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topupYearAmountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopupYearAmountResponse")
		case "year":
			out.Values[i] = ec._TopupYearAmountResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TopupYearAmountResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topupYearMethodResponseImplementors = []string{"TopupYearMethodResponse"}

func (ec *executionContext) _TopupYearMethodResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TopupYearMethodResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topupYearMethodResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopupYearMethodResponse")
		case "year":
			out.Values[i] = ec._TopupYearMethodResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "topup_method":
			out.Values[i] = ec._TopupYearMethodResponse_topup_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_topups":
			out.Values[i] = ec._TopupYearMethodResponse_total_topups(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TopupYearMethodResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topupYearStatusFailedResponseImplementors = []string{"TopupYearStatusFailedResponse"}

func (ec *executionContext) _TopupYearStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TopupYearStatusFailedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topupYearStatusFailedResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopupYearStatusFailedResponse")
		case "year":
			out.Values[i] = ec._TopupYearStatusFailedResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_failed":
			out.Values[i] = ec._TopupYearStatusFailedResponse_total_failed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TopupYearStatusFailedResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topupYearStatusSuccessResponseImplementors = []string{"TopupYearStatusSuccessResponse"}

func (ec *executionContext) _TopupYearStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TopupYearStatusSuccessResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topupYearStatusSuccessResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopupYearStatusSuccessResponse")
		case "year":
			out.Values[i] = ec._TopupYearStatusSuccessResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_success":
			out.Values[i] = ec._TopupYearStatusSuccessResponse_total_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TopupYearStatusSuccessResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionMonthAmountResponseImplementors = []string{"TransactionMonthAmountResponse"}

func (ec *executionContext) _TransactionMonthAmountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransactionMonthAmountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionMonthAmountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionMonthAmountResponse")
		case "month":
			out.Values[i] = ec._TransactionMonthAmountResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TransactionMonthAmountResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionMonthMethodResponseImplementors = []string{"TransactionMonthMethodResponse"}

func (ec *executionContext) _TransactionMonthMethodResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransactionMonthMethodResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionMonthMethodResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionMonthMethodResponse")
		case "month":
			out.Values[i] = ec._TransactionMonthMethodResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "payment_method":
			out.Values[i] = ec._TransactionMonthMethodResponse_payment_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_transactions":
			out.Values[i] = ec._TransactionMonthMethodResponse_total_transactions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TransactionMonthMethodResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionMonthStatusFailedResponseImplementors = []string{"TransactionMonthStatusFailedResponse"}

func (ec *executionContext) _TransactionMonthStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransactionMonthStatusFailedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionMonthStatusFailedResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionMonthStatusFailedResponse")
		case "year":
			out.Values[i] = ec._TransactionMonthStatusFailedResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._TransactionMonthStatusFailedResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_failed":
			out.Values[i] = ec._TransactionMonthStatusFailedResponse_total_failed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TransactionMonthStatusFailedResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionMonthStatusSuccessResponseImplementors = []string{"TransactionMonthStatusSuccessResponse"}

func (ec *executionContext) _TransactionMonthStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransactionMonthStatusSuccessResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionMonthStatusSuccessResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionMonthStatusSuccessResponse")
		case "year":
			out.Values[i] = ec._TransactionMonthStatusSuccessResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._TransactionMonthStatusSuccessResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_success":
			out.Values[i] = ec._TransactionMonthStatusSuccessResponse_total_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TransactionMonthStatusSuccessResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionResponseImplementors = []string{"TransactionResponse"}

func (ec *executionContext) _TransactionResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransactionResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionResponse")
		case "id":
			out.Values[i] = ec._TransactionResponse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "card_number":
			out.Values[i] = ec._TransactionResponse_card_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transaction_no":
			out.Values[i] = ec._TransactionResponse_transaction_no(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amount":
			out.Values[i] = ec._TransactionResponse_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "payment_method":
			out.Values[i] = ec._TransactionResponse_payment_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "merchant_id":
			out.Values[i] = ec._TransactionResponse_merchant_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transaction_time":
			out.Values[i] = ec._TransactionResponse_transaction_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "created_at":
			out.Values[i] = ec._TransactionResponse_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updated_at":
			out.Values[i] = ec._TransactionResponse_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionResponseDeleteAtImplementors = []string{"TransactionResponseDeleteAt"}

func (ec *executionContext) _TransactionResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.TransactionResponseDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionResponseDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionResponseDeleteAt")
		case "id":
			out.Values[i] = ec._TransactionResponseDeleteAt_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "card_number":
			out.Values[i] = ec._TransactionResponseDeleteAt_card_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transaction_no":
			out.Values[i] = ec._TransactionResponseDeleteAt_transaction_no(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amount":
			out.Values[i] = ec._TransactionResponseDeleteAt_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "payment_method":
			out.Values[i] = ec._TransactionResponseDeleteAt_payment_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "merchant_id":
			out.Values[i] = ec._TransactionResponseDeleteAt_merchant_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transaction_time":
			out.Values[i] = ec._TransactionResponseDeleteAt_transaction_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "created_at":
			out.Values[i] = ec._TransactionResponseDeleteAt_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updated_at":
			out.Values[i] = ec._TransactionResponseDeleteAt_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._TransactionResponseDeleteAt_deleted_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionYearMethodResponseImplementors = []string{"TransactionYearMethodResponse"}

func (ec *executionContext) _TransactionYearMethodResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransactionYearMethodResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionYearMethodResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionYearMethodResponse")
		case "year":
			out.Values[i] = ec._TransactionYearMethodResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "payment_method":
			out.Values[i] = ec._TransactionYearMethodResponse_payment_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_transactions":
			out.Values[i] = ec._TransactionYearMethodResponse_total_transactions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TransactionYearMethodResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionYearStatusFailedResponseImplementors = []string{"TransactionYearStatusFailedResponse"}

func (ec *executionContext) _TransactionYearStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransactionYearStatusFailedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionYearStatusFailedResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionYearStatusFailedResponse")
		case "year":
			out.Values[i] = ec._TransactionYearStatusFailedResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_failed":
			out.Values[i] = ec._TransactionYearStatusFailedResponse_total_failed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TransactionYearStatusFailedResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionYearStatusSuccessResponseImplementors = []string{"TransactionYearStatusSuccessResponse"}

func (ec *executionContext) _TransactionYearStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransactionYearStatusSuccessResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionYearStatusSuccessResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionYearStatusSuccessResponse")
		case "year":
			out.Values[i] = ec._TransactionYearStatusSuccessResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_success":
			out.Values[i] = ec._TransactionYearStatusSuccessResponse_total_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TransactionYearStatusSuccessResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionYearlyAmountResponseImplementors = []string{"TransactionYearlyAmountResponse"}

func (ec *executionContext) _TransactionYearlyAmountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransactionYearlyAmountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionYearlyAmountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionYearlyAmountResponse")
		case "year":
			out.Values[i] = ec._TransactionYearlyAmountResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TransactionYearlyAmountResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transferMonthAmountResponseImplementors = []string{"TransferMonthAmountResponse"}

func (ec *executionContext) _TransferMonthAmountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransferMonthAmountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transferMonthAmountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransferMonthAmountResponse")
		case "month":
			out.Values[i] = ec._TransferMonthAmountResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TransferMonthAmountResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transferMonthStatusFailedResponseImplementors = []string{"TransferMonthStatusFailedResponse"}

func (ec *executionContext) _TransferMonthStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransferMonthStatusFailedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transferMonthStatusFailedResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransferMonthStatusFailedResponse")
		case "year":
			out.Values[i] = ec._TransferMonthStatusFailedResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._TransferMonthStatusFailedResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_failed":
			out.Values[i] = ec._TransferMonthStatusFailedResponse_total_failed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TransferMonthStatusFailedResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transferMonthStatusSuccessResponseImplementors = []string{"TransferMonthStatusSuccessResponse"}

func (ec *executionContext) _TransferMonthStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransferMonthStatusSuccessResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transferMonthStatusSuccessResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransferMonthStatusSuccessResponse")
		case "year":
			out.Values[i] = ec._TransferMonthStatusSuccessResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._TransferMonthStatusSuccessResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_success":
			out.Values[i] = ec._TransferMonthStatusSuccessResponse_total_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TransferMonthStatusSuccessResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transferResponseImplementors = []string{"TransferResponse"}

func (ec *executionContext) _TransferResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransferResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transferResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransferResponse")
		case "id":
			out.Values[i] = ec._TransferResponse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transfer_no":
			out.Values[i] = ec._TransferResponse_transfer_no(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transfer_from":
			out.Values[i] = ec._TransferResponse_transfer_from(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transfer_to":
			out.Values[i] = ec._TransferResponse_transfer_to(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transfer_amount":
			out.Values[i] = ec._TransferResponse_transfer_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transfer_time":
			out.Values[i] = ec._TransferResponse_transfer_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "created_at":
			out.Values[i] = ec._TransferResponse_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updated_at":
			out.Values[i] = ec._TransferResponse_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transferResponseDeleteAtImplementors = []string{"TransferResponseDeleteAt"}

func (ec *executionContext) _TransferResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.TransferResponseDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transferResponseDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransferResponseDeleteAt")
		case "id":
			out.Values[i] = ec._TransferResponseDeleteAt_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transfer_no":
			out.Values[i] = ec._TransferResponseDeleteAt_transfer_no(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transfer_from":
			out.Values[i] = ec._TransferResponseDeleteAt_transfer_from(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transfer_to":
			out.Values[i] = ec._TransferResponseDeleteAt_transfer_to(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transfer_amount":
			out.Values[i] = ec._TransferResponseDeleteAt_transfer_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "transfer_time":
			out.Values[i] = ec._TransferResponseDeleteAt_transfer_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "created_at":
			out.Values[i] = ec._TransferResponseDeleteAt_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updated_at":
			out.Values[i] = ec._TransferResponseDeleteAt_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._TransferResponseDeleteAt_deleted_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transferYearAmountResponseImplementors = []string{"TransferYearAmountResponse"}

func (ec *executionContext) _TransferYearAmountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransferYearAmountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transferYearAmountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransferYearAmountResponse")
		case "year":
			out.Values[i] = ec._TransferYearAmountResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TransferYearAmountResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transferYearStatusFailedResponseImplementors = []string{"TransferYearStatusFailedResponse"}

func (ec *executionContext) _TransferYearStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransferYearStatusFailedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transferYearStatusFailedResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransferYearStatusFailedResponse")
		case "year":
			out.Values[i] = ec._TransferYearStatusFailedResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_failed":
			out.Values[i] = ec._TransferYearStatusFailedResponse_total_failed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TransferYearStatusFailedResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transferYearStatusSuccessResponseImplementors = []string{"TransferYearStatusSuccessResponse"}

func (ec *executionContext) _TransferYearStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TransferYearStatusSuccessResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transferYearStatusSuccessResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransferYearStatusSuccessResponse")
		case "year":
			out.Values[i] = ec._TransferYearStatusSuccessResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_success":
			out.Values[i] = ec._TransferYearStatusSuccessResponse_total_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total_amount":
			out.Values[i] = ec._TransferYearStatusSuccessResponse_total_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userResponseImplementors = []string{"UserResponse"}

func (ec *executionContext) _UserResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UserResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserResponse")
		case "id":
			out.Values[i] = ec._UserResponse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "firstname":
			out.Values[i] = ec._UserResponse_firstname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastname":
			out.Values[i] = ec._UserResponse_lastname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._UserResponse_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "created_at":
			out.Values[i] = ec._UserResponse_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updated_at":
			out.Values[i] = ec._UserResponse_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userResponseDeleteAtImplementors = []string{"UserResponseDeleteAt"}

func (ec *executionContext) _UserResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.UserResponseDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userResponseDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserResponseDeleteAt")
		case "id":
			out.Values[i] = ec._UserResponseDeleteAt_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "firstname":
			out.Values[i] = ec._UserResponseDeleteAt_firstname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastname":
			out.Values[i] = ec._UserResponseDeleteAt_lastname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._UserResponseDeleteAt_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "created_at":
			out.Values[i] = ec._UserResponseDeleteAt_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updated_at":
			out.Values[i] = ec._UserResponseDeleteAt_updated_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._UserResponseDeleteAt_deleted_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var withdrawMonthStatusFailedResponseImplementors = []string{"WithdrawMonthStatusFailedResponse"}

func (ec *executionContext) _WithdrawMonthStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.WithdrawMonthStatusFailedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, withdrawMonthStatusFailedResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WithdrawMonthStatusFailedResponse")
		case "year":
			out.Values[i] = ec._WithdrawMonthStatusFailedResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._WithdrawMonthStatusFailedResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalFailed":
			out.Values[i] = ec._WithdrawMonthStatusFailedResponse_totalFailed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._WithdrawMonthStatusFailedResponse_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var withdrawMonthStatusSuccessResponseImplementors = []string{"WithdrawMonthStatusSuccessResponse"}

func (ec *executionContext) _WithdrawMonthStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, obj *model.WithdrawMonthStatusSuccessResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, withdrawMonthStatusSuccessResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WithdrawMonthStatusSuccessResponse")
		case "year":
			out.Values[i] = ec._WithdrawMonthStatusSuccessResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._WithdrawMonthStatusSuccessResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalSuccess":
			out.Values[i] = ec._WithdrawMonthStatusSuccessResponse_totalSuccess(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._WithdrawMonthStatusSuccessResponse_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var withdrawMonthlyAmountResponseImplementors = []string{"WithdrawMonthlyAmountResponse"}

func (ec *executionContext) _WithdrawMonthlyAmountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.WithdrawMonthlyAmountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, withdrawMonthlyAmountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WithdrawMonthlyAmountResponse")
		case "month":
			out.Values[i] = ec._WithdrawMonthlyAmountResponse_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._WithdrawMonthlyAmountResponse_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var withdrawResponseImplementors = []string{"WithdrawResponse"}

func (ec *executionContext) _WithdrawResponse(ctx context.Context, sel ast.SelectionSet, obj *model.WithdrawResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, withdrawResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WithdrawResponse")
		case "id":
			out.Values[i] = ec._WithdrawResponse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "withdrawNo":
			out.Values[i] = ec._WithdrawResponse_withdrawNo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cardNumber":
			out.Values[i] = ec._WithdrawResponse_cardNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "withdrawAmount":
			out.Values[i] = ec._WithdrawResponse_withdrawAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "withdrawTime":
			out.Values[i] = ec._WithdrawResponse_withdrawTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._WithdrawResponse_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._WithdrawResponse_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var withdrawResponseDeleteAtImplementors = []string{"WithdrawResponseDeleteAt"}

func (ec *executionContext) _WithdrawResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, obj *model.WithdrawResponseDeleteAt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, withdrawResponseDeleteAtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WithdrawResponseDeleteAt")
		case "id":
			out.Values[i] = ec._WithdrawResponseDeleteAt_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "withdrawNo":
			out.Values[i] = ec._WithdrawResponseDeleteAt_withdrawNo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cardNumber":
			out.Values[i] = ec._WithdrawResponseDeleteAt_cardNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "withdrawAmount":
			out.Values[i] = ec._WithdrawResponseDeleteAt_withdrawAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "withdrawTime":
			out.Values[i] = ec._WithdrawResponseDeleteAt_withdrawTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._WithdrawResponseDeleteAt_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._WithdrawResponseDeleteAt_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._WithdrawResponseDeleteAt_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var withdrawYearStatusFailedResponseImplementors = []string{"WithdrawYearStatusFailedResponse"}

func (ec *executionContext) _WithdrawYearStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.WithdrawYearStatusFailedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, withdrawYearStatusFailedResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WithdrawYearStatusFailedResponse")
		case "year":
			out.Values[i] = ec._WithdrawYearStatusFailedResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalFailed":
			out.Values[i] = ec._WithdrawYearStatusFailedResponse_totalFailed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._WithdrawYearStatusFailedResponse_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var withdrawYearStatusSuccessResponseImplementors = []string{"WithdrawYearStatusSuccessResponse"}

func (ec *executionContext) _WithdrawYearStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, obj *model.WithdrawYearStatusSuccessResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, withdrawYearStatusSuccessResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WithdrawYearStatusSuccessResponse")
		case "year":
			out.Values[i] = ec._WithdrawYearStatusSuccessResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalSuccess":
			out.Values[i] = ec._WithdrawYearStatusSuccessResponse_totalSuccess(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._WithdrawYearStatusSuccessResponse_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var withdrawYearlyAmountResponseImplementors = []string{"WithdrawYearlyAmountResponse"}

func (ec *executionContext) _WithdrawYearlyAmountResponse(ctx context.Context, sel ast.SelectionSet, obj *model.WithdrawYearlyAmountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, withdrawYearlyAmountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WithdrawYearlyAmountResponse")
		case "year":
			out.Values[i] = ec._WithdrawYearlyAmountResponse_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._WithdrawYearlyAmountResponse_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNApiResponseCard2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCard(ctx context.Context, sel ast.SelectionSet, v model.APIResponseCard) graphql.Marshaler {
	return ec._ApiResponseCard(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseCard2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCard(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseCard) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseCard(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseCardAll2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCardAll(ctx context.Context, sel ast.SelectionSet, v model.APIResponseCardAll) graphql.Marshaler {
	return ec._ApiResponseCardAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseCardAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCardAll(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseCardAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseCardAll(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseCardDelete2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCardDelete(ctx context.Context, sel ast.SelectionSet, v model.APIResponseCardDelete) graphql.Marshaler {
	return ec._ApiResponseCardDelete(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseCardDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCardDelete(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseCardDelete) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseCardDelete(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseCardDeleteAt2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCardDeleteAt(ctx context.Context, sel ast.SelectionSet, v model.APIResponseCardDeleteAt) graphql.Marshaler {
	return ec._ApiResponseCardDeleteAt(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseCardDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseCardDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseCardDeleteAt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseCardDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseDashboardCard2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseDashboardCard(ctx context.Context, sel ast.SelectionSet, v model.APIResponseDashboardCard) graphql.Marshaler {
	return ec._ApiResponseDashboardCard(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseDashboardCard2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseDashboardCard(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseDashboardCard) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseDashboardCard(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseDashboardCardNumber2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseDashboardCardNumber(ctx context.Context, sel ast.SelectionSet, v model.APIResponseDashboardCardNumber) graphql.Marshaler {
	return ec._ApiResponseDashboardCardNumber(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseDashboardCardNumber2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseDashboardCardNumber(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseDashboardCardNumber) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseDashboardCardNumber(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseGetMe2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseGetMe(ctx context.Context, sel ast.SelectionSet, v model.APIResponseGetMe) graphql.Marshaler {
	return ec._ApiResponseGetMe(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseGetMe2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseGetMe(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseGetMe) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseGetMe(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseLogin2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseLogin(ctx context.Context, sel ast.SelectionSet, v model.APIResponseLogin) graphql.Marshaler {
	return ec._ApiResponseLogin(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseLogin2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseLogin(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseLogin) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseLogin(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMerchant2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchant(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMerchant) graphql.Marshaler {
	return ec._ApiResponseMerchant(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMerchant2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchant(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMerchant) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMerchant(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMerchantAll2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantAll(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMerchantAll) graphql.Marshaler {
	return ec._ApiResponseMerchantAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMerchantAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantAll(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMerchantAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMerchantAll(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMerchantDelete2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantDelete(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMerchantDelete) graphql.Marshaler {
	return ec._ApiResponseMerchantDelete(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMerchantDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantDelete(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMerchantDelete) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMerchantDelete(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMerchantDeleteAt2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantDeleteAt(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMerchantDeleteAt) graphql.Marshaler {
	return ec._ApiResponseMerchantDeleteAt(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMerchantDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMerchantDeleteAt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMerchantDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMerchantDeleteAtPagination2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantDeleteAtPagination(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMerchantDeleteAtPagination) graphql.Marshaler {
	return ec._ApiResponseMerchantDeleteAtPagination(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMerchantDeleteAtPagination2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantDeleteAtPagination(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMerchantDeleteAtPagination) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMerchantDeleteAtPagination(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMerchantMonthlyAmount2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyAmount(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMerchantMonthlyAmount) graphql.Marshaler {
	return ec._ApiResponseMerchantMonthlyAmount(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMerchantMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyAmount(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMerchantMonthlyAmount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMerchantMonthlyAmount(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMerchantMonthlyPaymentMethod2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyPaymentMethod(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMerchantMonthlyPaymentMethod) graphql.Marshaler {
	return ec._ApiResponseMerchantMonthlyPaymentMethod(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMerchantMonthlyPaymentMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyPaymentMethod(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMerchantMonthlyPaymentMethod) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMerchantMonthlyPaymentMethod(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMerchantMonthlyTotalAmount2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyTotalAmount(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMerchantMonthlyTotalAmount) graphql.Marshaler {
	return ec._ApiResponseMerchantMonthlyTotalAmount(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMerchantMonthlyTotalAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantMonthlyTotalAmount(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMerchantMonthlyTotalAmount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMerchantMonthlyTotalAmount(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMerchantPagination2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantPagination(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMerchantPagination) graphql.Marshaler {
	return ec._ApiResponseMerchantPagination(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMerchantPagination2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantPagination(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMerchantPagination) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMerchantPagination(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMerchantTransactionPagination2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantTransactionPagination(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMerchantTransactionPagination) graphql.Marshaler {
	return ec._ApiResponseMerchantTransactionPagination(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMerchantTransactionPagination2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantTransactionPagination(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMerchantTransactionPagination) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMerchantTransactionPagination(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMerchantYearlyAmount2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyAmount(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMerchantYearlyAmount) graphql.Marshaler {
	return ec._ApiResponseMerchantYearlyAmount(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMerchantYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyAmount(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMerchantYearlyAmount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMerchantYearlyAmount(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMerchantYearlyPaymentMethod2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyPaymentMethod(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMerchantYearlyPaymentMethod) graphql.Marshaler {
	return ec._ApiResponseMerchantYearlyPaymentMethod(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMerchantYearlyPaymentMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyPaymentMethod(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMerchantYearlyPaymentMethod) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMerchantYearlyPaymentMethod(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMerchantYearlyTotalAmount2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyTotalAmount(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMerchantYearlyTotalAmount) graphql.Marshaler {
	return ec._ApiResponseMerchantYearlyTotalAmount(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMerchantYearlyTotalAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMerchantYearlyTotalAmount(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMerchantYearlyTotalAmount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMerchantYearlyTotalAmount(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMonthlyAmount2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyAmount(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMonthlyAmount) graphql.Marshaler {
	return ec._ApiResponseMonthlyAmount(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMonthlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyAmount(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMonthlyAmount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMonthlyAmount(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseMonthlyBalance2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyBalance(ctx context.Context, sel ast.SelectionSet, v model.APIResponseMonthlyBalance) graphql.Marshaler {
	return ec._ApiResponseMonthlyBalance(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseMonthlyBalance2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthlyBalance(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMonthlyBalance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseMonthlyBalance(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponsePaginationCard2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationCard(ctx context.Context, sel ast.SelectionSet, v model.APIResponsePaginationCard) graphql.Marshaler {
	return ec._ApiResponsePaginationCard(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponsePaginationCard2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationCard(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationCard) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponsePaginationCard(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponsePaginationCardDeleteAt2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationCardDeleteAt(ctx context.Context, sel ast.SelectionSet, v model.APIResponsePaginationCardDeleteAt) graphql.Marshaler {
	return ec._ApiResponsePaginationCardDeleteAt(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponsePaginationCardDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationCardDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationCardDeleteAt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponsePaginationCardDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponsePaginationUser2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationUser(ctx context.Context, sel ast.SelectionSet, v model.APIResponsePaginationUser) graphql.Marshaler {
	return ec._ApiResponsePaginationUser(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponsePaginationUser2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationUser(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationUser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponsePaginationUser(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponsePaginationUserDeleteAt2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationUserDeleteAt(ctx context.Context, sel ast.SelectionSet, v model.APIResponsePaginationUserDeleteAt) graphql.Marshaler {
	return ec._ApiResponsePaginationUserDeleteAt(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponsePaginationUserDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationUserDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationUserDeleteAt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponsePaginationUserDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseRefreshToken2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRefreshToken(ctx context.Context, sel ast.SelectionSet, v model.APIResponseRefreshToken) graphql.Marshaler {
	return ec._ApiResponseRefreshToken(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseRefreshToken2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRefreshToken(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseRefreshToken) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseRefreshToken(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseRegister2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRegister(ctx context.Context, sel ast.SelectionSet, v model.APIResponseRegister) graphql.Marshaler {
	return ec._ApiResponseRegister(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseRegister2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRegister(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseRegister) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseRegister(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseUserAll2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserAll(ctx context.Context, sel ast.SelectionSet, v model.APIResponseUserAll) graphql.Marshaler {
	return ec._ApiResponseUserAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseUserAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserAll(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseUserAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseUserAll(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseUserDelete2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserDelete(ctx context.Context, sel ast.SelectionSet, v model.APIResponseUserDelete) graphql.Marshaler {
	return ec._ApiResponseUserDelete(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseUserDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserDelete(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseUserDelete) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseUserDelete(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseUserResponse2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserResponse(ctx context.Context, sel ast.SelectionSet, v model.APIResponseUserResponse) graphql.Marshaler {
	return ec._ApiResponseUserResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseUserResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserResponse(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseUserResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseUserResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseUserResponseDeleteAt2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v model.APIResponseUserResponseDeleteAt) graphql.Marshaler {
	return ec._ApiResponseUserResponseDeleteAt(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseUserResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseUserResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseUserResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseUserResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseYearlyAmount2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyAmount(ctx context.Context, sel ast.SelectionSet, v model.APIResponseYearlyAmount) graphql.Marshaler {
	return ec._ApiResponseYearlyAmount(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseYearlyAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyAmount(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseYearlyAmount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseYearlyAmount(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponseYearlyBalance2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyBalance(ctx context.Context, sel ast.SelectionSet, v model.APIResponseYearlyBalance) graphql.Marshaler {
	return ec._ApiResponseYearlyBalance(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponseYearlyBalance2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearlyBalance(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseYearlyBalance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponseYearlyBalance(ctx, sel, v)
}

func (ec *executionContext) marshalNApiResponsesMerchant2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsesMerchant(ctx context.Context, sel ast.SelectionSet, v model.APIResponsesMerchant) graphql.Marshaler {
	return ec._ApiResponsesMerchant(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiResponsesMerchant2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsesMerchant(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsesMerchant) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiResponsesMerchant(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCardMonthlyAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardMonthlyAmountResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CardMonthlyAmountResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCardMonthlyAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardMonthlyAmountResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCardMonthlyAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardMonthlyAmountResponse(ctx context.Context, sel ast.SelectionSet, v *model.CardMonthlyAmountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CardMonthlyAmountResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCardMonthlyBalanceResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardMonthlyBalanceResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CardMonthlyBalanceResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCardMonthlyBalanceResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardMonthlyBalanceResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCardMonthlyBalanceResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardMonthlyBalanceResponse(ctx context.Context, sel ast.SelectionSet, v *model.CardMonthlyBalanceResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CardMonthlyBalanceResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCardResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CardResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCardResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCardResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardResponse(ctx context.Context, sel ast.SelectionSet, v *model.CardResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CardResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCardResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardResponseDeleteAtᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CardResponseDeleteAt) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCardResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardResponseDeleteAt(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCardResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.CardResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CardResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalNCardYearlyAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardYearlyAmountResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CardYearlyAmountResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCardYearlyAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardYearlyAmountResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCardYearlyAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardYearlyAmountResponse(ctx context.Context, sel ast.SelectionSet, v *model.CardYearlyAmountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CardYearlyAmountResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCardYearlyBalanceResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardYearlyBalanceResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CardYearlyBalanceResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCardYearlyBalanceResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardYearlyBalanceResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCardYearlyBalanceResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardYearlyBalanceResponse(ctx context.Context, sel ast.SelectionSet, v *model.CardYearlyBalanceResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CardYearlyBalanceResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateCardInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateCardInput(ctx context.Context, v any) (model.CreateCardInput, error) {
	res, err := ec.unmarshalInputCreateCardInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateMerchantInput(ctx context.Context, v any) (model.CreateMerchantInput, error) {
	res, err := ec.unmarshalInputCreateMerchantInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateRoleInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateRoleInput(ctx context.Context, v any) (model.CreateRoleInput, error) {
	res, err := ec.unmarshalInputCreateRoleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSaldoInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateSaldoInput(ctx context.Context, v any) (model.CreateSaldoInput, error) {
	res, err := ec.unmarshalInputCreateSaldoInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTopupInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateTopupInput(ctx context.Context, v any) (model.CreateTopupInput, error) {
	res, err := ec.unmarshalInputCreateTopupInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTransactionRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateTransactionRequest(ctx context.Context, v any) (model.CreateTransactionRequest, error) {
	res, err := ec.unmarshalInputCreateTransactionRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTransferRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateTransferRequest(ctx context.Context, v any) (model.CreateTransferRequest, error) {
	res, err := ec.unmarshalInputCreateTransferRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateUserInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateUserInput(ctx context.Context, v any) (model.CreateUserInput, error) {
	res, err := ec.unmarshalInputCreateUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateWithdrawInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCreateWithdrawInput(ctx context.Context, v any) (model.CreateWithdrawInput, error) {
	res, err := ec.unmarshalInputCreateWithdrawInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDateTime2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDateTime2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFindAllWithdrawByCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllWithdrawByCardNumberInput(ctx context.Context, v any) (model.FindAllWithdrawByCardNumberInput, error) {
	res, err := ec.unmarshalInputFindAllWithdrawByCardNumberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindAllWithdrawInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllWithdrawInput(ctx context.Context, v any) (model.FindAllWithdrawInput, error) {
	res, err := ec.unmarshalInputFindAllWithdrawInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByApiKeyInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByAPIKeyInput(ctx context.Context, v any) (model.FindByAPIKeyInput, error) {
	res, err := ec.unmarshalInputFindByApiKeyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByCardNumberInput(ctx context.Context, v any) (model.FindByCardNumberInput, error) {
	res, err := ec.unmarshalInputFindByCardNumberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByCardNumberTransferRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByCardNumberTransferRequest(ctx context.Context, v any) (model.FindByCardNumberTransferRequest, error) {
	res, err := ec.unmarshalInputFindByCardNumberTransferRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByIdCardInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDCardInput(ctx context.Context, v any) (model.FindByIDCardInput, error) {
	res, err := ec.unmarshalInputFindByIdCardInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByIdMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDMerchantInput(ctx context.Context, v any) (model.FindByIDMerchantInput, error) {
	res, err := ec.unmarshalInputFindByIdMerchantInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByIdRoleInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDRoleInput(ctx context.Context, v any) (model.FindByIDRoleInput, error) {
	res, err := ec.unmarshalInputFindByIdRoleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByIdSaldoInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDSaldoInput(ctx context.Context, v any) (model.FindByIDSaldoInput, error) {
	res, err := ec.unmarshalInputFindByIdSaldoInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByIdTopupInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTopupInput(ctx context.Context, v any) (model.FindByIDTopupInput, error) {
	res, err := ec.unmarshalInputFindByIdTopupInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByIdTransactionRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTransactionRequest(ctx context.Context, v any) (model.FindByIDTransactionRequest, error) {
	res, err := ec.unmarshalInputFindByIdTransactionRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByIdTransferRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTransferRequest(ctx context.Context, v any) (model.FindByIDTransferRequest, error) {
	res, err := ec.unmarshalInputFindByIdTransferRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByIdUserInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDUserInput(ctx context.Context, v any) (model.FindByIDUserInput, error) {
	res, err := ec.unmarshalInputFindByIdUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByIdUserRoleInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDUserRoleInput(ctx context.Context, v any) (model.FindByIDUserRoleInput, error) {
	res, err := ec.unmarshalInputFindByIdUserRoleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByIdWithdrawInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDWithdrawInput(ctx context.Context, v any) (model.FindByIDWithdrawInput, error) {
	res, err := ec.unmarshalInputFindByIdWithdrawInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByMerchantUserIdInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByMerchantUserIDInput(ctx context.Context, v any) (model.FindByMerchantUserIDInput, error) {
	res, err := ec.unmarshalInputFindByMerchantUserIdInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByUserIdCardInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByUserIDCardInput(ctx context.Context, v any) (model.FindByUserIDCardInput, error) {
	res, err := ec.unmarshalInputFindByUserIdCardInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindByYearCardNumberTransactionRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByYearCardNumberTransactionRequest(ctx context.Context, v any) (model.FindByYearCardNumberTransactionRequest, error) {
	res, err := ec.unmarshalInputFindByYearCardNumberTransactionRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindMonthlySaldoTotalBalanceInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlySaldoTotalBalanceInput(ctx context.Context, v any) (model.FindMonthlySaldoTotalBalanceInput, error) {
	res, err := ec.unmarshalInputFindMonthlySaldoTotalBalanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindMonthlyTopupStatusCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTopupStatusCardNumberInput(ctx context.Context, v any) (model.FindMonthlyTopupStatusCardNumberInput, error) {
	res, err := ec.unmarshalInputFindMonthlyTopupStatusCardNumberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindMonthlyTopupStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTopupStatusInput(ctx context.Context, v any) (model.FindMonthlyTopupStatusInput, error) {
	res, err := ec.unmarshalInputFindMonthlyTopupStatusInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindMonthlyTransactionStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTransactionStatus(ctx context.Context, v any) (model.FindMonthlyTransactionStatus, error) {
	res, err := ec.unmarshalInputFindMonthlyTransactionStatus(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindMonthlyTransactionStatusCardNumber2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTransactionStatusCardNumber(ctx context.Context, v any) (model.FindMonthlyTransactionStatusCardNumber, error) {
	res, err := ec.unmarshalInputFindMonthlyTransactionStatusCardNumber(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindMonthlyTransferStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTransferStatus(ctx context.Context, v any) (model.FindMonthlyTransferStatus, error) {
	res, err := ec.unmarshalInputFindMonthlyTransferStatus(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindMonthlyTransferStatusCardNumber2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyTransferStatusCardNumber(ctx context.Context, v any) (model.FindMonthlyTransferStatusCardNumber, error) {
	res, err := ec.unmarshalInputFindMonthlyTransferStatusCardNumber(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindMonthlyWithdrawStatusCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyWithdrawStatusCardNumberInput(ctx context.Context, v any) (model.FindMonthlyWithdrawStatusCardNumberInput, error) {
	res, err := ec.unmarshalInputFindMonthlyWithdrawStatusCardNumberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindMonthlyWithdrawStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindMonthlyWithdrawStatusInput(ctx context.Context, v any) (model.FindMonthlyWithdrawStatusInput, error) {
	res, err := ec.unmarshalInputFindMonthlyWithdrawStatusInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearAmountCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountCardNumberInput(ctx context.Context, v any) (model.FindYearAmountCardNumberInput, error) {
	res, err := ec.unmarshalInputFindYearAmountCardNumberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearAmountInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearAmountInput(ctx context.Context, v any) (model.FindYearAmountInput, error) {
	res, err := ec.unmarshalInputFindYearAmountInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearBalanceCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearBalanceCardNumberInput(ctx context.Context, v any) (model.FindYearBalanceCardNumberInput, error) {
	res, err := ec.unmarshalInputFindYearBalanceCardNumberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearBalanceInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearBalanceInput(ctx context.Context, v any) (model.FindYearBalanceInput, error) {
	res, err := ec.unmarshalInputFindYearBalanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearMerchantByApikeyInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantByApikeyInput(ctx context.Context, v any) (model.FindYearMerchantByApikeyInput, error) {
	res, err := ec.unmarshalInputFindYearMerchantByApikeyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearMerchantByIdInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantByIDInput(ctx context.Context, v any) (model.FindYearMerchantByIDInput, error) {
	res, err := ec.unmarshalInputFindYearMerchantByIdInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearMerchantInput(ctx context.Context, v any) (model.FindYearMerchantInput, error) {
	res, err := ec.unmarshalInputFindYearMerchantInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearTopupCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupCardNumberInput(ctx context.Context, v any) (model.FindYearTopupCardNumberInput, error) {
	res, err := ec.unmarshalInputFindYearTopupCardNumberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearTopupStatusCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupStatusCardNumberInput(ctx context.Context, v any) (model.FindYearTopupStatusCardNumberInput, error) {
	res, err := ec.unmarshalInputFindYearTopupStatusCardNumberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearTopupStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTopupStatusInput(ctx context.Context, v any) (model.FindYearTopupStatusInput, error) {
	res, err := ec.unmarshalInputFindYearTopupStatusInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearTransactionStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransactionStatus(ctx context.Context, v any) (model.FindYearTransactionStatus, error) {
	res, err := ec.unmarshalInputFindYearTransactionStatus(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearTransactionStatusCardNumber2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransactionStatusCardNumber(ctx context.Context, v any) (model.FindYearTransactionStatusCardNumber, error) {
	res, err := ec.unmarshalInputFindYearTransactionStatusCardNumber(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearTransferStatus2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransferStatus(ctx context.Context, v any) (model.FindYearTransferStatus, error) {
	res, err := ec.unmarshalInputFindYearTransferStatus(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearTransferStatusCardNumber2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearTransferStatusCardNumber(ctx context.Context, v any) (model.FindYearTransferStatusCardNumber, error) {
	res, err := ec.unmarshalInputFindYearTransferStatusCardNumber(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearWithdrawCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearWithdrawCardNumberInput(ctx context.Context, v any) (model.FindYearWithdrawCardNumberInput, error) {
	res, err := ec.unmarshalInputFindYearWithdrawCardNumberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearWithdrawStatusCardNumberInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearWithdrawStatusCardNumberInput(ctx context.Context, v any) (model.FindYearWithdrawStatusCardNumberInput, error) {
	res, err := ec.unmarshalInputFindYearWithdrawStatusCardNumberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearWithdrawStatusInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearWithdrawStatusInput(ctx context.Context, v any) (model.FindYearWithdrawStatusInput, error) {
	res, err := ec.unmarshalInputFindYearWithdrawStatusInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFindYearlySaldoInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindYearlySaldoInput(ctx context.Context, v any) (model.FindYearlySaldoInput, error) {
	res, err := ec.unmarshalInputFindYearlySaldoInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInt2int32(ctx context.Context, v any) (int32, error) {
	res, err := graphql.UnmarshalInt32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int32(ctx context.Context, sel ast.SelectionSet, v int32) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt32(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNLoginInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐLoginInput(ctx context.Context, v any) (model.LoginInput, error) {
	res, err := ec.unmarshalInputLoginInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMerchantMonthlyAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantMonthlyAmountResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MerchantMonthlyAmountResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantMonthlyAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantMonthlyAmountResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantMonthlyAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantMonthlyAmountResponse(ctx context.Context, sel ast.SelectionSet, v *model.MerchantMonthlyAmountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantMonthlyAmountResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNMerchantMonthlyPaymentMethodResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantMonthlyPaymentMethodResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MerchantMonthlyPaymentMethodResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantMonthlyPaymentMethodResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantMonthlyPaymentMethodResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantMonthlyPaymentMethodResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantMonthlyPaymentMethodResponse(ctx context.Context, sel ast.SelectionSet, v *model.MerchantMonthlyPaymentMethodResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantMonthlyPaymentMethodResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNMerchantMonthlyTotalAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantMonthlyTotalAmountResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MerchantMonthlyTotalAmountResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantMonthlyTotalAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantMonthlyTotalAmountResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantMonthlyTotalAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantMonthlyTotalAmountResponse(ctx context.Context, sel ast.SelectionSet, v *model.MerchantMonthlyTotalAmountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantMonthlyTotalAmountResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNMerchantResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MerchantResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantResponse(ctx context.Context, sel ast.SelectionSet, v *model.MerchantResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNMerchantResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantResponseDeleteAtᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MerchantResponseDeleteAt) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantResponseDeleteAt(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.MerchantResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalNMerchantTransactionResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantTransactionResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MerchantTransactionResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantTransactionResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantTransactionResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantTransactionResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantTransactionResponse(ctx context.Context, sel ast.SelectionSet, v *model.MerchantTransactionResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantTransactionResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNMerchantYearlyAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantYearlyAmountResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MerchantYearlyAmountResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantYearlyAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantYearlyAmountResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantYearlyAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantYearlyAmountResponse(ctx context.Context, sel ast.SelectionSet, v *model.MerchantYearlyAmountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantYearlyAmountResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNMerchantYearlyPaymentMethodResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantYearlyPaymentMethodResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MerchantYearlyPaymentMethodResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantYearlyPaymentMethodResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantYearlyPaymentMethodResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantYearlyPaymentMethodResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantYearlyPaymentMethodResponse(ctx context.Context, sel ast.SelectionSet, v *model.MerchantYearlyPaymentMethodResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantYearlyPaymentMethodResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNMerchantYearlyTotalAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantYearlyTotalAmountResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MerchantYearlyTotalAmountResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMerchantYearlyTotalAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantYearlyTotalAmountResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMerchantYearlyTotalAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantYearlyTotalAmountResponse(ctx context.Context, sel ast.SelectionSet, v *model.MerchantYearlyTotalAmountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MerchantYearlyTotalAmountResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta(ctx context.Context, sel ast.SelectionSet, v *model.PaginationMeta) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PaginationMeta(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRefreshTokenInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRefreshTokenInput(ctx context.Context, v any) (model.RefreshTokenInput, error) {
	res, err := ec.unmarshalInputRefreshTokenInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegisterInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRegisterInput(ctx context.Context, v any) (model.RegisterInput, error) {
	res, err := ec.unmarshalInputRegisterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRoleResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRoleResponse(ctx context.Context, sel ast.SelectionSet, v *model.RoleResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RoleResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNRoleResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRoleResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.RoleResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RoleResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalNSaldoMonthTotalBalanceResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoMonthTotalBalanceResponse(ctx context.Context, sel ast.SelectionSet, v *model.SaldoMonthTotalBalanceResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SaldoMonthTotalBalanceResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNSaldoResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoResponse(ctx context.Context, sel ast.SelectionSet, v *model.SaldoResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SaldoResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNSaldoResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.SaldoResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SaldoResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalNSaldoYearBalanceResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoYearBalanceResponse(ctx context.Context, sel ast.SelectionSet, v *model.SaldoYearBalanceResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SaldoYearBalanceResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNSaldoYearTotalBalanceResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoYearTotalBalanceResponse(ctx context.Context, sel ast.SelectionSet, v *model.SaldoYearTotalBalanceResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SaldoYearTotalBalanceResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTopupMonthAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthAmountResponse(ctx context.Context, sel ast.SelectionSet, v *model.TopupMonthAmountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopupMonthAmountResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTopupMonthMethodResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthMethodResponse(ctx context.Context, sel ast.SelectionSet, v *model.TopupMonthMethodResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopupMonthMethodResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTopupMonthStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, v *model.TopupMonthStatusFailedResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopupMonthStatusFailedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTopupMonthStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, v *model.TopupMonthStatusSuccessResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopupMonthStatusSuccessResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTopupResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupResponse(ctx context.Context, sel ast.SelectionSet, v *model.TopupResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopupResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTopupResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.TopupResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopupResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalNTopupYearAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearAmountResponse(ctx context.Context, sel ast.SelectionSet, v *model.TopupYearAmountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopupYearAmountResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTopupYearMethodResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearMethodResponse(ctx context.Context, sel ast.SelectionSet, v *model.TopupYearMethodResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopupYearMethodResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTopupYearStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, v *model.TopupYearStatusFailedResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopupYearStatusFailedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTopupYearStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, v *model.TopupYearStatusSuccessResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopupYearStatusSuccessResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransactionMonthAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthAmountResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransactionMonthAmountResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransactionMonthAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthAmountResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransactionMonthAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthAmountResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransactionMonthAmountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransactionMonthAmountResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransactionMonthMethodResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthMethodResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransactionMonthMethodResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransactionMonthMethodResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthMethodResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransactionMonthMethodResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthMethodResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransactionMonthMethodResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransactionMonthMethodResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransactionMonthStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthStatusFailedResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransactionMonthStatusFailedResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransactionMonthStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthStatusFailedResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransactionMonthStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransactionMonthStatusFailedResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransactionMonthStatusFailedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransactionMonthStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthStatusSuccessResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransactionMonthStatusSuccessResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransactionMonthStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthStatusSuccessResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransactionMonthStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionMonthStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransactionMonthStatusSuccessResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransactionMonthStatusSuccessResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransactionResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransactionResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransactionResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransactionResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransactionResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransactionResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransactionResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionResponseDeleteAtᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransactionResponseDeleteAt) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransactionResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionResponseDeleteAt(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransactionResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.TransactionResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransactionResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalNTransactionYearMethodResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearMethodResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransactionYearMethodResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransactionYearMethodResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearMethodResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransactionYearMethodResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearMethodResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransactionYearMethodResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransactionYearMethodResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransactionYearStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearStatusFailedResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransactionYearStatusFailedResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransactionYearStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearStatusFailedResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransactionYearStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransactionYearStatusFailedResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransactionYearStatusFailedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransactionYearStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearStatusSuccessResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransactionYearStatusSuccessResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransactionYearStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearStatusSuccessResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransactionYearStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransactionYearStatusSuccessResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransactionYearStatusSuccessResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransactionYearlyAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearlyAmountResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransactionYearlyAmountResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransactionYearlyAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearlyAmountResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransactionYearlyAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionYearlyAmountResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransactionYearlyAmountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransactionYearlyAmountResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransferMonthAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferMonthAmountResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransferMonthAmountResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransferMonthAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferMonthAmountResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransferMonthAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferMonthAmountResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransferMonthAmountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransferMonthAmountResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransferMonthStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferMonthStatusFailedResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransferMonthStatusFailedResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransferMonthStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferMonthStatusFailedResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransferMonthStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferMonthStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransferMonthStatusFailedResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransferMonthStatusFailedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransferMonthStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferMonthStatusSuccessResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransferMonthStatusSuccessResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransferMonthStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferMonthStatusSuccessResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransferMonthStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferMonthStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransferMonthStatusSuccessResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransferMonthStatusSuccessResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransferResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransferResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransferResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransferResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransferResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransferResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransferResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferResponseDeleteAtᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransferResponseDeleteAt) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransferResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferResponseDeleteAt(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransferResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.TransferResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransferResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalNTransferYearAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferYearAmountResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransferYearAmountResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransferYearAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferYearAmountResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransferYearAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferYearAmountResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransferYearAmountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransferYearAmountResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransferYearStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferYearStatusFailedResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransferYearStatusFailedResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransferYearStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferYearStatusFailedResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransferYearStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferYearStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransferYearStatusFailedResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransferYearStatusFailedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTransferYearStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferYearStatusSuccessResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TransferYearStatusSuccessResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTransferYearStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferYearStatusSuccessResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTransferYearStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferYearStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransferYearStatusSuccessResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TransferYearStatusSuccessResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateCardInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateCardInput(ctx context.Context, v any) (model.UpdateCardInput, error) {
	res, err := ec.unmarshalInputUpdateCardInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateMerchantInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateMerchantInput(ctx context.Context, v any) (model.UpdateMerchantInput, error) {
	res, err := ec.unmarshalInputUpdateMerchantInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateRoleInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateRoleInput(ctx context.Context, v any) (model.UpdateRoleInput, error) {
	res, err := ec.unmarshalInputUpdateRoleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSaldoInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateSaldoInput(ctx context.Context, v any) (model.UpdateSaldoInput, error) {
	res, err := ec.unmarshalInputUpdateSaldoInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTopupInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateTopupInput(ctx context.Context, v any) (model.UpdateTopupInput, error) {
	res, err := ec.unmarshalInputUpdateTopupInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTransactionRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateTransactionRequest(ctx context.Context, v any) (model.UpdateTransactionRequest, error) {
	res, err := ec.unmarshalInputUpdateTransactionRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTransferRequest2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateTransferRequest(ctx context.Context, v any) (model.UpdateTransferRequest, error) {
	res, err := ec.unmarshalInputUpdateTransferRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUserInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateUserInput(ctx context.Context, v any) (model.UpdateUserInput, error) {
	res, err := ec.unmarshalInputUpdateUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateWithdrawInput2githubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUpdateWithdrawInput(ctx context.Context, v any) (model.UpdateWithdrawInput, error) {
	res, err := ec.unmarshalInputUpdateWithdrawInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.UserResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponse(ctx context.Context, sel ast.SelectionSet, v *model.UserResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNUserResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponseDeleteAtᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.UserResponseDeleteAt) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponseDeleteAt(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.UserResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalNWithdrawMonthStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawMonthStatusFailedResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WithdrawMonthStatusFailedResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWithdrawMonthStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawMonthStatusFailedResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWithdrawMonthStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawMonthStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, v *model.WithdrawMonthStatusFailedResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._WithdrawMonthStatusFailedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNWithdrawMonthStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawMonthStatusSuccessResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WithdrawMonthStatusSuccessResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWithdrawMonthStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawMonthStatusSuccessResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWithdrawMonthStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawMonthStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, v *model.WithdrawMonthStatusSuccessResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._WithdrawMonthStatusSuccessResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNWithdrawMonthlyAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawMonthlyAmountResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WithdrawMonthlyAmountResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWithdrawMonthlyAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawMonthlyAmountResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWithdrawMonthlyAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawMonthlyAmountResponse(ctx context.Context, sel ast.SelectionSet, v *model.WithdrawMonthlyAmountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._WithdrawMonthlyAmountResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNWithdrawResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WithdrawResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWithdrawResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWithdrawResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawResponse(ctx context.Context, sel ast.SelectionSet, v *model.WithdrawResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._WithdrawResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNWithdrawResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawResponseDeleteAtᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WithdrawResponseDeleteAt) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWithdrawResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawResponseDeleteAt(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWithdrawResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.WithdrawResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._WithdrawResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalNWithdrawYearStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawYearStatusFailedResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WithdrawYearStatusFailedResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWithdrawYearStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawYearStatusFailedResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWithdrawYearStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawYearStatusFailedResponse(ctx context.Context, sel ast.SelectionSet, v *model.WithdrawYearStatusFailedResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._WithdrawYearStatusFailedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNWithdrawYearStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawYearStatusSuccessResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WithdrawYearStatusSuccessResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWithdrawYearStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawYearStatusSuccessResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWithdrawYearStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawYearStatusSuccessResponse(ctx context.Context, sel ast.SelectionSet, v *model.WithdrawYearStatusSuccessResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._WithdrawYearStatusSuccessResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNWithdrawYearlyAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawYearlyAmountResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WithdrawYearlyAmountResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWithdrawYearlyAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawYearlyAmountResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWithdrawYearlyAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawYearlyAmountResponse(ctx context.Context, sel ast.SelectionSet, v *model.WithdrawYearlyAmountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._WithdrawYearlyAmountResponse(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOApiResponseMonthSaldoBalances2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthSaldoBalances(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMonthSaldoBalances) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseMonthSaldoBalances(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseMonthTotalSaldo2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseMonthTotalSaldo(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseMonthTotalSaldo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseMonthTotalSaldo(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponsePaginationRole2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationRole(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponsePaginationRole(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponsePaginationRoleDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationRoleDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationRoleDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponsePaginationRoleDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponsePaginationSaldo2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationSaldo(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationSaldo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponsePaginationSaldo(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponsePaginationSaldoDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationSaldoDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationSaldoDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponsePaginationSaldoDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponsePaginationTopup2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTopup(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationTopup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponsePaginationTopup(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponsePaginationTopupDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTopupDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationTopupDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponsePaginationTopupDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponsePaginationTransaction2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTransaction(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationTransaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponsePaginationTransaction(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponsePaginationTransactionDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTransactionDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationTransactionDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponsePaginationTransactionDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponsePaginationTransfer2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTransfer(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationTransfer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponsePaginationTransfer(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponsePaginationTransferDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationTransferDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationTransferDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponsePaginationTransferDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponsePaginationWithdraw2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationWithdraw(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationWithdraw) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponsePaginationWithdraw(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponsePaginationWithdrawDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsePaginationWithdrawDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsePaginationWithdrawDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponsePaginationWithdrawDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseRole2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRole(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseRole(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseRoleAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRoleAll(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseRoleAll) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseRoleAll(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseRoleDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRoleDelete(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseRoleDelete) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseRoleDelete(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseRoleDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseRoleDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseRoleDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseRoleDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseSaldoAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseSaldoAll(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseSaldoAll) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseSaldoAll(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseSaldoDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseSaldoDelete(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseSaldoDelete) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseSaldoDelete(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseSaldoResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseSaldoResponse(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseSaldoResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseSaldoResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseSaldoResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseSaldoResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseSaldoResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseSaldoResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTopup2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopup(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTopup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTopup(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTopupAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupAll(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTopupAll) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTopupAll(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTopupDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupDelete(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTopupDelete) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTopupDelete(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTopupDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTopupDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTopupDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTopupMonthAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupMonthAmount(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTopupMonthAmount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTopupMonthAmount(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTopupMonthMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupMonthMethod(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTopupMonthMethod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTopupMonthMethod(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTopupMonthStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupMonthStatusFailed(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTopupMonthStatusFailed) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTopupMonthStatusFailed(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTopupMonthStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupMonthStatusSuccess(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTopupMonthStatusSuccess) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTopupMonthStatusSuccess(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTopupYearAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupYearAmount(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTopupYearAmount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTopupYearAmount(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTopupYearMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupYearMethod(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTopupYearMethod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTopupYearMethod(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTopupYearStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupYearStatusFailed(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTopupYearStatusFailed) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTopupYearStatusFailed(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTopupYearStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTopupYearStatusSuccess(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTopupYearStatusSuccess) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTopupYearStatusSuccess(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransaction2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransaction(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransaction(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransactionAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionAll(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransactionAll) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransactionAll(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransactionDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionDelete(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransactionDelete) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransactionDelete(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransactionDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransactionDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransactionDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransactionMonthAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionMonthAmount(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransactionMonthAmount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransactionMonthAmount(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransactionMonthMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionMonthMethod(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransactionMonthMethod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransactionMonthMethod(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransactionMonthStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionMonthStatusFailed(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransactionMonthStatusFailed) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransactionMonthStatusFailed(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransactionMonthStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionMonthStatusSuccess(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransactionMonthStatusSuccess) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransactionMonthStatusSuccess(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransactionYearAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionYearAmount(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransactionYearAmount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransactionYearAmount(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransactionYearMethod2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionYearMethod(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransactionYearMethod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransactionYearMethod(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransactionYearStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionYearStatusFailed(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransactionYearStatusFailed) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransactionYearStatusFailed(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransactionYearStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactionYearStatusSuccess(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransactionYearStatusSuccess) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransactionYearStatusSuccess(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransactions2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransactions(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransactions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransactions(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransfer2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransfer(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransfer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransfer(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransferAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferAll(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransferAll) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransferAll(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransferDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferDelete(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransferDelete) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransferDelete(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransferDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransferDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransferDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransferMonthAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferMonthAmount(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransferMonthAmount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransferMonthAmount(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransferMonthStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferMonthStatusFailed(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransferMonthStatusFailed) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransferMonthStatusFailed(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransferMonthStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferMonthStatusSuccess(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransferMonthStatusSuccess) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransferMonthStatusSuccess(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransferYearAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferYearAmount(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransferYearAmount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransferYearAmount(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransferYearStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferYearStatusFailed(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransferYearStatusFailed) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransferYearStatusFailed(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransferYearStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransferYearStatusSuccess(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransferYearStatusSuccess) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransferYearStatusSuccess(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseTransfers2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseTransfers(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseTransfers) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseTransfers(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseWithdraw2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdraw(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseWithdraw) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseWithdraw(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseWithdrawAll2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawAll(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseWithdrawAll) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseWithdrawAll(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseWithdrawDelete2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawDelete(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseWithdrawDelete) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseWithdrawDelete(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseWithdrawDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseWithdrawDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseWithdrawDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseWithdrawMonthAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawMonthAmount(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseWithdrawMonthAmount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseWithdrawMonthAmount(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseWithdrawMonthStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawMonthStatusFailed(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseWithdrawMonthStatusFailed) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseWithdrawMonthStatusFailed(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseWithdrawMonthStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawMonthStatusSuccess(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseWithdrawMonthStatusSuccess) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseWithdrawMonthStatusSuccess(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseWithdrawYearAmount2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawYearAmount(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseWithdrawYearAmount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseWithdrawYearAmount(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseWithdrawYearStatusFailed2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawYearStatusFailed(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseWithdrawYearStatusFailed) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseWithdrawYearStatusFailed(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseWithdrawYearStatusSuccess2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseWithdrawYearStatusSuccess(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseWithdrawYearStatusSuccess) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseWithdrawYearStatusSuccess(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseYearSaldoBalances2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearSaldoBalances(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseYearSaldoBalances) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseYearSaldoBalances(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponseYearTotalSaldo2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponseYearTotalSaldo(ctx context.Context, sel ast.SelectionSet, v *model.APIResponseYearTotalSaldo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponseYearTotalSaldo(ctx, sel, v)
}

func (ec *executionContext) marshalOApiResponsesRole2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐAPIResponsesRole(ctx context.Context, sel ast.SelectionSet, v *model.APIResponsesRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiResponsesRole(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCardDashboardByNumberResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardDashboardByNumberResponse(ctx context.Context, sel ast.SelectionSet, v *model.CardDashboardByNumberResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CardDashboardByNumberResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCardDashboardResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardDashboardResponse(ctx context.Context, sel ast.SelectionSet, v *model.CardDashboardResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CardDashboardResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCardResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardResponse(ctx context.Context, sel ast.SelectionSet, v *model.CardResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CardResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCardResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐCardResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.CardResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CardResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFindAllCardInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllCardInput(ctx context.Context, v any) (*model.FindAllCardInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindAllCardInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindAllMerchantApikeyInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllMerchantApikeyInput(ctx context.Context, v any) (*model.FindAllMerchantApikeyInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindAllMerchantApikeyInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindAllMerchantInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllMerchantInput(ctx context.Context, v any) (*model.FindAllMerchantInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindAllMerchantInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindAllMerchantTransactionInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllMerchantTransactionInput(ctx context.Context, v any) (*model.FindAllMerchantTransactionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindAllMerchantTransactionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindAllRoleInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllRoleInput(ctx context.Context, v any) (*model.FindAllRoleInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindAllRoleInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindAllSaldoInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllSaldoInput(ctx context.Context, v any) (*model.FindAllSaldoInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindAllSaldoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindAllTopupByCardNumberInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTopupByCardNumberInput(ctx context.Context, v any) (*model.FindAllTopupByCardNumberInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindAllTopupByCardNumberInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindAllTopupInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTopupInput(ctx context.Context, v any) (*model.FindAllTopupInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindAllTopupInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindAllTransactionCardNumberRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTransactionCardNumberRequest(ctx context.Context, v any) (*model.FindAllTransactionCardNumberRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindAllTransactionCardNumberRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindAllTransactionRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTransactionRequest(ctx context.Context, v any) (*model.FindAllTransactionRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindAllTransactionRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindAllTransferRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllTransferRequest(ctx context.Context, v any) (*model.FindAllTransferRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindAllTransferRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindAllUserInput2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindAllUserInput(ctx context.Context, v any) (*model.FindAllUserInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindAllUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindByIdTransactionRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTransactionRequest(ctx context.Context, v any) (*model.FindByIDTransactionRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindByIdTransactionRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindByIdTransferRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindByIDTransferRequest(ctx context.Context, v any) (*model.FindByIDTransferRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindByIdTransferRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindTransactionByMerchantIdRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindTransactionByMerchantIDRequest(ctx context.Context, v any) (*model.FindTransactionByMerchantIDRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindTransactionByMerchantIdRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindTransferByTransferFromRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindTransferByTransferFromRequest(ctx context.Context, v any) (*model.FindTransferByTransferFromRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindTransferByTransferFromRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFindTransferByTransferToRequest2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐFindTransferByTransferToRequest(ctx context.Context, v any) (*model.FindTransferByTransferToRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindTransferByTransferToRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2ᚖint32(ctx context.Context, v any) (*int32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint32(ctx context.Context, sel ast.SelectionSet, v *int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt32(*v)
	return res
}

func (ec *executionContext) marshalOMerchantResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantResponse(ctx context.Context, sel ast.SelectionSet, v *model.MerchantResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MerchantResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOMerchantResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐMerchantResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.MerchantResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MerchantResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOPaginationMeta2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐPaginationMeta(ctx context.Context, sel ast.SelectionSet, v *model.PaginationMeta) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaginationMeta(ctx, sel, v)
}

func (ec *executionContext) marshalORoleResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRoleResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.RoleResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRoleResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRoleResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalORoleResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRoleResponse(ctx context.Context, sel ast.SelectionSet, v *model.RoleResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RoleResponse(ctx, sel, v)
}

func (ec *executionContext) marshalORoleResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRoleResponseDeleteAtᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.RoleResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRoleResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRoleResponseDeleteAt(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalORoleResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐRoleResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.RoleResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RoleResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOSaldoMonthBalanceResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoMonthBalanceResponse(ctx context.Context, sel ast.SelectionSet, v []*model.SaldoMonthBalanceResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSaldoMonthBalanceResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoMonthBalanceResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSaldoMonthBalanceResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoMonthBalanceResponse(ctx context.Context, sel ast.SelectionSet, v *model.SaldoMonthBalanceResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SaldoMonthBalanceResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOSaldoMonthTotalBalanceResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoMonthTotalBalanceResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SaldoMonthTotalBalanceResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSaldoMonthTotalBalanceResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoMonthTotalBalanceResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSaldoResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SaldoResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSaldoResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSaldoResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoResponse(ctx context.Context, sel ast.SelectionSet, v *model.SaldoResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SaldoResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOSaldoResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoResponseDeleteAtᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SaldoResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSaldoResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoResponseDeleteAt(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSaldoResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.SaldoResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SaldoResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOSaldoYearBalanceResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoYearBalanceResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SaldoYearBalanceResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSaldoYearBalanceResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoYearBalanceResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSaldoYearTotalBalanceResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoYearTotalBalanceResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SaldoYearTotalBalanceResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSaldoYearTotalBalanceResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐSaldoYearTotalBalanceResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTokenResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTokenResponse(ctx context.Context, sel ast.SelectionSet, v *model.TokenResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TokenResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOTopupMonthAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthAmountResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TopupMonthAmountResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopupMonthAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthAmountResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTopupMonthMethodResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthMethodResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TopupMonthMethodResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopupMonthMethodResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthMethodResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTopupMonthStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthStatusFailedResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TopupMonthStatusFailedResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopupMonthStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthStatusFailedResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTopupMonthStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthStatusSuccessResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TopupMonthStatusSuccessResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopupMonthStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupMonthStatusSuccessResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTopupResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TopupResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopupResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTopupResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupResponse(ctx context.Context, sel ast.SelectionSet, v *model.TopupResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TopupResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOTopupResponseDeleteAt2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupResponseDeleteAtᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TopupResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopupResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupResponseDeleteAt(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTopupResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.TopupResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TopupResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOTopupYearAmountResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearAmountResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TopupYearAmountResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopupYearAmountResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearAmountResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTopupYearMethodResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearMethodResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TopupYearMethodResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopupYearMethodResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearMethodResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTopupYearStatusFailedResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearStatusFailedResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TopupYearStatusFailedResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopupYearStatusFailedResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearStatusFailedResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTopupYearStatusSuccessResponse2ᚕᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearStatusSuccessResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TopupYearStatusSuccessResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopupYearStatusSuccessResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTopupYearStatusSuccessResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTransactionResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransactionResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransactionResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOTransactionResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransactionResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.TransactionResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransactionResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOTransferResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferResponse(ctx context.Context, sel ast.SelectionSet, v *model.TransferResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransferResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOTransferResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐTransferResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.TransferResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransferResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOUserResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponse(ctx context.Context, sel ast.SelectionSet, v *model.UserResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOUserResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐUserResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.UserResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalOWithdrawResponse2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawResponse(ctx context.Context, sel ast.SelectionSet, v *model.WithdrawResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._WithdrawResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOWithdrawResponseDeleteAt2ᚖgithubᚗcomᚋMamangRustᚋpaymentgatewaygraphqlᚋinternalᚋgraphᚋmodelᚐWithdrawResponseDeleteAt(ctx context.Context, sel ast.SelectionSet, v *model.WithdrawResponseDeleteAt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._WithdrawResponseDeleteAt(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
