// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/interfaces.go -destination=internal/repository/mocks/mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	record "github.com/MamangRust/paymentgatewaygraphql/internal/domain/record"
	requests "github.com/MamangRust/paymentgatewaygraphql/internal/domain/requests"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(request *requests.CreateUserRequest) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", request)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), request)
}

// DeleteAllUserPermanent mocks base method.
func (m *MockUserRepository) DeleteAllUserPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllUserPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllUserPermanent indicates an expected call of DeleteAllUserPermanent.
func (mr *MockUserRepositoryMockRecorder) DeleteAllUserPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllUserPermanent", reflect.TypeOf((*MockUserRepository)(nil).DeleteAllUserPermanent))
}

// DeleteUserPermanent mocks base method.
func (m *MockUserRepository) DeleteUserPermanent(user_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPermanent", user_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserPermanent indicates an expected call of DeleteUserPermanent.
func (mr *MockUserRepositoryMockRecorder) DeleteUserPermanent(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPermanent", reflect.TypeOf((*MockUserRepository)(nil).DeleteUserPermanent), user_id)
}

// FindAllUsers mocks base method.
func (m *MockUserRepository) FindAllUsers(req *requests.FindAllUsers) ([]*record.UserRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllUsers", req)
	ret0, _ := ret[0].([]*record.UserRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllUsers indicates an expected call of FindAllUsers.
func (mr *MockUserRepositoryMockRecorder) FindAllUsers(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllUsers", reflect.TypeOf((*MockUserRepository)(nil).FindAllUsers), req)
}

// FindByActive mocks base method.
func (m *MockUserRepository) FindByActive(req *requests.FindAllUsers) ([]*record.UserRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", req)
	ret0, _ := ret[0].([]*record.UserRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockUserRepositoryMockRecorder) FindByActive(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockUserRepository)(nil).FindByActive), req)
}

// FindByEmail mocks base method.
func (m *MockUserRepository) FindByEmail(email string) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryMockRecorder) FindByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindByEmail), email)
}

// FindById mocks base method.
func (m *MockUserRepository) FindById(user_id int) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", user_id)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserRepositoryMockRecorder) FindById(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserRepository)(nil).FindById), user_id)
}

// FindByTrashed mocks base method.
func (m *MockUserRepository) FindByTrashed(req *requests.FindAllUsers) ([]*record.UserRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", req)
	ret0, _ := ret[0].([]*record.UserRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockUserRepositoryMockRecorder) FindByTrashed(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockUserRepository)(nil).FindByTrashed), req)
}

// RestoreAllUser mocks base method.
func (m *MockUserRepository) RestoreAllUser() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllUser")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllUser indicates an expected call of RestoreAllUser.
func (mr *MockUserRepositoryMockRecorder) RestoreAllUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllUser", reflect.TypeOf((*MockUserRepository)(nil).RestoreAllUser))
}

// RestoreUser mocks base method.
func (m *MockUserRepository) RestoreUser(user_id int) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreUser", user_id)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreUser indicates an expected call of RestoreUser.
func (mr *MockUserRepositoryMockRecorder) RestoreUser(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreUser", reflect.TypeOf((*MockUserRepository)(nil).RestoreUser), user_id)
}

// TrashedUser mocks base method.
func (m *MockUserRepository) TrashedUser(user_id int) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedUser", user_id)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedUser indicates an expected call of TrashedUser.
func (mr *MockUserRepositoryMockRecorder) TrashedUser(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedUser", reflect.TypeOf((*MockUserRepository)(nil).TrashedUser), user_id)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(request *requests.UpdateUserRequest) (*record.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", request)
	ret0, _ := ret[0].(*record.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), request)
}

// MockRoleRepository is a mock of RoleRepository interface.
type MockRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepositoryMockRecorder
	isgomock struct{}
}

// MockRoleRepositoryMockRecorder is the mock recorder for MockRoleRepository.
type MockRoleRepositoryMockRecorder struct {
	mock *MockRoleRepository
}

// NewMockRoleRepository creates a new mock instance.
func NewMockRoleRepository(ctrl *gomock.Controller) *MockRoleRepository {
	mock := &MockRoleRepository{ctrl: ctrl}
	mock.recorder = &MockRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepository) EXPECT() *MockRoleRepositoryMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRoleRepository) CreateRole(request *requests.CreateRoleRequest) (*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", request)
	ret0, _ := ret[0].(*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleRepositoryMockRecorder) CreateRole(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleRepository)(nil).CreateRole), request)
}

// DeleteAllRolePermanent mocks base method.
func (m *MockRoleRepository) DeleteAllRolePermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllRolePermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllRolePermanent indicates an expected call of DeleteAllRolePermanent.
func (mr *MockRoleRepositoryMockRecorder) DeleteAllRolePermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllRolePermanent", reflect.TypeOf((*MockRoleRepository)(nil).DeleteAllRolePermanent))
}

// DeleteRolePermanent mocks base method.
func (m *MockRoleRepository) DeleteRolePermanent(role_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRolePermanent", role_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRolePermanent indicates an expected call of DeleteRolePermanent.
func (mr *MockRoleRepositoryMockRecorder) DeleteRolePermanent(role_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRolePermanent", reflect.TypeOf((*MockRoleRepository)(nil).DeleteRolePermanent), role_id)
}

// FindAllRoles mocks base method.
func (m *MockRoleRepository) FindAllRoles(req *requests.FindAllRoles) ([]*record.RoleRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRoles", req)
	ret0, _ := ret[0].([]*record.RoleRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllRoles indicates an expected call of FindAllRoles.
func (mr *MockRoleRepositoryMockRecorder) FindAllRoles(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRoles", reflect.TypeOf((*MockRoleRepository)(nil).FindAllRoles), req)
}

// FindByActiveRole mocks base method.
func (m *MockRoleRepository) FindByActiveRole(req *requests.FindAllRoles) ([]*record.RoleRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActiveRole", req)
	ret0, _ := ret[0].([]*record.RoleRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActiveRole indicates an expected call of FindByActiveRole.
func (mr *MockRoleRepositoryMockRecorder) FindByActiveRole(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActiveRole", reflect.TypeOf((*MockRoleRepository)(nil).FindByActiveRole), req)
}

// FindById mocks base method.
func (m *MockRoleRepository) FindById(role_id int) (*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", role_id)
	ret0, _ := ret[0].(*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockRoleRepositoryMockRecorder) FindById(role_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockRoleRepository)(nil).FindById), role_id)
}

// FindByName mocks base method.
func (m *MockRoleRepository) FindByName(name string) (*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockRoleRepositoryMockRecorder) FindByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockRoleRepository)(nil).FindByName), name)
}

// FindByTrashedRole mocks base method.
func (m *MockRoleRepository) FindByTrashedRole(req *requests.FindAllRoles) ([]*record.RoleRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashedRole", req)
	ret0, _ := ret[0].([]*record.RoleRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashedRole indicates an expected call of FindByTrashedRole.
func (mr *MockRoleRepositoryMockRecorder) FindByTrashedRole(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashedRole", reflect.TypeOf((*MockRoleRepository)(nil).FindByTrashedRole), req)
}

// FindByUserId mocks base method.
func (m *MockRoleRepository) FindByUserId(user_id int) ([]*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", user_id)
	ret0, _ := ret[0].([]*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockRoleRepositoryMockRecorder) FindByUserId(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockRoleRepository)(nil).FindByUserId), user_id)
}

// RestoreAllRole mocks base method.
func (m *MockRoleRepository) RestoreAllRole() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllRole")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllRole indicates an expected call of RestoreAllRole.
func (mr *MockRoleRepositoryMockRecorder) RestoreAllRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllRole", reflect.TypeOf((*MockRoleRepository)(nil).RestoreAllRole))
}

// RestoreRole mocks base method.
func (m *MockRoleRepository) RestoreRole(role_id int) (*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreRole", role_id)
	ret0, _ := ret[0].(*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreRole indicates an expected call of RestoreRole.
func (mr *MockRoleRepositoryMockRecorder) RestoreRole(role_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreRole", reflect.TypeOf((*MockRoleRepository)(nil).RestoreRole), role_id)
}

// TrashedRole mocks base method.
func (m *MockRoleRepository) TrashedRole(role_id int) (*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedRole", role_id)
	ret0, _ := ret[0].(*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedRole indicates an expected call of TrashedRole.
func (mr *MockRoleRepositoryMockRecorder) TrashedRole(role_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedRole", reflect.TypeOf((*MockRoleRepository)(nil).TrashedRole), role_id)
}

// UpdateRole mocks base method.
func (m *MockRoleRepository) UpdateRole(request *requests.UpdateRoleRequest) (*record.RoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", request)
	ret0, _ := ret[0].(*record.RoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRoleRepositoryMockRecorder) UpdateRole(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleRepository)(nil).UpdateRole), request)
}

// MockRefreshTokenRepository is a mock of RefreshTokenRepository interface.
type MockRefreshTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenRepositoryMockRecorder
	isgomock struct{}
}

// MockRefreshTokenRepositoryMockRecorder is the mock recorder for MockRefreshTokenRepository.
type MockRefreshTokenRepositoryMockRecorder struct {
	mock *MockRefreshTokenRepository
}

// NewMockRefreshTokenRepository creates a new mock instance.
func NewMockRefreshTokenRepository(ctrl *gomock.Controller) *MockRefreshTokenRepository {
	mock := &MockRefreshTokenRepository{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenRepository) EXPECT() *MockRefreshTokenRepositoryMockRecorder {
	return m.recorder
}

// CreateRefreshToken mocks base method.
func (m *MockRefreshTokenRepository) CreateRefreshToken(req *requests.CreateRefreshToken) (*record.RefreshTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", req)
	ret0, _ := ret[0].(*record.RefreshTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) CreateRefreshToken(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).CreateRefreshToken), req)
}

// DeleteRefreshToken mocks base method.
func (m *MockRefreshTokenRepository) DeleteRefreshToken(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) DeleteRefreshToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).DeleteRefreshToken), token)
}

// DeleteRefreshTokenByUserId mocks base method.
func (m *MockRefreshTokenRepository) DeleteRefreshTokenByUserId(user_id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshTokenByUserId", user_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshTokenByUserId indicates an expected call of DeleteRefreshTokenByUserId.
func (mr *MockRefreshTokenRepositoryMockRecorder) DeleteRefreshTokenByUserId(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshTokenByUserId", reflect.TypeOf((*MockRefreshTokenRepository)(nil).DeleteRefreshTokenByUserId), user_id)
}

// FindByToken mocks base method.
func (m *MockRefreshTokenRepository) FindByToken(token string) (*record.RefreshTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", token)
	ret0, _ := ret[0].(*record.RefreshTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) FindByToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).FindByToken), token)
}

// FindByUserId mocks base method.
func (m *MockRefreshTokenRepository) FindByUserId(user_id int) (*record.RefreshTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", user_id)
	ret0, _ := ret[0].(*record.RefreshTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockRefreshTokenRepositoryMockRecorder) FindByUserId(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockRefreshTokenRepository)(nil).FindByUserId), user_id)
}

// UpdateRefreshToken mocks base method.
func (m *MockRefreshTokenRepository) UpdateRefreshToken(req *requests.UpdateRefreshToken) (*record.RefreshTokenRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefreshToken", req)
	ret0, _ := ret[0].(*record.RefreshTokenRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRefreshToken indicates an expected call of UpdateRefreshToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) UpdateRefreshToken(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefreshToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).UpdateRefreshToken), req)
}

// MockUserRoleRepository is a mock of UserRoleRepository interface.
type MockUserRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRoleRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRoleRepositoryMockRecorder is the mock recorder for MockUserRoleRepository.
type MockUserRoleRepositoryMockRecorder struct {
	mock *MockUserRoleRepository
}

// NewMockUserRoleRepository creates a new mock instance.
func NewMockUserRoleRepository(ctrl *gomock.Controller) *MockUserRoleRepository {
	mock := &MockUserRoleRepository{ctrl: ctrl}
	mock.recorder = &MockUserRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRoleRepository) EXPECT() *MockUserRoleRepositoryMockRecorder {
	return m.recorder
}

// AssignRoleToUser mocks base method.
func (m *MockUserRoleRepository) AssignRoleToUser(req *requests.CreateUserRoleRequest) (*record.UserRoleRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToUser", req)
	ret0, _ := ret[0].(*record.UserRoleRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignRoleToUser indicates an expected call of AssignRoleToUser.
func (mr *MockUserRoleRepositoryMockRecorder) AssignRoleToUser(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToUser", reflect.TypeOf((*MockUserRoleRepository)(nil).AssignRoleToUser), req)
}

// RemoveRoleFromUser mocks base method.
func (m *MockUserRoleRepository) RemoveRoleFromUser(req *requests.RemoveUserRoleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoleFromUser", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRoleFromUser indicates an expected call of RemoveRoleFromUser.
func (mr *MockUserRoleRepositoryMockRecorder) RemoveRoleFromUser(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleFromUser", reflect.TypeOf((*MockUserRoleRepository)(nil).RemoveRoleFromUser), req)
}

// MockCardRepository is a mock of CardRepository interface.
type MockCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardRepositoryMockRecorder
	isgomock struct{}
}

// MockCardRepositoryMockRecorder is the mock recorder for MockCardRepository.
type MockCardRepositoryMockRecorder struct {
	mock *MockCardRepository
}

// NewMockCardRepository creates a new mock instance.
func NewMockCardRepository(ctrl *gomock.Controller) *MockCardRepository {
	mock := &MockCardRepository{ctrl: ctrl}
	mock.recorder = &MockCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardRepository) EXPECT() *MockCardRepositoryMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockCardRepository) CreateCard(request *requests.CreateCardRequest) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", request)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardRepositoryMockRecorder) CreateCard(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardRepository)(nil).CreateCard), request)
}

// DeleteAllCardPermanent mocks base method.
func (m *MockCardRepository) DeleteAllCardPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllCardPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllCardPermanent indicates an expected call of DeleteAllCardPermanent.
func (mr *MockCardRepositoryMockRecorder) DeleteAllCardPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllCardPermanent", reflect.TypeOf((*MockCardRepository)(nil).DeleteAllCardPermanent))
}

// DeleteCardPermanent mocks base method.
func (m *MockCardRepository) DeleteCardPermanent(card_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCardPermanent", card_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCardPermanent indicates an expected call of DeleteCardPermanent.
func (mr *MockCardRepositoryMockRecorder) DeleteCardPermanent(card_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCardPermanent", reflect.TypeOf((*MockCardRepository)(nil).DeleteCardPermanent), card_id)
}

// FindAllCards mocks base method.
func (m *MockCardRepository) FindAllCards(req *requests.FindAllCards) ([]*record.CardRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCards", req)
	ret0, _ := ret[0].([]*record.CardRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllCards indicates an expected call of FindAllCards.
func (mr *MockCardRepositoryMockRecorder) FindAllCards(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCards", reflect.TypeOf((*MockCardRepository)(nil).FindAllCards), req)
}

// FindByActive mocks base method.
func (m *MockCardRepository) FindByActive(req *requests.FindAllCards) ([]*record.CardRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", req)
	ret0, _ := ret[0].([]*record.CardRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockCardRepositoryMockRecorder) FindByActive(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockCardRepository)(nil).FindByActive), req)
}

// FindById mocks base method.
func (m *MockCardRepository) FindById(card_id int) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", card_id)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCardRepositoryMockRecorder) FindById(card_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCardRepository)(nil).FindById), card_id)
}

// FindByTrashed mocks base method.
func (m *MockCardRepository) FindByTrashed(req *requests.FindAllCards) ([]*record.CardRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", req)
	ret0, _ := ret[0].([]*record.CardRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockCardRepositoryMockRecorder) FindByTrashed(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockCardRepository)(nil).FindByTrashed), req)
}

// FindCardByCardNumber mocks base method.
func (m *MockCardRepository) FindCardByCardNumber(card_number string) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCardByCardNumber", card_number)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCardByCardNumber indicates an expected call of FindCardByCardNumber.
func (mr *MockCardRepositoryMockRecorder) FindCardByCardNumber(card_number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCardByCardNumber", reflect.TypeOf((*MockCardRepository)(nil).FindCardByCardNumber), card_number)
}

// FindCardByUserId mocks base method.
func (m *MockCardRepository) FindCardByUserId(user_id int) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCardByUserId", user_id)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCardByUserId indicates an expected call of FindCardByUserId.
func (mr *MockCardRepositoryMockRecorder) FindCardByUserId(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCardByUserId", reflect.TypeOf((*MockCardRepository)(nil).FindCardByUserId), user_id)
}

// GetMonthlyBalance mocks base method.
func (m *MockCardRepository) GetMonthlyBalance(year int) ([]*record.CardMonthBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyBalance", year)
	ret0, _ := ret[0].([]*record.CardMonthBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyBalance indicates an expected call of GetMonthlyBalance.
func (mr *MockCardRepositoryMockRecorder) GetMonthlyBalance(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyBalance", reflect.TypeOf((*MockCardRepository)(nil).GetMonthlyBalance), year)
}

// GetMonthlyBalancesByCardNumber mocks base method.
func (m *MockCardRepository) GetMonthlyBalancesByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardMonthBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyBalancesByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardMonthBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyBalancesByCardNumber indicates an expected call of GetMonthlyBalancesByCardNumber.
func (mr *MockCardRepositoryMockRecorder) GetMonthlyBalancesByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyBalancesByCardNumber", reflect.TypeOf((*MockCardRepository)(nil).GetMonthlyBalancesByCardNumber), req)
}

// GetMonthlyTopupAmount mocks base method.
func (m *MockCardRepository) GetMonthlyTopupAmount(year int) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTopupAmount", year)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTopupAmount indicates an expected call of GetMonthlyTopupAmount.
func (mr *MockCardRepositoryMockRecorder) GetMonthlyTopupAmount(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTopupAmount", reflect.TypeOf((*MockCardRepository)(nil).GetMonthlyTopupAmount), year)
}

// GetMonthlyTopupAmountByCardNumber mocks base method.
func (m *MockCardRepository) GetMonthlyTopupAmountByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTopupAmountByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTopupAmountByCardNumber indicates an expected call of GetMonthlyTopupAmountByCardNumber.
func (mr *MockCardRepositoryMockRecorder) GetMonthlyTopupAmountByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTopupAmountByCardNumber", reflect.TypeOf((*MockCardRepository)(nil).GetMonthlyTopupAmountByCardNumber), req)
}

// GetMonthlyTransactionAmount mocks base method.
func (m *MockCardRepository) GetMonthlyTransactionAmount(year int) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransactionAmount", year)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransactionAmount indicates an expected call of GetMonthlyTransactionAmount.
func (mr *MockCardRepositoryMockRecorder) GetMonthlyTransactionAmount(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransactionAmount", reflect.TypeOf((*MockCardRepository)(nil).GetMonthlyTransactionAmount), year)
}

// GetMonthlyTransactionAmountByCardNumber mocks base method.
func (m *MockCardRepository) GetMonthlyTransactionAmountByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransactionAmountByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransactionAmountByCardNumber indicates an expected call of GetMonthlyTransactionAmountByCardNumber.
func (mr *MockCardRepositoryMockRecorder) GetMonthlyTransactionAmountByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransactionAmountByCardNumber", reflect.TypeOf((*MockCardRepository)(nil).GetMonthlyTransactionAmountByCardNumber), req)
}

// GetMonthlyTransferAmountByReceiver mocks base method.
func (m *MockCardRepository) GetMonthlyTransferAmountByReceiver(req *requests.MonthYearCardNumberCard) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransferAmountByReceiver", req)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransferAmountByReceiver indicates an expected call of GetMonthlyTransferAmountByReceiver.
func (mr *MockCardRepositoryMockRecorder) GetMonthlyTransferAmountByReceiver(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransferAmountByReceiver", reflect.TypeOf((*MockCardRepository)(nil).GetMonthlyTransferAmountByReceiver), req)
}

// GetMonthlyTransferAmountBySender mocks base method.
func (m *MockCardRepository) GetMonthlyTransferAmountBySender(req *requests.MonthYearCardNumberCard) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransferAmountBySender", req)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransferAmountBySender indicates an expected call of GetMonthlyTransferAmountBySender.
func (mr *MockCardRepositoryMockRecorder) GetMonthlyTransferAmountBySender(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransferAmountBySender", reflect.TypeOf((*MockCardRepository)(nil).GetMonthlyTransferAmountBySender), req)
}

// GetMonthlyTransferAmountReceiver mocks base method.
func (m *MockCardRepository) GetMonthlyTransferAmountReceiver(year int) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransferAmountReceiver", year)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransferAmountReceiver indicates an expected call of GetMonthlyTransferAmountReceiver.
func (mr *MockCardRepositoryMockRecorder) GetMonthlyTransferAmountReceiver(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransferAmountReceiver", reflect.TypeOf((*MockCardRepository)(nil).GetMonthlyTransferAmountReceiver), year)
}

// GetMonthlyTransferAmountSender mocks base method.
func (m *MockCardRepository) GetMonthlyTransferAmountSender(year int) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransferAmountSender", year)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransferAmountSender indicates an expected call of GetMonthlyTransferAmountSender.
func (mr *MockCardRepositoryMockRecorder) GetMonthlyTransferAmountSender(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransferAmountSender", reflect.TypeOf((*MockCardRepository)(nil).GetMonthlyTransferAmountSender), year)
}

// GetMonthlyWithdrawAmount mocks base method.
func (m *MockCardRepository) GetMonthlyWithdrawAmount(year int) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyWithdrawAmount", year)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyWithdrawAmount indicates an expected call of GetMonthlyWithdrawAmount.
func (mr *MockCardRepositoryMockRecorder) GetMonthlyWithdrawAmount(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyWithdrawAmount", reflect.TypeOf((*MockCardRepository)(nil).GetMonthlyWithdrawAmount), year)
}

// GetMonthlyWithdrawAmountByCardNumber mocks base method.
func (m *MockCardRepository) GetMonthlyWithdrawAmountByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyWithdrawAmountByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyWithdrawAmountByCardNumber indicates an expected call of GetMonthlyWithdrawAmountByCardNumber.
func (mr *MockCardRepositoryMockRecorder) GetMonthlyWithdrawAmountByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyWithdrawAmountByCardNumber", reflect.TypeOf((*MockCardRepository)(nil).GetMonthlyWithdrawAmountByCardNumber), req)
}

// GetTotalBalanceByCardNumber mocks base method.
func (m *MockCardRepository) GetTotalBalanceByCardNumber(cardNumber string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalBalanceByCardNumber", cardNumber)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalBalanceByCardNumber indicates an expected call of GetTotalBalanceByCardNumber.
func (mr *MockCardRepositoryMockRecorder) GetTotalBalanceByCardNumber(cardNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalBalanceByCardNumber", reflect.TypeOf((*MockCardRepository)(nil).GetTotalBalanceByCardNumber), cardNumber)
}

// GetTotalBalances mocks base method.
func (m *MockCardRepository) GetTotalBalances() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalBalances")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalBalances indicates an expected call of GetTotalBalances.
func (mr *MockCardRepositoryMockRecorder) GetTotalBalances() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalBalances", reflect.TypeOf((*MockCardRepository)(nil).GetTotalBalances))
}

// GetTotalTopAmount mocks base method.
func (m *MockCardRepository) GetTotalTopAmount() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTopAmount")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTopAmount indicates an expected call of GetTotalTopAmount.
func (mr *MockCardRepositoryMockRecorder) GetTotalTopAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTopAmount", reflect.TypeOf((*MockCardRepository)(nil).GetTotalTopAmount))
}

// GetTotalTopupAmountByCardNumber mocks base method.
func (m *MockCardRepository) GetTotalTopupAmountByCardNumber(cardNumber string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTopupAmountByCardNumber", cardNumber)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTopupAmountByCardNumber indicates an expected call of GetTotalTopupAmountByCardNumber.
func (mr *MockCardRepositoryMockRecorder) GetTotalTopupAmountByCardNumber(cardNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTopupAmountByCardNumber", reflect.TypeOf((*MockCardRepository)(nil).GetTotalTopupAmountByCardNumber), cardNumber)
}

// GetTotalTransactionAmount mocks base method.
func (m *MockCardRepository) GetTotalTransactionAmount() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTransactionAmount")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTransactionAmount indicates an expected call of GetTotalTransactionAmount.
func (mr *MockCardRepositoryMockRecorder) GetTotalTransactionAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTransactionAmount", reflect.TypeOf((*MockCardRepository)(nil).GetTotalTransactionAmount))
}

// GetTotalTransactionAmountByCardNumber mocks base method.
func (m *MockCardRepository) GetTotalTransactionAmountByCardNumber(cardNumber string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTransactionAmountByCardNumber", cardNumber)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTransactionAmountByCardNumber indicates an expected call of GetTotalTransactionAmountByCardNumber.
func (mr *MockCardRepositoryMockRecorder) GetTotalTransactionAmountByCardNumber(cardNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTransactionAmountByCardNumber", reflect.TypeOf((*MockCardRepository)(nil).GetTotalTransactionAmountByCardNumber), cardNumber)
}

// GetTotalTransferAmount mocks base method.
func (m *MockCardRepository) GetTotalTransferAmount() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTransferAmount")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTransferAmount indicates an expected call of GetTotalTransferAmount.
func (mr *MockCardRepositoryMockRecorder) GetTotalTransferAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTransferAmount", reflect.TypeOf((*MockCardRepository)(nil).GetTotalTransferAmount))
}

// GetTotalTransferAmountByReceiver mocks base method.
func (m *MockCardRepository) GetTotalTransferAmountByReceiver(receiverCardNumber string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTransferAmountByReceiver", receiverCardNumber)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTransferAmountByReceiver indicates an expected call of GetTotalTransferAmountByReceiver.
func (mr *MockCardRepositoryMockRecorder) GetTotalTransferAmountByReceiver(receiverCardNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTransferAmountByReceiver", reflect.TypeOf((*MockCardRepository)(nil).GetTotalTransferAmountByReceiver), receiverCardNumber)
}

// GetTotalTransferAmountBySender mocks base method.
func (m *MockCardRepository) GetTotalTransferAmountBySender(senderCardNumber string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTransferAmountBySender", senderCardNumber)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTransferAmountBySender indicates an expected call of GetTotalTransferAmountBySender.
func (mr *MockCardRepositoryMockRecorder) GetTotalTransferAmountBySender(senderCardNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTransferAmountBySender", reflect.TypeOf((*MockCardRepository)(nil).GetTotalTransferAmountBySender), senderCardNumber)
}

// GetTotalWithdrawAmount mocks base method.
func (m *MockCardRepository) GetTotalWithdrawAmount() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalWithdrawAmount")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalWithdrawAmount indicates an expected call of GetTotalWithdrawAmount.
func (mr *MockCardRepositoryMockRecorder) GetTotalWithdrawAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalWithdrawAmount", reflect.TypeOf((*MockCardRepository)(nil).GetTotalWithdrawAmount))
}

// GetTotalWithdrawAmountByCardNumber mocks base method.
func (m *MockCardRepository) GetTotalWithdrawAmountByCardNumber(cardNumber string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalWithdrawAmountByCardNumber", cardNumber)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalWithdrawAmountByCardNumber indicates an expected call of GetTotalWithdrawAmountByCardNumber.
func (mr *MockCardRepositoryMockRecorder) GetTotalWithdrawAmountByCardNumber(cardNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalWithdrawAmountByCardNumber", reflect.TypeOf((*MockCardRepository)(nil).GetTotalWithdrawAmountByCardNumber), cardNumber)
}

// GetYearlyBalance mocks base method.
func (m *MockCardRepository) GetYearlyBalance(year int) ([]*record.CardYearlyBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyBalance", year)
	ret0, _ := ret[0].([]*record.CardYearlyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyBalance indicates an expected call of GetYearlyBalance.
func (mr *MockCardRepositoryMockRecorder) GetYearlyBalance(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyBalance", reflect.TypeOf((*MockCardRepository)(nil).GetYearlyBalance), year)
}

// GetYearlyBalanceByCardNumber mocks base method.
func (m *MockCardRepository) GetYearlyBalanceByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardYearlyBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyBalanceByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardYearlyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyBalanceByCardNumber indicates an expected call of GetYearlyBalanceByCardNumber.
func (mr *MockCardRepositoryMockRecorder) GetYearlyBalanceByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyBalanceByCardNumber", reflect.TypeOf((*MockCardRepository)(nil).GetYearlyBalanceByCardNumber), req)
}

// GetYearlyTopupAmount mocks base method.
func (m *MockCardRepository) GetYearlyTopupAmount(year int) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTopupAmount", year)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTopupAmount indicates an expected call of GetYearlyTopupAmount.
func (mr *MockCardRepositoryMockRecorder) GetYearlyTopupAmount(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTopupAmount", reflect.TypeOf((*MockCardRepository)(nil).GetYearlyTopupAmount), year)
}

// GetYearlyTopupAmountByCardNumber mocks base method.
func (m *MockCardRepository) GetYearlyTopupAmountByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTopupAmountByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTopupAmountByCardNumber indicates an expected call of GetYearlyTopupAmountByCardNumber.
func (mr *MockCardRepositoryMockRecorder) GetYearlyTopupAmountByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTopupAmountByCardNumber", reflect.TypeOf((*MockCardRepository)(nil).GetYearlyTopupAmountByCardNumber), req)
}

// GetYearlyTransactionAmount mocks base method.
func (m *MockCardRepository) GetYearlyTransactionAmount(year int) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransactionAmount", year)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransactionAmount indicates an expected call of GetYearlyTransactionAmount.
func (mr *MockCardRepositoryMockRecorder) GetYearlyTransactionAmount(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransactionAmount", reflect.TypeOf((*MockCardRepository)(nil).GetYearlyTransactionAmount), year)
}

// GetYearlyTransactionAmountByCardNumber mocks base method.
func (m *MockCardRepository) GetYearlyTransactionAmountByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransactionAmountByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransactionAmountByCardNumber indicates an expected call of GetYearlyTransactionAmountByCardNumber.
func (mr *MockCardRepositoryMockRecorder) GetYearlyTransactionAmountByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransactionAmountByCardNumber", reflect.TypeOf((*MockCardRepository)(nil).GetYearlyTransactionAmountByCardNumber), req)
}

// GetYearlyTransferAmountByReceiver mocks base method.
func (m *MockCardRepository) GetYearlyTransferAmountByReceiver(req *requests.MonthYearCardNumberCard) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferAmountByReceiver", req)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferAmountByReceiver indicates an expected call of GetYearlyTransferAmountByReceiver.
func (mr *MockCardRepositoryMockRecorder) GetYearlyTransferAmountByReceiver(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferAmountByReceiver", reflect.TypeOf((*MockCardRepository)(nil).GetYearlyTransferAmountByReceiver), req)
}

// GetYearlyTransferAmountBySender mocks base method.
func (m *MockCardRepository) GetYearlyTransferAmountBySender(req *requests.MonthYearCardNumberCard) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferAmountBySender", req)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferAmountBySender indicates an expected call of GetYearlyTransferAmountBySender.
func (mr *MockCardRepositoryMockRecorder) GetYearlyTransferAmountBySender(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferAmountBySender", reflect.TypeOf((*MockCardRepository)(nil).GetYearlyTransferAmountBySender), req)
}

// GetYearlyTransferAmountReceiver mocks base method.
func (m *MockCardRepository) GetYearlyTransferAmountReceiver(year int) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferAmountReceiver", year)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferAmountReceiver indicates an expected call of GetYearlyTransferAmountReceiver.
func (mr *MockCardRepositoryMockRecorder) GetYearlyTransferAmountReceiver(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferAmountReceiver", reflect.TypeOf((*MockCardRepository)(nil).GetYearlyTransferAmountReceiver), year)
}

// GetYearlyTransferAmountSender mocks base method.
func (m *MockCardRepository) GetYearlyTransferAmountSender(year int) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferAmountSender", year)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferAmountSender indicates an expected call of GetYearlyTransferAmountSender.
func (mr *MockCardRepositoryMockRecorder) GetYearlyTransferAmountSender(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferAmountSender", reflect.TypeOf((*MockCardRepository)(nil).GetYearlyTransferAmountSender), year)
}

// GetYearlyWithdrawAmount mocks base method.
func (m *MockCardRepository) GetYearlyWithdrawAmount(year int) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyWithdrawAmount", year)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyWithdrawAmount indicates an expected call of GetYearlyWithdrawAmount.
func (mr *MockCardRepositoryMockRecorder) GetYearlyWithdrawAmount(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyWithdrawAmount", reflect.TypeOf((*MockCardRepository)(nil).GetYearlyWithdrawAmount), year)
}

// GetYearlyWithdrawAmountByCardNumber mocks base method.
func (m *MockCardRepository) GetYearlyWithdrawAmountByCardNumber(req *requests.MonthYearCardNumberCard) ([]*record.CardYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyWithdrawAmountByCardNumber", req)
	ret0, _ := ret[0].([]*record.CardYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyWithdrawAmountByCardNumber indicates an expected call of GetYearlyWithdrawAmountByCardNumber.
func (mr *MockCardRepositoryMockRecorder) GetYearlyWithdrawAmountByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyWithdrawAmountByCardNumber", reflect.TypeOf((*MockCardRepository)(nil).GetYearlyWithdrawAmountByCardNumber), req)
}

// RestoreAllCard mocks base method.
func (m *MockCardRepository) RestoreAllCard() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllCard")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllCard indicates an expected call of RestoreAllCard.
func (mr *MockCardRepositoryMockRecorder) RestoreAllCard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllCard", reflect.TypeOf((*MockCardRepository)(nil).RestoreAllCard))
}

// RestoreCard mocks base method.
func (m *MockCardRepository) RestoreCard(cardId int) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCard", cardId)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreCard indicates an expected call of RestoreCard.
func (mr *MockCardRepositoryMockRecorder) RestoreCard(cardId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCard", reflect.TypeOf((*MockCardRepository)(nil).RestoreCard), cardId)
}

// TrashedCard mocks base method.
func (m *MockCardRepository) TrashedCard(cardId int) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedCard", cardId)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedCard indicates an expected call of TrashedCard.
func (mr *MockCardRepositoryMockRecorder) TrashedCard(cardId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedCard", reflect.TypeOf((*MockCardRepository)(nil).TrashedCard), cardId)
}

// UpdateCard mocks base method.
func (m *MockCardRepository) UpdateCard(request *requests.UpdateCardRequest) (*record.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", request)
	ret0, _ := ret[0].(*record.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockCardRepositoryMockRecorder) UpdateCard(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockCardRepository)(nil).UpdateCard), request)
}

// MockMerchantRepository is a mock of MerchantRepository interface.
type MockMerchantRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantRepositoryMockRecorder
	isgomock struct{}
}

// MockMerchantRepositoryMockRecorder is the mock recorder for MockMerchantRepository.
type MockMerchantRepositoryMockRecorder struct {
	mock *MockMerchantRepository
}

// NewMockMerchantRepository creates a new mock instance.
func NewMockMerchantRepository(ctrl *gomock.Controller) *MockMerchantRepository {
	mock := &MockMerchantRepository{ctrl: ctrl}
	mock.recorder = &MockMerchantRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchantRepository) EXPECT() *MockMerchantRepositoryMockRecorder {
	return m.recorder
}

// CreateMerchant mocks base method.
func (m *MockMerchantRepository) CreateMerchant(request *requests.CreateMerchantRequest) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMerchant", request)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMerchant indicates an expected call of CreateMerchant.
func (mr *MockMerchantRepositoryMockRecorder) CreateMerchant(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).CreateMerchant), request)
}

// DeleteAllMerchantPermanent mocks base method.
func (m *MockMerchantRepository) DeleteAllMerchantPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllMerchantPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllMerchantPermanent indicates an expected call of DeleteAllMerchantPermanent.
func (mr *MockMerchantRepositoryMockRecorder) DeleteAllMerchantPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllMerchantPermanent", reflect.TypeOf((*MockMerchantRepository)(nil).DeleteAllMerchantPermanent))
}

// DeleteMerchantPermanent mocks base method.
func (m *MockMerchantRepository) DeleteMerchantPermanent(merchant_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMerchantPermanent", merchant_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMerchantPermanent indicates an expected call of DeleteMerchantPermanent.
func (mr *MockMerchantRepositoryMockRecorder) DeleteMerchantPermanent(merchant_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMerchantPermanent", reflect.TypeOf((*MockMerchantRepository)(nil).DeleteMerchantPermanent), merchant_id)
}

// FindAllMerchants mocks base method.
func (m *MockMerchantRepository) FindAllMerchants(req *requests.FindAllMerchants) ([]*record.MerchantRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMerchants", req)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllMerchants indicates an expected call of FindAllMerchants.
func (mr *MockMerchantRepositoryMockRecorder) FindAllMerchants(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMerchants", reflect.TypeOf((*MockMerchantRepository)(nil).FindAllMerchants), req)
}

// FindAllTransactions mocks base method.
func (m *MockMerchantRepository) FindAllTransactions(req *requests.FindAllMerchantTransactions) ([]*record.MerchantTransactionsRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTransactions", req)
	ret0, _ := ret[0].([]*record.MerchantTransactionsRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllTransactions indicates an expected call of FindAllTransactions.
func (mr *MockMerchantRepositoryMockRecorder) FindAllTransactions(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransactions", reflect.TypeOf((*MockMerchantRepository)(nil).FindAllTransactions), req)
}

// FindAllTransactionsByApikey mocks base method.
func (m *MockMerchantRepository) FindAllTransactionsByApikey(req *requests.FindAllMerchantTransactionsByApiKey) ([]*record.MerchantTransactionsRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTransactionsByApikey", req)
	ret0, _ := ret[0].([]*record.MerchantTransactionsRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllTransactionsByApikey indicates an expected call of FindAllTransactionsByApikey.
func (mr *MockMerchantRepositoryMockRecorder) FindAllTransactionsByApikey(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransactionsByApikey", reflect.TypeOf((*MockMerchantRepository)(nil).FindAllTransactionsByApikey), req)
}

// FindAllTransactionsByMerchant mocks base method.
func (m *MockMerchantRepository) FindAllTransactionsByMerchant(req *requests.FindAllMerchantTransactionsById) ([]*record.MerchantTransactionsRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTransactionsByMerchant", req)
	ret0, _ := ret[0].([]*record.MerchantTransactionsRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllTransactionsByMerchant indicates an expected call of FindAllTransactionsByMerchant.
func (mr *MockMerchantRepositoryMockRecorder) FindAllTransactionsByMerchant(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransactionsByMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).FindAllTransactionsByMerchant), req)
}

// FindByActive mocks base method.
func (m *MockMerchantRepository) FindByActive(req *requests.FindAllMerchants) ([]*record.MerchantRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", req)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockMerchantRepositoryMockRecorder) FindByActive(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockMerchantRepository)(nil).FindByActive), req)
}

// FindByApiKey mocks base method.
func (m *MockMerchantRepository) FindByApiKey(api_key string) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByApiKey", api_key)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByApiKey indicates an expected call of FindByApiKey.
func (mr *MockMerchantRepositoryMockRecorder) FindByApiKey(api_key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByApiKey", reflect.TypeOf((*MockMerchantRepository)(nil).FindByApiKey), api_key)
}

// FindById mocks base method.
func (m *MockMerchantRepository) FindById(merchant_id int) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", merchant_id)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockMerchantRepositoryMockRecorder) FindById(merchant_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockMerchantRepository)(nil).FindById), merchant_id)
}

// FindByMerchantUserId mocks base method.
func (m *MockMerchantRepository) FindByMerchantUserId(user_id int) ([]*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMerchantUserId", user_id)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMerchantUserId indicates an expected call of FindByMerchantUserId.
func (mr *MockMerchantRepositoryMockRecorder) FindByMerchantUserId(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMerchantUserId", reflect.TypeOf((*MockMerchantRepository)(nil).FindByMerchantUserId), user_id)
}

// FindByName mocks base method.
func (m *MockMerchantRepository) FindByName(name string) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockMerchantRepositoryMockRecorder) FindByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockMerchantRepository)(nil).FindByName), name)
}

// FindByTrashed mocks base method.
func (m *MockMerchantRepository) FindByTrashed(req *requests.FindAllMerchants) ([]*record.MerchantRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", req)
	ret0, _ := ret[0].([]*record.MerchantRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockMerchantRepositoryMockRecorder) FindByTrashed(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockMerchantRepository)(nil).FindByTrashed), req)
}

// GetMonthlyAmountByApikey mocks base method.
func (m *MockMerchantRepository) GetMonthlyAmountByApikey(req *requests.MonthYearAmountApiKey) ([]*record.MerchantMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyAmountByApikey", req)
	ret0, _ := ret[0].([]*record.MerchantMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyAmountByApikey indicates an expected call of GetMonthlyAmountByApikey.
func (mr *MockMerchantRepositoryMockRecorder) GetMonthlyAmountByApikey(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyAmountByApikey", reflect.TypeOf((*MockMerchantRepository)(nil).GetMonthlyAmountByApikey), req)
}

// GetMonthlyAmountByMerchants mocks base method.
func (m *MockMerchantRepository) GetMonthlyAmountByMerchants(req *requests.MonthYearAmountMerchant) ([]*record.MerchantMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyAmountByMerchants", req)
	ret0, _ := ret[0].([]*record.MerchantMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyAmountByMerchants indicates an expected call of GetMonthlyAmountByMerchants.
func (mr *MockMerchantRepositoryMockRecorder) GetMonthlyAmountByMerchants(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyAmountByMerchants", reflect.TypeOf((*MockMerchantRepository)(nil).GetMonthlyAmountByMerchants), req)
}

// GetMonthlyAmountMerchant mocks base method.
func (m *MockMerchantRepository) GetMonthlyAmountMerchant(year int) ([]*record.MerchantMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyAmountMerchant", year)
	ret0, _ := ret[0].([]*record.MerchantMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyAmountMerchant indicates an expected call of GetMonthlyAmountMerchant.
func (mr *MockMerchantRepositoryMockRecorder) GetMonthlyAmountMerchant(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyAmountMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).GetMonthlyAmountMerchant), year)
}

// GetMonthlyPaymentMethodByApikey mocks base method.
func (m *MockMerchantRepository) GetMonthlyPaymentMethodByApikey(req *requests.MonthYearPaymentMethodApiKey) ([]*record.MerchantMonthlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyPaymentMethodByApikey", req)
	ret0, _ := ret[0].([]*record.MerchantMonthlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyPaymentMethodByApikey indicates an expected call of GetMonthlyPaymentMethodByApikey.
func (mr *MockMerchantRepositoryMockRecorder) GetMonthlyPaymentMethodByApikey(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyPaymentMethodByApikey", reflect.TypeOf((*MockMerchantRepository)(nil).GetMonthlyPaymentMethodByApikey), req)
}

// GetMonthlyPaymentMethodByMerchants mocks base method.
func (m *MockMerchantRepository) GetMonthlyPaymentMethodByMerchants(req *requests.MonthYearPaymentMethodMerchant) ([]*record.MerchantMonthlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyPaymentMethodByMerchants", req)
	ret0, _ := ret[0].([]*record.MerchantMonthlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyPaymentMethodByMerchants indicates an expected call of GetMonthlyPaymentMethodByMerchants.
func (mr *MockMerchantRepositoryMockRecorder) GetMonthlyPaymentMethodByMerchants(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyPaymentMethodByMerchants", reflect.TypeOf((*MockMerchantRepository)(nil).GetMonthlyPaymentMethodByMerchants), req)
}

// GetMonthlyPaymentMethodsMerchant mocks base method.
func (m *MockMerchantRepository) GetMonthlyPaymentMethodsMerchant(year int) ([]*record.MerchantMonthlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyPaymentMethodsMerchant", year)
	ret0, _ := ret[0].([]*record.MerchantMonthlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyPaymentMethodsMerchant indicates an expected call of GetMonthlyPaymentMethodsMerchant.
func (mr *MockMerchantRepositoryMockRecorder) GetMonthlyPaymentMethodsMerchant(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyPaymentMethodsMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).GetMonthlyPaymentMethodsMerchant), year)
}

// GetMonthlyTotalAmountByApikey mocks base method.
func (m *MockMerchantRepository) GetMonthlyTotalAmountByApikey(req *requests.MonthYearTotalAmountApiKey) ([]*record.MerchantMonthlyTotalAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTotalAmountByApikey", req)
	ret0, _ := ret[0].([]*record.MerchantMonthlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTotalAmountByApikey indicates an expected call of GetMonthlyTotalAmountByApikey.
func (mr *MockMerchantRepositoryMockRecorder) GetMonthlyTotalAmountByApikey(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTotalAmountByApikey", reflect.TypeOf((*MockMerchantRepository)(nil).GetMonthlyTotalAmountByApikey), req)
}

// GetMonthlyTotalAmountByMerchants mocks base method.
func (m *MockMerchantRepository) GetMonthlyTotalAmountByMerchants(req *requests.MonthYearTotalAmountMerchant) ([]*record.MerchantMonthlyTotalAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTotalAmountByMerchants", req)
	ret0, _ := ret[0].([]*record.MerchantMonthlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTotalAmountByMerchants indicates an expected call of GetMonthlyTotalAmountByMerchants.
func (mr *MockMerchantRepositoryMockRecorder) GetMonthlyTotalAmountByMerchants(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTotalAmountByMerchants", reflect.TypeOf((*MockMerchantRepository)(nil).GetMonthlyTotalAmountByMerchants), req)
}

// GetMonthlyTotalAmountMerchant mocks base method.
func (m *MockMerchantRepository) GetMonthlyTotalAmountMerchant(year int) ([]*record.MerchantMonthlyTotalAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTotalAmountMerchant", year)
	ret0, _ := ret[0].([]*record.MerchantMonthlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTotalAmountMerchant indicates an expected call of GetMonthlyTotalAmountMerchant.
func (mr *MockMerchantRepositoryMockRecorder) GetMonthlyTotalAmountMerchant(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTotalAmountMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).GetMonthlyTotalAmountMerchant), year)
}

// GetYearlyAmountByApikey mocks base method.
func (m *MockMerchantRepository) GetYearlyAmountByApikey(req *requests.MonthYearAmountApiKey) ([]*record.MerchantYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyAmountByApikey", req)
	ret0, _ := ret[0].([]*record.MerchantYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyAmountByApikey indicates an expected call of GetYearlyAmountByApikey.
func (mr *MockMerchantRepositoryMockRecorder) GetYearlyAmountByApikey(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyAmountByApikey", reflect.TypeOf((*MockMerchantRepository)(nil).GetYearlyAmountByApikey), req)
}

// GetYearlyAmountByMerchants mocks base method.
func (m *MockMerchantRepository) GetYearlyAmountByMerchants(req *requests.MonthYearAmountMerchant) ([]*record.MerchantYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyAmountByMerchants", req)
	ret0, _ := ret[0].([]*record.MerchantYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyAmountByMerchants indicates an expected call of GetYearlyAmountByMerchants.
func (mr *MockMerchantRepositoryMockRecorder) GetYearlyAmountByMerchants(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyAmountByMerchants", reflect.TypeOf((*MockMerchantRepository)(nil).GetYearlyAmountByMerchants), req)
}

// GetYearlyAmountMerchant mocks base method.
func (m *MockMerchantRepository) GetYearlyAmountMerchant(year int) ([]*record.MerchantYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyAmountMerchant", year)
	ret0, _ := ret[0].([]*record.MerchantYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyAmountMerchant indicates an expected call of GetYearlyAmountMerchant.
func (mr *MockMerchantRepositoryMockRecorder) GetYearlyAmountMerchant(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyAmountMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).GetYearlyAmountMerchant), year)
}

// GetYearlyPaymentMethodByApikey mocks base method.
func (m *MockMerchantRepository) GetYearlyPaymentMethodByApikey(req *requests.MonthYearPaymentMethodApiKey) ([]*record.MerchantYearlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyPaymentMethodByApikey", req)
	ret0, _ := ret[0].([]*record.MerchantYearlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyPaymentMethodByApikey indicates an expected call of GetYearlyPaymentMethodByApikey.
func (mr *MockMerchantRepositoryMockRecorder) GetYearlyPaymentMethodByApikey(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyPaymentMethodByApikey", reflect.TypeOf((*MockMerchantRepository)(nil).GetYearlyPaymentMethodByApikey), req)
}

// GetYearlyPaymentMethodByMerchants mocks base method.
func (m *MockMerchantRepository) GetYearlyPaymentMethodByMerchants(req *requests.MonthYearPaymentMethodMerchant) ([]*record.MerchantYearlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyPaymentMethodByMerchants", req)
	ret0, _ := ret[0].([]*record.MerchantYearlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyPaymentMethodByMerchants indicates an expected call of GetYearlyPaymentMethodByMerchants.
func (mr *MockMerchantRepositoryMockRecorder) GetYearlyPaymentMethodByMerchants(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyPaymentMethodByMerchants", reflect.TypeOf((*MockMerchantRepository)(nil).GetYearlyPaymentMethodByMerchants), req)
}

// GetYearlyPaymentMethodMerchant mocks base method.
func (m *MockMerchantRepository) GetYearlyPaymentMethodMerchant(year int) ([]*record.MerchantYearlyPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyPaymentMethodMerchant", year)
	ret0, _ := ret[0].([]*record.MerchantYearlyPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyPaymentMethodMerchant indicates an expected call of GetYearlyPaymentMethodMerchant.
func (mr *MockMerchantRepositoryMockRecorder) GetYearlyPaymentMethodMerchant(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyPaymentMethodMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).GetYearlyPaymentMethodMerchant), year)
}

// GetYearlyTotalAmountByApikey mocks base method.
func (m *MockMerchantRepository) GetYearlyTotalAmountByApikey(req *requests.MonthYearTotalAmountApiKey) ([]*record.MerchantYearlyTotalAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTotalAmountByApikey", req)
	ret0, _ := ret[0].([]*record.MerchantYearlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTotalAmountByApikey indicates an expected call of GetYearlyTotalAmountByApikey.
func (mr *MockMerchantRepositoryMockRecorder) GetYearlyTotalAmountByApikey(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTotalAmountByApikey", reflect.TypeOf((*MockMerchantRepository)(nil).GetYearlyTotalAmountByApikey), req)
}

// GetYearlyTotalAmountByMerchants mocks base method.
func (m *MockMerchantRepository) GetYearlyTotalAmountByMerchants(req *requests.MonthYearTotalAmountMerchant) ([]*record.MerchantYearlyTotalAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTotalAmountByMerchants", req)
	ret0, _ := ret[0].([]*record.MerchantYearlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTotalAmountByMerchants indicates an expected call of GetYearlyTotalAmountByMerchants.
func (mr *MockMerchantRepositoryMockRecorder) GetYearlyTotalAmountByMerchants(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTotalAmountByMerchants", reflect.TypeOf((*MockMerchantRepository)(nil).GetYearlyTotalAmountByMerchants), req)
}

// GetYearlyTotalAmountMerchant mocks base method.
func (m *MockMerchantRepository) GetYearlyTotalAmountMerchant(year int) ([]*record.MerchantYearlyTotalAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTotalAmountMerchant", year)
	ret0, _ := ret[0].([]*record.MerchantYearlyTotalAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTotalAmountMerchant indicates an expected call of GetYearlyTotalAmountMerchant.
func (mr *MockMerchantRepositoryMockRecorder) GetYearlyTotalAmountMerchant(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTotalAmountMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).GetYearlyTotalAmountMerchant), year)
}

// RestoreAllMerchant mocks base method.
func (m *MockMerchantRepository) RestoreAllMerchant() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllMerchant")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllMerchant indicates an expected call of RestoreAllMerchant.
func (mr *MockMerchantRepositoryMockRecorder) RestoreAllMerchant() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).RestoreAllMerchant))
}

// RestoreMerchant mocks base method.
func (m *MockMerchantRepository) RestoreMerchant(merchant_id int) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreMerchant", merchant_id)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreMerchant indicates an expected call of RestoreMerchant.
func (mr *MockMerchantRepositoryMockRecorder) RestoreMerchant(merchant_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).RestoreMerchant), merchant_id)
}

// TrashedMerchant mocks base method.
func (m *MockMerchantRepository) TrashedMerchant(merchantId int) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedMerchant", merchantId)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedMerchant indicates an expected call of TrashedMerchant.
func (mr *MockMerchantRepositoryMockRecorder) TrashedMerchant(merchantId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).TrashedMerchant), merchantId)
}

// UpdateMerchant mocks base method.
func (m *MockMerchantRepository) UpdateMerchant(request *requests.UpdateMerchantRequest) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMerchant", request)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMerchant indicates an expected call of UpdateMerchant.
func (mr *MockMerchantRepositoryMockRecorder) UpdateMerchant(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMerchant", reflect.TypeOf((*MockMerchantRepository)(nil).UpdateMerchant), request)
}

// UpdateMerchantStatus mocks base method.
func (m *MockMerchantRepository) UpdateMerchantStatus(request *requests.UpdateMerchantStatus) (*record.MerchantRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMerchantStatus", request)
	ret0, _ := ret[0].(*record.MerchantRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMerchantStatus indicates an expected call of UpdateMerchantStatus.
func (mr *MockMerchantRepositoryMockRecorder) UpdateMerchantStatus(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMerchantStatus", reflect.TypeOf((*MockMerchantRepository)(nil).UpdateMerchantStatus), request)
}

// MockSaldoRepository is a mock of SaldoRepository interface.
type MockSaldoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSaldoRepositoryMockRecorder
	isgomock struct{}
}

// MockSaldoRepositoryMockRecorder is the mock recorder for MockSaldoRepository.
type MockSaldoRepositoryMockRecorder struct {
	mock *MockSaldoRepository
}

// NewMockSaldoRepository creates a new mock instance.
func NewMockSaldoRepository(ctrl *gomock.Controller) *MockSaldoRepository {
	mock := &MockSaldoRepository{ctrl: ctrl}
	mock.recorder = &MockSaldoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaldoRepository) EXPECT() *MockSaldoRepositoryMockRecorder {
	return m.recorder
}

// CreateSaldo mocks base method.
func (m *MockSaldoRepository) CreateSaldo(request *requests.CreateSaldoRequest) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSaldo", request)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSaldo indicates an expected call of CreateSaldo.
func (mr *MockSaldoRepositoryMockRecorder) CreateSaldo(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSaldo", reflect.TypeOf((*MockSaldoRepository)(nil).CreateSaldo), request)
}

// DeleteAllSaldoPermanent mocks base method.
func (m *MockSaldoRepository) DeleteAllSaldoPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSaldoPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSaldoPermanent indicates an expected call of DeleteAllSaldoPermanent.
func (mr *MockSaldoRepositoryMockRecorder) DeleteAllSaldoPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSaldoPermanent", reflect.TypeOf((*MockSaldoRepository)(nil).DeleteAllSaldoPermanent))
}

// DeleteSaldoPermanent mocks base method.
func (m *MockSaldoRepository) DeleteSaldoPermanent(saldo_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSaldoPermanent", saldo_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSaldoPermanent indicates an expected call of DeleteSaldoPermanent.
func (mr *MockSaldoRepositoryMockRecorder) DeleteSaldoPermanent(saldo_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSaldoPermanent", reflect.TypeOf((*MockSaldoRepository)(nil).DeleteSaldoPermanent), saldo_id)
}

// FindAllSaldos mocks base method.
func (m *MockSaldoRepository) FindAllSaldos(req *requests.FindAllSaldos) ([]*record.SaldoRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllSaldos", req)
	ret0, _ := ret[0].([]*record.SaldoRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllSaldos indicates an expected call of FindAllSaldos.
func (mr *MockSaldoRepositoryMockRecorder) FindAllSaldos(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllSaldos", reflect.TypeOf((*MockSaldoRepository)(nil).FindAllSaldos), req)
}

// FindByActive mocks base method.
func (m *MockSaldoRepository) FindByActive(req *requests.FindAllSaldos) ([]*record.SaldoRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", req)
	ret0, _ := ret[0].([]*record.SaldoRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockSaldoRepositoryMockRecorder) FindByActive(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockSaldoRepository)(nil).FindByActive), req)
}

// FindByCardNumber mocks base method.
func (m *MockSaldoRepository) FindByCardNumber(card_number string) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCardNumber", card_number)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCardNumber indicates an expected call of FindByCardNumber.
func (mr *MockSaldoRepositoryMockRecorder) FindByCardNumber(card_number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCardNumber", reflect.TypeOf((*MockSaldoRepository)(nil).FindByCardNumber), card_number)
}

// FindById mocks base method.
func (m *MockSaldoRepository) FindById(saldo_id int) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", saldo_id)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockSaldoRepositoryMockRecorder) FindById(saldo_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockSaldoRepository)(nil).FindById), saldo_id)
}

// FindByTrashed mocks base method.
func (m *MockSaldoRepository) FindByTrashed(req *requests.FindAllSaldos) ([]*record.SaldoRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", req)
	ret0, _ := ret[0].([]*record.SaldoRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockSaldoRepositoryMockRecorder) FindByTrashed(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockSaldoRepository)(nil).FindByTrashed), req)
}

// GetMonthlySaldoBalances mocks base method.
func (m *MockSaldoRepository) GetMonthlySaldoBalances(year int) ([]*record.SaldoMonthSaldoBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlySaldoBalances", year)
	ret0, _ := ret[0].([]*record.SaldoMonthSaldoBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlySaldoBalances indicates an expected call of GetMonthlySaldoBalances.
func (mr *MockSaldoRepositoryMockRecorder) GetMonthlySaldoBalances(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlySaldoBalances", reflect.TypeOf((*MockSaldoRepository)(nil).GetMonthlySaldoBalances), year)
}

// GetMonthlyTotalSaldoBalance mocks base method.
func (m *MockSaldoRepository) GetMonthlyTotalSaldoBalance(req *requests.MonthTotalSaldoBalance) ([]*record.SaldoMonthTotalBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTotalSaldoBalance", req)
	ret0, _ := ret[0].([]*record.SaldoMonthTotalBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTotalSaldoBalance indicates an expected call of GetMonthlyTotalSaldoBalance.
func (mr *MockSaldoRepositoryMockRecorder) GetMonthlyTotalSaldoBalance(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTotalSaldoBalance", reflect.TypeOf((*MockSaldoRepository)(nil).GetMonthlyTotalSaldoBalance), req)
}

// GetYearTotalSaldoBalance mocks base method.
func (m *MockSaldoRepository) GetYearTotalSaldoBalance(year int) ([]*record.SaldoYearTotalBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearTotalSaldoBalance", year)
	ret0, _ := ret[0].([]*record.SaldoYearTotalBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearTotalSaldoBalance indicates an expected call of GetYearTotalSaldoBalance.
func (mr *MockSaldoRepositoryMockRecorder) GetYearTotalSaldoBalance(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearTotalSaldoBalance", reflect.TypeOf((*MockSaldoRepository)(nil).GetYearTotalSaldoBalance), year)
}

// GetYearlySaldoBalances mocks base method.
func (m *MockSaldoRepository) GetYearlySaldoBalances(year int) ([]*record.SaldoYearSaldoBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlySaldoBalances", year)
	ret0, _ := ret[0].([]*record.SaldoYearSaldoBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlySaldoBalances indicates an expected call of GetYearlySaldoBalances.
func (mr *MockSaldoRepositoryMockRecorder) GetYearlySaldoBalances(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlySaldoBalances", reflect.TypeOf((*MockSaldoRepository)(nil).GetYearlySaldoBalances), year)
}

// RestoreAllSaldo mocks base method.
func (m *MockSaldoRepository) RestoreAllSaldo() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllSaldo")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllSaldo indicates an expected call of RestoreAllSaldo.
func (mr *MockSaldoRepositoryMockRecorder) RestoreAllSaldo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllSaldo", reflect.TypeOf((*MockSaldoRepository)(nil).RestoreAllSaldo))
}

// RestoreSaldo mocks base method.
func (m *MockSaldoRepository) RestoreSaldo(saldoID int) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreSaldo", saldoID)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreSaldo indicates an expected call of RestoreSaldo.
func (mr *MockSaldoRepositoryMockRecorder) RestoreSaldo(saldoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSaldo", reflect.TypeOf((*MockSaldoRepository)(nil).RestoreSaldo), saldoID)
}

// TrashedSaldo mocks base method.
func (m *MockSaldoRepository) TrashedSaldo(saldoID int) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedSaldo", saldoID)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedSaldo indicates an expected call of TrashedSaldo.
func (mr *MockSaldoRepositoryMockRecorder) TrashedSaldo(saldoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedSaldo", reflect.TypeOf((*MockSaldoRepository)(nil).TrashedSaldo), saldoID)
}

// UpdateSaldo mocks base method.
func (m *MockSaldoRepository) UpdateSaldo(request *requests.UpdateSaldoRequest) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSaldo", request)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSaldo indicates an expected call of UpdateSaldo.
func (mr *MockSaldoRepositoryMockRecorder) UpdateSaldo(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSaldo", reflect.TypeOf((*MockSaldoRepository)(nil).UpdateSaldo), request)
}

// UpdateSaldoBalance mocks base method.
func (m *MockSaldoRepository) UpdateSaldoBalance(request *requests.UpdateSaldoBalance) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSaldoBalance", request)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSaldoBalance indicates an expected call of UpdateSaldoBalance.
func (mr *MockSaldoRepositoryMockRecorder) UpdateSaldoBalance(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSaldoBalance", reflect.TypeOf((*MockSaldoRepository)(nil).UpdateSaldoBalance), request)
}

// UpdateSaldoWithdraw mocks base method.
func (m *MockSaldoRepository) UpdateSaldoWithdraw(request *requests.UpdateSaldoWithdraw) (*record.SaldoRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSaldoWithdraw", request)
	ret0, _ := ret[0].(*record.SaldoRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSaldoWithdraw indicates an expected call of UpdateSaldoWithdraw.
func (mr *MockSaldoRepositoryMockRecorder) UpdateSaldoWithdraw(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSaldoWithdraw", reflect.TypeOf((*MockSaldoRepository)(nil).UpdateSaldoWithdraw), request)
}

// MockTopupRepository is a mock of TopupRepository interface.
type MockTopupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTopupRepositoryMockRecorder
	isgomock struct{}
}

// MockTopupRepositoryMockRecorder is the mock recorder for MockTopupRepository.
type MockTopupRepositoryMockRecorder struct {
	mock *MockTopupRepository
}

// NewMockTopupRepository creates a new mock instance.
func NewMockTopupRepository(ctrl *gomock.Controller) *MockTopupRepository {
	mock := &MockTopupRepository{ctrl: ctrl}
	mock.recorder = &MockTopupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopupRepository) EXPECT() *MockTopupRepositoryMockRecorder {
	return m.recorder
}

// CreateTopup mocks base method.
func (m *MockTopupRepository) CreateTopup(request *requests.CreateTopupRequest) (*record.TopupRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopup", request)
	ret0, _ := ret[0].(*record.TopupRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopup indicates an expected call of CreateTopup.
func (mr *MockTopupRepositoryMockRecorder) CreateTopup(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopup", reflect.TypeOf((*MockTopupRepository)(nil).CreateTopup), request)
}

// DeleteAllTopupPermanent mocks base method.
func (m *MockTopupRepository) DeleteAllTopupPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllTopupPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllTopupPermanent indicates an expected call of DeleteAllTopupPermanent.
func (mr *MockTopupRepositoryMockRecorder) DeleteAllTopupPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTopupPermanent", reflect.TypeOf((*MockTopupRepository)(nil).DeleteAllTopupPermanent))
}

// DeleteTopupPermanent mocks base method.
func (m *MockTopupRepository) DeleteTopupPermanent(topup_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopupPermanent", topup_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopupPermanent indicates an expected call of DeleteTopupPermanent.
func (mr *MockTopupRepositoryMockRecorder) DeleteTopupPermanent(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopupPermanent", reflect.TypeOf((*MockTopupRepository)(nil).DeleteTopupPermanent), topup_id)
}

// FindAllTopupByCardNumber mocks base method.
func (m *MockTopupRepository) FindAllTopupByCardNumber(req *requests.FindAllTopupsByCardNumber) ([]*record.TopupRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTopupByCardNumber", req)
	ret0, _ := ret[0].([]*record.TopupRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllTopupByCardNumber indicates an expected call of FindAllTopupByCardNumber.
func (mr *MockTopupRepositoryMockRecorder) FindAllTopupByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTopupByCardNumber", reflect.TypeOf((*MockTopupRepository)(nil).FindAllTopupByCardNumber), req)
}

// FindAllTopups mocks base method.
func (m *MockTopupRepository) FindAllTopups(req *requests.FindAllTopups) ([]*record.TopupRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTopups", req)
	ret0, _ := ret[0].([]*record.TopupRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllTopups indicates an expected call of FindAllTopups.
func (mr *MockTopupRepositoryMockRecorder) FindAllTopups(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTopups", reflect.TypeOf((*MockTopupRepository)(nil).FindAllTopups), req)
}

// FindByActive mocks base method.
func (m *MockTopupRepository) FindByActive(req *requests.FindAllTopups) ([]*record.TopupRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", req)
	ret0, _ := ret[0].([]*record.TopupRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockTopupRepositoryMockRecorder) FindByActive(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockTopupRepository)(nil).FindByActive), req)
}

// FindById mocks base method.
func (m *MockTopupRepository) FindById(topup_id int) (*record.TopupRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", topup_id)
	ret0, _ := ret[0].(*record.TopupRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTopupRepositoryMockRecorder) FindById(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTopupRepository)(nil).FindById), topup_id)
}

// FindByTrashed mocks base method.
func (m *MockTopupRepository) FindByTrashed(req *requests.FindAllTopups) ([]*record.TopupRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", req)
	ret0, _ := ret[0].([]*record.TopupRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockTopupRepositoryMockRecorder) FindByTrashed(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockTopupRepository)(nil).FindByTrashed), req)
}

// GetMonthTopupStatusFailed mocks base method.
func (m *MockTopupRepository) GetMonthTopupStatusFailed(req *requests.MonthTopupStatus) ([]*record.TopupRecordMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthTopupStatusFailed", req)
	ret0, _ := ret[0].([]*record.TopupRecordMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthTopupStatusFailed indicates an expected call of GetMonthTopupStatusFailed.
func (mr *MockTopupRepositoryMockRecorder) GetMonthTopupStatusFailed(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthTopupStatusFailed", reflect.TypeOf((*MockTopupRepository)(nil).GetMonthTopupStatusFailed), req)
}

// GetMonthTopupStatusFailedByCardNumber mocks base method.
func (m *MockTopupRepository) GetMonthTopupStatusFailedByCardNumber(req *requests.MonthTopupStatusCardNumber) ([]*record.TopupRecordMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthTopupStatusFailedByCardNumber", req)
	ret0, _ := ret[0].([]*record.TopupRecordMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthTopupStatusFailedByCardNumber indicates an expected call of GetMonthTopupStatusFailedByCardNumber.
func (mr *MockTopupRepositoryMockRecorder) GetMonthTopupStatusFailedByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthTopupStatusFailedByCardNumber", reflect.TypeOf((*MockTopupRepository)(nil).GetMonthTopupStatusFailedByCardNumber), req)
}

// GetMonthTopupStatusSuccess mocks base method.
func (m *MockTopupRepository) GetMonthTopupStatusSuccess(req *requests.MonthTopupStatus) ([]*record.TopupRecordMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthTopupStatusSuccess", req)
	ret0, _ := ret[0].([]*record.TopupRecordMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthTopupStatusSuccess indicates an expected call of GetMonthTopupStatusSuccess.
func (mr *MockTopupRepositoryMockRecorder) GetMonthTopupStatusSuccess(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthTopupStatusSuccess", reflect.TypeOf((*MockTopupRepository)(nil).GetMonthTopupStatusSuccess), req)
}

// GetMonthTopupStatusSuccessByCardNumber mocks base method.
func (m *MockTopupRepository) GetMonthTopupStatusSuccessByCardNumber(req *requests.MonthTopupStatusCardNumber) ([]*record.TopupRecordMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthTopupStatusSuccessByCardNumber", req)
	ret0, _ := ret[0].([]*record.TopupRecordMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthTopupStatusSuccessByCardNumber indicates an expected call of GetMonthTopupStatusSuccessByCardNumber.
func (mr *MockTopupRepositoryMockRecorder) GetMonthTopupStatusSuccessByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthTopupStatusSuccessByCardNumber", reflect.TypeOf((*MockTopupRepository)(nil).GetMonthTopupStatusSuccessByCardNumber), req)
}

// GetMonthlyTopupAmounts mocks base method.
func (m *MockTopupRepository) GetMonthlyTopupAmounts(year int) ([]*record.TopupMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTopupAmounts", year)
	ret0, _ := ret[0].([]*record.TopupMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTopupAmounts indicates an expected call of GetMonthlyTopupAmounts.
func (mr *MockTopupRepositoryMockRecorder) GetMonthlyTopupAmounts(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTopupAmounts", reflect.TypeOf((*MockTopupRepository)(nil).GetMonthlyTopupAmounts), year)
}

// GetMonthlyTopupAmountsByCardNumber mocks base method.
func (m *MockTopupRepository) GetMonthlyTopupAmountsByCardNumber(req *requests.YearMonthMethod) ([]*record.TopupMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTopupAmountsByCardNumber", req)
	ret0, _ := ret[0].([]*record.TopupMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTopupAmountsByCardNumber indicates an expected call of GetMonthlyTopupAmountsByCardNumber.
func (mr *MockTopupRepositoryMockRecorder) GetMonthlyTopupAmountsByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTopupAmountsByCardNumber", reflect.TypeOf((*MockTopupRepository)(nil).GetMonthlyTopupAmountsByCardNumber), req)
}

// GetMonthlyTopupMethods mocks base method.
func (m *MockTopupRepository) GetMonthlyTopupMethods(year int) ([]*record.TopupMonthMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTopupMethods", year)
	ret0, _ := ret[0].([]*record.TopupMonthMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTopupMethods indicates an expected call of GetMonthlyTopupMethods.
func (mr *MockTopupRepositoryMockRecorder) GetMonthlyTopupMethods(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTopupMethods", reflect.TypeOf((*MockTopupRepository)(nil).GetMonthlyTopupMethods), year)
}

// GetMonthlyTopupMethodsByCardNumber mocks base method.
func (m *MockTopupRepository) GetMonthlyTopupMethodsByCardNumber(req *requests.YearMonthMethod) ([]*record.TopupMonthMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTopupMethodsByCardNumber", req)
	ret0, _ := ret[0].([]*record.TopupMonthMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTopupMethodsByCardNumber indicates an expected call of GetMonthlyTopupMethodsByCardNumber.
func (mr *MockTopupRepositoryMockRecorder) GetMonthlyTopupMethodsByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTopupMethodsByCardNumber", reflect.TypeOf((*MockTopupRepository)(nil).GetMonthlyTopupMethodsByCardNumber), req)
}

// GetYearlyTopupAmounts mocks base method.
func (m *MockTopupRepository) GetYearlyTopupAmounts(year int) ([]*record.TopupYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTopupAmounts", year)
	ret0, _ := ret[0].([]*record.TopupYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTopupAmounts indicates an expected call of GetYearlyTopupAmounts.
func (mr *MockTopupRepositoryMockRecorder) GetYearlyTopupAmounts(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTopupAmounts", reflect.TypeOf((*MockTopupRepository)(nil).GetYearlyTopupAmounts), year)
}

// GetYearlyTopupAmountsByCardNumber mocks base method.
func (m *MockTopupRepository) GetYearlyTopupAmountsByCardNumber(req *requests.YearMonthMethod) ([]*record.TopupYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTopupAmountsByCardNumber", req)
	ret0, _ := ret[0].([]*record.TopupYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTopupAmountsByCardNumber indicates an expected call of GetYearlyTopupAmountsByCardNumber.
func (mr *MockTopupRepositoryMockRecorder) GetYearlyTopupAmountsByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTopupAmountsByCardNumber", reflect.TypeOf((*MockTopupRepository)(nil).GetYearlyTopupAmountsByCardNumber), req)
}

// GetYearlyTopupMethods mocks base method.
func (m *MockTopupRepository) GetYearlyTopupMethods(year int) ([]*record.TopupYearlyMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTopupMethods", year)
	ret0, _ := ret[0].([]*record.TopupYearlyMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTopupMethods indicates an expected call of GetYearlyTopupMethods.
func (mr *MockTopupRepositoryMockRecorder) GetYearlyTopupMethods(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTopupMethods", reflect.TypeOf((*MockTopupRepository)(nil).GetYearlyTopupMethods), year)
}

// GetYearlyTopupMethodsByCardNumber mocks base method.
func (m *MockTopupRepository) GetYearlyTopupMethodsByCardNumber(req *requests.YearMonthMethod) ([]*record.TopupYearlyMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTopupMethodsByCardNumber", req)
	ret0, _ := ret[0].([]*record.TopupYearlyMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTopupMethodsByCardNumber indicates an expected call of GetYearlyTopupMethodsByCardNumber.
func (mr *MockTopupRepositoryMockRecorder) GetYearlyTopupMethodsByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTopupMethodsByCardNumber", reflect.TypeOf((*MockTopupRepository)(nil).GetYearlyTopupMethodsByCardNumber), req)
}

// GetYearlyTopupStatusFailed mocks base method.
func (m *MockTopupRepository) GetYearlyTopupStatusFailed(year int) ([]*record.TopupRecordYearStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTopupStatusFailed", year)
	ret0, _ := ret[0].([]*record.TopupRecordYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTopupStatusFailed indicates an expected call of GetYearlyTopupStatusFailed.
func (mr *MockTopupRepositoryMockRecorder) GetYearlyTopupStatusFailed(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTopupStatusFailed", reflect.TypeOf((*MockTopupRepository)(nil).GetYearlyTopupStatusFailed), year)
}

// GetYearlyTopupStatusFailedByCardNumber mocks base method.
func (m *MockTopupRepository) GetYearlyTopupStatusFailedByCardNumber(req *requests.YearTopupStatusCardNumber) ([]*record.TopupRecordYearStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTopupStatusFailedByCardNumber", req)
	ret0, _ := ret[0].([]*record.TopupRecordYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTopupStatusFailedByCardNumber indicates an expected call of GetYearlyTopupStatusFailedByCardNumber.
func (mr *MockTopupRepositoryMockRecorder) GetYearlyTopupStatusFailedByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTopupStatusFailedByCardNumber", reflect.TypeOf((*MockTopupRepository)(nil).GetYearlyTopupStatusFailedByCardNumber), req)
}

// GetYearlyTopupStatusSuccess mocks base method.
func (m *MockTopupRepository) GetYearlyTopupStatusSuccess(year int) ([]*record.TopupRecordYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTopupStatusSuccess", year)
	ret0, _ := ret[0].([]*record.TopupRecordYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTopupStatusSuccess indicates an expected call of GetYearlyTopupStatusSuccess.
func (mr *MockTopupRepositoryMockRecorder) GetYearlyTopupStatusSuccess(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTopupStatusSuccess", reflect.TypeOf((*MockTopupRepository)(nil).GetYearlyTopupStatusSuccess), year)
}

// GetYearlyTopupStatusSuccessByCardNumber mocks base method.
func (m *MockTopupRepository) GetYearlyTopupStatusSuccessByCardNumber(req *requests.YearTopupStatusCardNumber) ([]*record.TopupRecordYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTopupStatusSuccessByCardNumber", req)
	ret0, _ := ret[0].([]*record.TopupRecordYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTopupStatusSuccessByCardNumber indicates an expected call of GetYearlyTopupStatusSuccessByCardNumber.
func (mr *MockTopupRepositoryMockRecorder) GetYearlyTopupStatusSuccessByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTopupStatusSuccessByCardNumber", reflect.TypeOf((*MockTopupRepository)(nil).GetYearlyTopupStatusSuccessByCardNumber), req)
}

// RestoreAllTopup mocks base method.
func (m *MockTopupRepository) RestoreAllTopup() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllTopup")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllTopup indicates an expected call of RestoreAllTopup.
func (mr *MockTopupRepositoryMockRecorder) RestoreAllTopup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllTopup", reflect.TypeOf((*MockTopupRepository)(nil).RestoreAllTopup))
}

// RestoreTopup mocks base method.
func (m *MockTopupRepository) RestoreTopup(topup_id int) (*record.TopupRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTopup", topup_id)
	ret0, _ := ret[0].(*record.TopupRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTopup indicates an expected call of RestoreTopup.
func (mr *MockTopupRepositoryMockRecorder) RestoreTopup(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTopup", reflect.TypeOf((*MockTopupRepository)(nil).RestoreTopup), topup_id)
}

// TrashedTopup mocks base method.
func (m *MockTopupRepository) TrashedTopup(topup_id int) (*record.TopupRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedTopup", topup_id)
	ret0, _ := ret[0].(*record.TopupRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedTopup indicates an expected call of TrashedTopup.
func (mr *MockTopupRepositoryMockRecorder) TrashedTopup(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTopup", reflect.TypeOf((*MockTopupRepository)(nil).TrashedTopup), topup_id)
}

// UpdateTopup mocks base method.
func (m *MockTopupRepository) UpdateTopup(request *requests.UpdateTopupRequest) (*record.TopupRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopup", request)
	ret0, _ := ret[0].(*record.TopupRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTopup indicates an expected call of UpdateTopup.
func (mr *MockTopupRepositoryMockRecorder) UpdateTopup(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopup", reflect.TypeOf((*MockTopupRepository)(nil).UpdateTopup), request)
}

// UpdateTopupAmount mocks base method.
func (m *MockTopupRepository) UpdateTopupAmount(request *requests.UpdateTopupAmount) (*record.TopupRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopupAmount", request)
	ret0, _ := ret[0].(*record.TopupRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTopupAmount indicates an expected call of UpdateTopupAmount.
func (mr *MockTopupRepositoryMockRecorder) UpdateTopupAmount(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopupAmount", reflect.TypeOf((*MockTopupRepository)(nil).UpdateTopupAmount), request)
}

// UpdateTopupStatus mocks base method.
func (m *MockTopupRepository) UpdateTopupStatus(request *requests.UpdateTopupStatus) (*record.TopupRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopupStatus", request)
	ret0, _ := ret[0].(*record.TopupRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTopupStatus indicates an expected call of UpdateTopupStatus.
func (mr *MockTopupRepositoryMockRecorder) UpdateTopupStatus(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopupStatus", reflect.TypeOf((*MockTopupRepository)(nil).UpdateTopupStatus), request)
}

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
	isgomock struct{}
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionRepository) CreateTransaction(request *requests.CreateTransactionRequest) (*record.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", request)
	ret0, _ := ret[0].(*record.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionRepositoryMockRecorder) CreateTransaction(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).CreateTransaction), request)
}

// DeleteAllTransactionPermanent mocks base method.
func (m *MockTransactionRepository) DeleteAllTransactionPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllTransactionPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllTransactionPermanent indicates an expected call of DeleteAllTransactionPermanent.
func (mr *MockTransactionRepositoryMockRecorder) DeleteAllTransactionPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTransactionPermanent", reflect.TypeOf((*MockTransactionRepository)(nil).DeleteAllTransactionPermanent))
}

// DeleteTransactionPermanent mocks base method.
func (m *MockTransactionRepository) DeleteTransactionPermanent(topup_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransactionPermanent", topup_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransactionPermanent indicates an expected call of DeleteTransactionPermanent.
func (mr *MockTransactionRepositoryMockRecorder) DeleteTransactionPermanent(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransactionPermanent", reflect.TypeOf((*MockTransactionRepository)(nil).DeleteTransactionPermanent), topup_id)
}

// FindAllTransactionByCardNumber mocks base method.
func (m *MockTransactionRepository) FindAllTransactionByCardNumber(req *requests.FindAllTransactionCardNumber) ([]*record.TransactionRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTransactionByCardNumber", req)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllTransactionByCardNumber indicates an expected call of FindAllTransactionByCardNumber.
func (mr *MockTransactionRepositoryMockRecorder) FindAllTransactionByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransactionByCardNumber", reflect.TypeOf((*MockTransactionRepository)(nil).FindAllTransactionByCardNumber), req)
}

// FindAllTransactions mocks base method.
func (m *MockTransactionRepository) FindAllTransactions(req *requests.FindAllTransactions) ([]*record.TransactionRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTransactions", req)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllTransactions indicates an expected call of FindAllTransactions.
func (mr *MockTransactionRepositoryMockRecorder) FindAllTransactions(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTransactions", reflect.TypeOf((*MockTransactionRepository)(nil).FindAllTransactions), req)
}

// FindByActive mocks base method.
func (m *MockTransactionRepository) FindByActive(req *requests.FindAllTransactions) ([]*record.TransactionRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", req)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockTransactionRepositoryMockRecorder) FindByActive(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockTransactionRepository)(nil).FindByActive), req)
}

// FindById mocks base method.
func (m *MockTransactionRepository) FindById(transaction_id int) (*record.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", transaction_id)
	ret0, _ := ret[0].(*record.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTransactionRepositoryMockRecorder) FindById(transaction_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTransactionRepository)(nil).FindById), transaction_id)
}

// FindByTrashed mocks base method.
func (m *MockTransactionRepository) FindByTrashed(req *requests.FindAllTransactions) ([]*record.TransactionRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", req)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockTransactionRepositoryMockRecorder) FindByTrashed(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockTransactionRepository)(nil).FindByTrashed), req)
}

// FindTransactionByMerchantId mocks base method.
func (m *MockTransactionRepository) FindTransactionByMerchantId(merchant_id int) ([]*record.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransactionByMerchantId", merchant_id)
	ret0, _ := ret[0].([]*record.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransactionByMerchantId indicates an expected call of FindTransactionByMerchantId.
func (mr *MockTransactionRepositoryMockRecorder) FindTransactionByMerchantId(merchant_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransactionByMerchantId", reflect.TypeOf((*MockTransactionRepository)(nil).FindTransactionByMerchantId), merchant_id)
}

// GetMonthTransactionStatusFailed mocks base method.
func (m *MockTransactionRepository) GetMonthTransactionStatusFailed(req *requests.MonthStatusTransaction) ([]*record.TransactionRecordMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthTransactionStatusFailed", req)
	ret0, _ := ret[0].([]*record.TransactionRecordMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthTransactionStatusFailed indicates an expected call of GetMonthTransactionStatusFailed.
func (mr *MockTransactionRepositoryMockRecorder) GetMonthTransactionStatusFailed(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthTransactionStatusFailed", reflect.TypeOf((*MockTransactionRepository)(nil).GetMonthTransactionStatusFailed), req)
}

// GetMonthTransactionStatusFailedByCardNumber mocks base method.
func (m *MockTransactionRepository) GetMonthTransactionStatusFailedByCardNumber(req *requests.MonthStatusTransactionCardNumber) ([]*record.TransactionRecordMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthTransactionStatusFailedByCardNumber", req)
	ret0, _ := ret[0].([]*record.TransactionRecordMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthTransactionStatusFailedByCardNumber indicates an expected call of GetMonthTransactionStatusFailedByCardNumber.
func (mr *MockTransactionRepositoryMockRecorder) GetMonthTransactionStatusFailedByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthTransactionStatusFailedByCardNumber", reflect.TypeOf((*MockTransactionRepository)(nil).GetMonthTransactionStatusFailedByCardNumber), req)
}

// GetMonthTransactionStatusSuccess mocks base method.
func (m *MockTransactionRepository) GetMonthTransactionStatusSuccess(req *requests.MonthStatusTransaction) ([]*record.TransactionRecordMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthTransactionStatusSuccess", req)
	ret0, _ := ret[0].([]*record.TransactionRecordMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthTransactionStatusSuccess indicates an expected call of GetMonthTransactionStatusSuccess.
func (mr *MockTransactionRepositoryMockRecorder) GetMonthTransactionStatusSuccess(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthTransactionStatusSuccess", reflect.TypeOf((*MockTransactionRepository)(nil).GetMonthTransactionStatusSuccess), req)
}

// GetMonthTransactionStatusSuccessByCardNumber mocks base method.
func (m *MockTransactionRepository) GetMonthTransactionStatusSuccessByCardNumber(req *requests.MonthStatusTransactionCardNumber) ([]*record.TransactionRecordMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthTransactionStatusSuccessByCardNumber", req)
	ret0, _ := ret[0].([]*record.TransactionRecordMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthTransactionStatusSuccessByCardNumber indicates an expected call of GetMonthTransactionStatusSuccessByCardNumber.
func (mr *MockTransactionRepositoryMockRecorder) GetMonthTransactionStatusSuccessByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthTransactionStatusSuccessByCardNumber", reflect.TypeOf((*MockTransactionRepository)(nil).GetMonthTransactionStatusSuccessByCardNumber), req)
}

// GetMonthlyAmounts mocks base method.
func (m *MockTransactionRepository) GetMonthlyAmounts(year int) ([]*record.TransactionMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyAmounts", year)
	ret0, _ := ret[0].([]*record.TransactionMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyAmounts indicates an expected call of GetMonthlyAmounts.
func (mr *MockTransactionRepositoryMockRecorder) GetMonthlyAmounts(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyAmounts", reflect.TypeOf((*MockTransactionRepository)(nil).GetMonthlyAmounts), year)
}

// GetMonthlyAmountsByCardNumber mocks base method.
func (m *MockTransactionRepository) GetMonthlyAmountsByCardNumber(req *requests.MonthYearPaymentMethod) ([]*record.TransactionMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyAmountsByCardNumber", req)
	ret0, _ := ret[0].([]*record.TransactionMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyAmountsByCardNumber indicates an expected call of GetMonthlyAmountsByCardNumber.
func (mr *MockTransactionRepositoryMockRecorder) GetMonthlyAmountsByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyAmountsByCardNumber", reflect.TypeOf((*MockTransactionRepository)(nil).GetMonthlyAmountsByCardNumber), req)
}

// GetMonthlyPaymentMethods mocks base method.
func (m *MockTransactionRepository) GetMonthlyPaymentMethods(year int) ([]*record.TransactionMonthMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyPaymentMethods", year)
	ret0, _ := ret[0].([]*record.TransactionMonthMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyPaymentMethods indicates an expected call of GetMonthlyPaymentMethods.
func (mr *MockTransactionRepositoryMockRecorder) GetMonthlyPaymentMethods(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyPaymentMethods", reflect.TypeOf((*MockTransactionRepository)(nil).GetMonthlyPaymentMethods), year)
}

// GetMonthlyPaymentMethodsByCardNumber mocks base method.
func (m *MockTransactionRepository) GetMonthlyPaymentMethodsByCardNumber(req *requests.MonthYearPaymentMethod) ([]*record.TransactionMonthMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyPaymentMethodsByCardNumber", req)
	ret0, _ := ret[0].([]*record.TransactionMonthMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyPaymentMethodsByCardNumber indicates an expected call of GetMonthlyPaymentMethodsByCardNumber.
func (mr *MockTransactionRepositoryMockRecorder) GetMonthlyPaymentMethodsByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyPaymentMethodsByCardNumber", reflect.TypeOf((*MockTransactionRepository)(nil).GetMonthlyPaymentMethodsByCardNumber), req)
}

// GetYearlyAmounts mocks base method.
func (m *MockTransactionRepository) GetYearlyAmounts(year int) ([]*record.TransactionYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyAmounts", year)
	ret0, _ := ret[0].([]*record.TransactionYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyAmounts indicates an expected call of GetYearlyAmounts.
func (mr *MockTransactionRepositoryMockRecorder) GetYearlyAmounts(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyAmounts", reflect.TypeOf((*MockTransactionRepository)(nil).GetYearlyAmounts), year)
}

// GetYearlyAmountsByCardNumber mocks base method.
func (m *MockTransactionRepository) GetYearlyAmountsByCardNumber(req *requests.MonthYearPaymentMethod) ([]*record.TransactionYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyAmountsByCardNumber", req)
	ret0, _ := ret[0].([]*record.TransactionYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyAmountsByCardNumber indicates an expected call of GetYearlyAmountsByCardNumber.
func (mr *MockTransactionRepositoryMockRecorder) GetYearlyAmountsByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyAmountsByCardNumber", reflect.TypeOf((*MockTransactionRepository)(nil).GetYearlyAmountsByCardNumber), req)
}

// GetYearlyPaymentMethods mocks base method.
func (m *MockTransactionRepository) GetYearlyPaymentMethods(year int) ([]*record.TransactionYearMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyPaymentMethods", year)
	ret0, _ := ret[0].([]*record.TransactionYearMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyPaymentMethods indicates an expected call of GetYearlyPaymentMethods.
func (mr *MockTransactionRepositoryMockRecorder) GetYearlyPaymentMethods(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyPaymentMethods", reflect.TypeOf((*MockTransactionRepository)(nil).GetYearlyPaymentMethods), year)
}

// GetYearlyPaymentMethodsByCardNumber mocks base method.
func (m *MockTransactionRepository) GetYearlyPaymentMethodsByCardNumber(req *requests.MonthYearPaymentMethod) ([]*record.TransactionYearMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyPaymentMethodsByCardNumber", req)
	ret0, _ := ret[0].([]*record.TransactionYearMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyPaymentMethodsByCardNumber indicates an expected call of GetYearlyPaymentMethodsByCardNumber.
func (mr *MockTransactionRepositoryMockRecorder) GetYearlyPaymentMethodsByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyPaymentMethodsByCardNumber", reflect.TypeOf((*MockTransactionRepository)(nil).GetYearlyPaymentMethodsByCardNumber), req)
}

// GetYearlyTransactionStatusFailed mocks base method.
func (m *MockTransactionRepository) GetYearlyTransactionStatusFailed(year int) ([]*record.TransactionRecordYearStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransactionStatusFailed", year)
	ret0, _ := ret[0].([]*record.TransactionRecordYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransactionStatusFailed indicates an expected call of GetYearlyTransactionStatusFailed.
func (mr *MockTransactionRepositoryMockRecorder) GetYearlyTransactionStatusFailed(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransactionStatusFailed", reflect.TypeOf((*MockTransactionRepository)(nil).GetYearlyTransactionStatusFailed), year)
}

// GetYearlyTransactionStatusFailedByCardNumber mocks base method.
func (m *MockTransactionRepository) GetYearlyTransactionStatusFailedByCardNumber(req *requests.YearStatusTransactionCardNumber) ([]*record.TransactionRecordYearStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransactionStatusFailedByCardNumber", req)
	ret0, _ := ret[0].([]*record.TransactionRecordYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransactionStatusFailedByCardNumber indicates an expected call of GetYearlyTransactionStatusFailedByCardNumber.
func (mr *MockTransactionRepositoryMockRecorder) GetYearlyTransactionStatusFailedByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransactionStatusFailedByCardNumber", reflect.TypeOf((*MockTransactionRepository)(nil).GetYearlyTransactionStatusFailedByCardNumber), req)
}

// GetYearlyTransactionStatusSuccess mocks base method.
func (m *MockTransactionRepository) GetYearlyTransactionStatusSuccess(year int) ([]*record.TransactionRecordYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransactionStatusSuccess", year)
	ret0, _ := ret[0].([]*record.TransactionRecordYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransactionStatusSuccess indicates an expected call of GetYearlyTransactionStatusSuccess.
func (mr *MockTransactionRepositoryMockRecorder) GetYearlyTransactionStatusSuccess(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransactionStatusSuccess", reflect.TypeOf((*MockTransactionRepository)(nil).GetYearlyTransactionStatusSuccess), year)
}

// GetYearlyTransactionStatusSuccessByCardNumber mocks base method.
func (m *MockTransactionRepository) GetYearlyTransactionStatusSuccessByCardNumber(req *requests.YearStatusTransactionCardNumber) ([]*record.TransactionRecordYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransactionStatusSuccessByCardNumber", req)
	ret0, _ := ret[0].([]*record.TransactionRecordYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransactionStatusSuccessByCardNumber indicates an expected call of GetYearlyTransactionStatusSuccessByCardNumber.
func (mr *MockTransactionRepositoryMockRecorder) GetYearlyTransactionStatusSuccessByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransactionStatusSuccessByCardNumber", reflect.TypeOf((*MockTransactionRepository)(nil).GetYearlyTransactionStatusSuccessByCardNumber), req)
}

// RestoreAllTransaction mocks base method.
func (m *MockTransactionRepository) RestoreAllTransaction() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllTransaction")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllTransaction indicates an expected call of RestoreAllTransaction.
func (mr *MockTransactionRepositoryMockRecorder) RestoreAllTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).RestoreAllTransaction))
}

// RestoreTransaction mocks base method.
func (m *MockTransactionRepository) RestoreTransaction(topup_id int) (*record.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTransaction", topup_id)
	ret0, _ := ret[0].(*record.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTransaction indicates an expected call of RestoreTransaction.
func (mr *MockTransactionRepositoryMockRecorder) RestoreTransaction(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).RestoreTransaction), topup_id)
}

// TrashedTransaction mocks base method.
func (m *MockTransactionRepository) TrashedTransaction(transaction_id int) (*record.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedTransaction", transaction_id)
	ret0, _ := ret[0].(*record.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedTransaction indicates an expected call of TrashedTransaction.
func (mr *MockTransactionRepositoryMockRecorder) TrashedTransaction(transaction_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).TrashedTransaction), transaction_id)
}

// UpdateTransaction mocks base method.
func (m *MockTransactionRepository) UpdateTransaction(request *requests.UpdateTransactionRequest) (*record.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", request)
	ret0, _ := ret[0].(*record.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockTransactionRepositoryMockRecorder) UpdateTransaction(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).UpdateTransaction), request)
}

// UpdateTransactionStatus mocks base method.
func (m *MockTransactionRepository) UpdateTransactionStatus(request *requests.UpdateTransactionStatus) (*record.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatus", request)
	ret0, _ := ret[0].(*record.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransactionStatus indicates an expected call of UpdateTransactionStatus.
func (mr *MockTransactionRepositoryMockRecorder) UpdateTransactionStatus(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatus", reflect.TypeOf((*MockTransactionRepository)(nil).UpdateTransactionStatus), request)
}

// MockTransferRepository is a mock of TransferRepository interface.
type MockTransferRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransferRepositoryMockRecorder
	isgomock struct{}
}

// MockTransferRepositoryMockRecorder is the mock recorder for MockTransferRepository.
type MockTransferRepositoryMockRecorder struct {
	mock *MockTransferRepository
}

// NewMockTransferRepository creates a new mock instance.
func NewMockTransferRepository(ctrl *gomock.Controller) *MockTransferRepository {
	mock := &MockTransferRepository{ctrl: ctrl}
	mock.recorder = &MockTransferRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferRepository) EXPECT() *MockTransferRepositoryMockRecorder {
	return m.recorder
}

// CreateTransfer mocks base method.
func (m *MockTransferRepository) CreateTransfer(request *requests.CreateTransferRequest) (*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", request)
	ret0, _ := ret[0].(*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockTransferRepositoryMockRecorder) CreateTransfer(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockTransferRepository)(nil).CreateTransfer), request)
}

// DeleteAllTransferPermanent mocks base method.
func (m *MockTransferRepository) DeleteAllTransferPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllTransferPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllTransferPermanent indicates an expected call of DeleteAllTransferPermanent.
func (mr *MockTransferRepositoryMockRecorder) DeleteAllTransferPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTransferPermanent", reflect.TypeOf((*MockTransferRepository)(nil).DeleteAllTransferPermanent))
}

// DeleteTransferPermanent mocks base method.
func (m *MockTransferRepository) DeleteTransferPermanent(topup_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransferPermanent", topup_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransferPermanent indicates an expected call of DeleteTransferPermanent.
func (mr *MockTransferRepositoryMockRecorder) DeleteTransferPermanent(topup_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransferPermanent", reflect.TypeOf((*MockTransferRepository)(nil).DeleteTransferPermanent), topup_id)
}

// FindAll mocks base method.
func (m *MockTransferRepository) FindAll(req *requests.FindAllTranfers) ([]*record.TransferRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", req)
	ret0, _ := ret[0].([]*record.TransferRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTransferRepositoryMockRecorder) FindAll(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTransferRepository)(nil).FindAll), req)
}

// FindByActive mocks base method.
func (m *MockTransferRepository) FindByActive(req *requests.FindAllTranfers) ([]*record.TransferRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", req)
	ret0, _ := ret[0].([]*record.TransferRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockTransferRepositoryMockRecorder) FindByActive(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockTransferRepository)(nil).FindByActive), req)
}

// FindById mocks base method.
func (m *MockTransferRepository) FindById(id int) (*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTransferRepositoryMockRecorder) FindById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTransferRepository)(nil).FindById), id)
}

// FindByTrashed mocks base method.
func (m *MockTransferRepository) FindByTrashed(req *requests.FindAllTranfers) ([]*record.TransferRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", req)
	ret0, _ := ret[0].([]*record.TransferRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockTransferRepositoryMockRecorder) FindByTrashed(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockTransferRepository)(nil).FindByTrashed), req)
}

// FindTransferByTransferFrom mocks base method.
func (m *MockTransferRepository) FindTransferByTransferFrom(transfer_from string) ([]*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransferByTransferFrom", transfer_from)
	ret0, _ := ret[0].([]*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransferByTransferFrom indicates an expected call of FindTransferByTransferFrom.
func (mr *MockTransferRepositoryMockRecorder) FindTransferByTransferFrom(transfer_from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransferByTransferFrom", reflect.TypeOf((*MockTransferRepository)(nil).FindTransferByTransferFrom), transfer_from)
}

// FindTransferByTransferTo mocks base method.
func (m *MockTransferRepository) FindTransferByTransferTo(transfer_to string) ([]*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransferByTransferTo", transfer_to)
	ret0, _ := ret[0].([]*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTransferByTransferTo indicates an expected call of FindTransferByTransferTo.
func (mr *MockTransferRepositoryMockRecorder) FindTransferByTransferTo(transfer_to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransferByTransferTo", reflect.TypeOf((*MockTransferRepository)(nil).FindTransferByTransferTo), transfer_to)
}

// GetMonthTransferStatusFailed mocks base method.
func (m *MockTransferRepository) GetMonthTransferStatusFailed(req *requests.MonthStatusTransfer) ([]*record.TransferRecordMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthTransferStatusFailed", req)
	ret0, _ := ret[0].([]*record.TransferRecordMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthTransferStatusFailed indicates an expected call of GetMonthTransferStatusFailed.
func (mr *MockTransferRepositoryMockRecorder) GetMonthTransferStatusFailed(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthTransferStatusFailed", reflect.TypeOf((*MockTransferRepository)(nil).GetMonthTransferStatusFailed), req)
}

// GetMonthTransferStatusFailedByCardNumber mocks base method.
func (m *MockTransferRepository) GetMonthTransferStatusFailedByCardNumber(req *requests.MonthStatusTransferCardNumber) ([]*record.TransferRecordMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthTransferStatusFailedByCardNumber", req)
	ret0, _ := ret[0].([]*record.TransferRecordMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthTransferStatusFailedByCardNumber indicates an expected call of GetMonthTransferStatusFailedByCardNumber.
func (mr *MockTransferRepositoryMockRecorder) GetMonthTransferStatusFailedByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthTransferStatusFailedByCardNumber", reflect.TypeOf((*MockTransferRepository)(nil).GetMonthTransferStatusFailedByCardNumber), req)
}

// GetMonthTransferStatusSuccess mocks base method.
func (m *MockTransferRepository) GetMonthTransferStatusSuccess(req *requests.MonthStatusTransfer) ([]*record.TransferRecordMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthTransferStatusSuccess", req)
	ret0, _ := ret[0].([]*record.TransferRecordMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthTransferStatusSuccess indicates an expected call of GetMonthTransferStatusSuccess.
func (mr *MockTransferRepositoryMockRecorder) GetMonthTransferStatusSuccess(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthTransferStatusSuccess", reflect.TypeOf((*MockTransferRepository)(nil).GetMonthTransferStatusSuccess), req)
}

// GetMonthTransferStatusSuccessByCardNumber mocks base method.
func (m *MockTransferRepository) GetMonthTransferStatusSuccessByCardNumber(req *requests.MonthStatusTransferCardNumber) ([]*record.TransferRecordMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthTransferStatusSuccessByCardNumber", req)
	ret0, _ := ret[0].([]*record.TransferRecordMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthTransferStatusSuccessByCardNumber indicates an expected call of GetMonthTransferStatusSuccessByCardNumber.
func (mr *MockTransferRepositoryMockRecorder) GetMonthTransferStatusSuccessByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthTransferStatusSuccessByCardNumber", reflect.TypeOf((*MockTransferRepository)(nil).GetMonthTransferStatusSuccessByCardNumber), req)
}

// GetMonthlyTransferAmounts mocks base method.
func (m *MockTransferRepository) GetMonthlyTransferAmounts(year int) ([]*record.TransferMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransferAmounts", year)
	ret0, _ := ret[0].([]*record.TransferMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransferAmounts indicates an expected call of GetMonthlyTransferAmounts.
func (mr *MockTransferRepositoryMockRecorder) GetMonthlyTransferAmounts(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransferAmounts", reflect.TypeOf((*MockTransferRepository)(nil).GetMonthlyTransferAmounts), year)
}

// GetMonthlyTransferAmountsByReceiverCardNumber mocks base method.
func (m *MockTransferRepository) GetMonthlyTransferAmountsByReceiverCardNumber(req *requests.MonthYearCardNumber) ([]*record.TransferMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransferAmountsByReceiverCardNumber", req)
	ret0, _ := ret[0].([]*record.TransferMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransferAmountsByReceiverCardNumber indicates an expected call of GetMonthlyTransferAmountsByReceiverCardNumber.
func (mr *MockTransferRepositoryMockRecorder) GetMonthlyTransferAmountsByReceiverCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransferAmountsByReceiverCardNumber", reflect.TypeOf((*MockTransferRepository)(nil).GetMonthlyTransferAmountsByReceiverCardNumber), req)
}

// GetMonthlyTransferAmountsBySenderCardNumber mocks base method.
func (m *MockTransferRepository) GetMonthlyTransferAmountsBySenderCardNumber(req *requests.MonthYearCardNumber) ([]*record.TransferMonthAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyTransferAmountsBySenderCardNumber", req)
	ret0, _ := ret[0].([]*record.TransferMonthAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyTransferAmountsBySenderCardNumber indicates an expected call of GetMonthlyTransferAmountsBySenderCardNumber.
func (mr *MockTransferRepositoryMockRecorder) GetMonthlyTransferAmountsBySenderCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyTransferAmountsBySenderCardNumber", reflect.TypeOf((*MockTransferRepository)(nil).GetMonthlyTransferAmountsBySenderCardNumber), req)
}

// GetYearlyTransferAmounts mocks base method.
func (m *MockTransferRepository) GetYearlyTransferAmounts(year int) ([]*record.TransferYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferAmounts", year)
	ret0, _ := ret[0].([]*record.TransferYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferAmounts indicates an expected call of GetYearlyTransferAmounts.
func (mr *MockTransferRepositoryMockRecorder) GetYearlyTransferAmounts(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferAmounts", reflect.TypeOf((*MockTransferRepository)(nil).GetYearlyTransferAmounts), year)
}

// GetYearlyTransferAmountsByReceiverCardNumber mocks base method.
func (m *MockTransferRepository) GetYearlyTransferAmountsByReceiverCardNumber(req *requests.MonthYearCardNumber) ([]*record.TransferYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferAmountsByReceiverCardNumber", req)
	ret0, _ := ret[0].([]*record.TransferYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferAmountsByReceiverCardNumber indicates an expected call of GetYearlyTransferAmountsByReceiverCardNumber.
func (mr *MockTransferRepositoryMockRecorder) GetYearlyTransferAmountsByReceiverCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferAmountsByReceiverCardNumber", reflect.TypeOf((*MockTransferRepository)(nil).GetYearlyTransferAmountsByReceiverCardNumber), req)
}

// GetYearlyTransferAmountsBySenderCardNumber mocks base method.
func (m *MockTransferRepository) GetYearlyTransferAmountsBySenderCardNumber(req *requests.MonthYearCardNumber) ([]*record.TransferYearAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferAmountsBySenderCardNumber", req)
	ret0, _ := ret[0].([]*record.TransferYearAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferAmountsBySenderCardNumber indicates an expected call of GetYearlyTransferAmountsBySenderCardNumber.
func (mr *MockTransferRepositoryMockRecorder) GetYearlyTransferAmountsBySenderCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferAmountsBySenderCardNumber", reflect.TypeOf((*MockTransferRepository)(nil).GetYearlyTransferAmountsBySenderCardNumber), req)
}

// GetYearlyTransferStatusFailed mocks base method.
func (m *MockTransferRepository) GetYearlyTransferStatusFailed(year int) ([]*record.TransferRecordYearStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferStatusFailed", year)
	ret0, _ := ret[0].([]*record.TransferRecordYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferStatusFailed indicates an expected call of GetYearlyTransferStatusFailed.
func (mr *MockTransferRepositoryMockRecorder) GetYearlyTransferStatusFailed(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferStatusFailed", reflect.TypeOf((*MockTransferRepository)(nil).GetYearlyTransferStatusFailed), year)
}

// GetYearlyTransferStatusFailedByCardNumber mocks base method.
func (m *MockTransferRepository) GetYearlyTransferStatusFailedByCardNumber(req *requests.YearStatusTransferCardNumber) ([]*record.TransferRecordYearStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferStatusFailedByCardNumber", req)
	ret0, _ := ret[0].([]*record.TransferRecordYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferStatusFailedByCardNumber indicates an expected call of GetYearlyTransferStatusFailedByCardNumber.
func (mr *MockTransferRepositoryMockRecorder) GetYearlyTransferStatusFailedByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferStatusFailedByCardNumber", reflect.TypeOf((*MockTransferRepository)(nil).GetYearlyTransferStatusFailedByCardNumber), req)
}

// GetYearlyTransferStatusSuccess mocks base method.
func (m *MockTransferRepository) GetYearlyTransferStatusSuccess(year int) ([]*record.TransferRecordYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferStatusSuccess", year)
	ret0, _ := ret[0].([]*record.TransferRecordYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferStatusSuccess indicates an expected call of GetYearlyTransferStatusSuccess.
func (mr *MockTransferRepositoryMockRecorder) GetYearlyTransferStatusSuccess(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferStatusSuccess", reflect.TypeOf((*MockTransferRepository)(nil).GetYearlyTransferStatusSuccess), year)
}

// GetYearlyTransferStatusSuccessByCardNumber mocks base method.
func (m *MockTransferRepository) GetYearlyTransferStatusSuccessByCardNumber(req *requests.YearStatusTransferCardNumber) ([]*record.TransferRecordYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyTransferStatusSuccessByCardNumber", req)
	ret0, _ := ret[0].([]*record.TransferRecordYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyTransferStatusSuccessByCardNumber indicates an expected call of GetYearlyTransferStatusSuccessByCardNumber.
func (mr *MockTransferRepositoryMockRecorder) GetYearlyTransferStatusSuccessByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyTransferStatusSuccessByCardNumber", reflect.TypeOf((*MockTransferRepository)(nil).GetYearlyTransferStatusSuccessByCardNumber), req)
}

// RestoreAllTransfer mocks base method.
func (m *MockTransferRepository) RestoreAllTransfer() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllTransfer")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllTransfer indicates an expected call of RestoreAllTransfer.
func (mr *MockTransferRepositoryMockRecorder) RestoreAllTransfer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllTransfer", reflect.TypeOf((*MockTransferRepository)(nil).RestoreAllTransfer))
}

// RestoreTransfer mocks base method.
func (m *MockTransferRepository) RestoreTransfer(transfer_id int) (*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTransfer", transfer_id)
	ret0, _ := ret[0].(*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTransfer indicates an expected call of RestoreTransfer.
func (mr *MockTransferRepositoryMockRecorder) RestoreTransfer(transfer_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTransfer", reflect.TypeOf((*MockTransferRepository)(nil).RestoreTransfer), transfer_id)
}

// TrashedTransfer mocks base method.
func (m *MockTransferRepository) TrashedTransfer(transfer_id int) (*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedTransfer", transfer_id)
	ret0, _ := ret[0].(*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedTransfer indicates an expected call of TrashedTransfer.
func (mr *MockTransferRepositoryMockRecorder) TrashedTransfer(transfer_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedTransfer", reflect.TypeOf((*MockTransferRepository)(nil).TrashedTransfer), transfer_id)
}

// UpdateTransfer mocks base method.
func (m *MockTransferRepository) UpdateTransfer(request *requests.UpdateTransferRequest) (*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransfer", request)
	ret0, _ := ret[0].(*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransfer indicates an expected call of UpdateTransfer.
func (mr *MockTransferRepositoryMockRecorder) UpdateTransfer(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransfer", reflect.TypeOf((*MockTransferRepository)(nil).UpdateTransfer), request)
}

// UpdateTransferAmount mocks base method.
func (m *MockTransferRepository) UpdateTransferAmount(request *requests.UpdateTransferAmountRequest) (*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransferAmount", request)
	ret0, _ := ret[0].(*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransferAmount indicates an expected call of UpdateTransferAmount.
func (mr *MockTransferRepositoryMockRecorder) UpdateTransferAmount(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransferAmount", reflect.TypeOf((*MockTransferRepository)(nil).UpdateTransferAmount), request)
}

// UpdateTransferStatus mocks base method.
func (m *MockTransferRepository) UpdateTransferStatus(request *requests.UpdateTransferStatus) (*record.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransferStatus", request)
	ret0, _ := ret[0].(*record.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransferStatus indicates an expected call of UpdateTransferStatus.
func (mr *MockTransferRepositoryMockRecorder) UpdateTransferStatus(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransferStatus", reflect.TypeOf((*MockTransferRepository)(nil).UpdateTransferStatus), request)
}

// MockWithdrawRepository is a mock of WithdrawRepository interface.
type MockWithdrawRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawRepositoryMockRecorder
	isgomock struct{}
}

// MockWithdrawRepositoryMockRecorder is the mock recorder for MockWithdrawRepository.
type MockWithdrawRepositoryMockRecorder struct {
	mock *MockWithdrawRepository
}

// NewMockWithdrawRepository creates a new mock instance.
func NewMockWithdrawRepository(ctrl *gomock.Controller) *MockWithdrawRepository {
	mock := &MockWithdrawRepository{ctrl: ctrl}
	mock.recorder = &MockWithdrawRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawRepository) EXPECT() *MockWithdrawRepositoryMockRecorder {
	return m.recorder
}

// CreateWithdraw mocks base method.
func (m *MockWithdrawRepository) CreateWithdraw(request *requests.CreateWithdrawRequest) (*record.WithdrawRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdraw", request)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithdraw indicates an expected call of CreateWithdraw.
func (mr *MockWithdrawRepositoryMockRecorder) CreateWithdraw(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdraw", reflect.TypeOf((*MockWithdrawRepository)(nil).CreateWithdraw), request)
}

// DeleteAllWithdrawPermanent mocks base method.
func (m *MockWithdrawRepository) DeleteAllWithdrawPermanent() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllWithdrawPermanent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllWithdrawPermanent indicates an expected call of DeleteAllWithdrawPermanent.
func (mr *MockWithdrawRepositoryMockRecorder) DeleteAllWithdrawPermanent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllWithdrawPermanent", reflect.TypeOf((*MockWithdrawRepository)(nil).DeleteAllWithdrawPermanent))
}

// DeleteWithdrawPermanent mocks base method.
func (m *MockWithdrawRepository) DeleteWithdrawPermanent(WithdrawID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWithdrawPermanent", WithdrawID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWithdrawPermanent indicates an expected call of DeleteWithdrawPermanent.
func (mr *MockWithdrawRepositoryMockRecorder) DeleteWithdrawPermanent(WithdrawID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithdrawPermanent", reflect.TypeOf((*MockWithdrawRepository)(nil).DeleteWithdrawPermanent), WithdrawID)
}

// FindAll mocks base method.
func (m *MockWithdrawRepository) FindAll(req *requests.FindAllWithdraws) ([]*record.WithdrawRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", req)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockWithdrawRepositoryMockRecorder) FindAll(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockWithdrawRepository)(nil).FindAll), req)
}

// FindAllByCardNumber mocks base method.
func (m *MockWithdrawRepository) FindAllByCardNumber(req *requests.FindAllWithdrawCardNumber) ([]*record.WithdrawRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByCardNumber", req)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllByCardNumber indicates an expected call of FindAllByCardNumber.
func (mr *MockWithdrawRepositoryMockRecorder) FindAllByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByCardNumber", reflect.TypeOf((*MockWithdrawRepository)(nil).FindAllByCardNumber), req)
}

// FindByActive mocks base method.
func (m *MockWithdrawRepository) FindByActive(req *requests.FindAllWithdraws) ([]*record.WithdrawRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActive", req)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByActive indicates an expected call of FindByActive.
func (mr *MockWithdrawRepositoryMockRecorder) FindByActive(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActive", reflect.TypeOf((*MockWithdrawRepository)(nil).FindByActive), req)
}

// FindById mocks base method.
func (m *MockWithdrawRepository) FindById(id int) (*record.WithdrawRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockWithdrawRepositoryMockRecorder) FindById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockWithdrawRepository)(nil).FindById), id)
}

// FindByTrashed mocks base method.
func (m *MockWithdrawRepository) FindByTrashed(req *requests.FindAllWithdraws) ([]*record.WithdrawRecord, *int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTrashed", req)
	ret0, _ := ret[0].([]*record.WithdrawRecord)
	ret1, _ := ret[1].(*int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTrashed indicates an expected call of FindByTrashed.
func (mr *MockWithdrawRepositoryMockRecorder) FindByTrashed(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTrashed", reflect.TypeOf((*MockWithdrawRepository)(nil).FindByTrashed), req)
}

// GetMonthWithdrawStatusFailed mocks base method.
func (m *MockWithdrawRepository) GetMonthWithdrawStatusFailed(req *requests.MonthStatusWithdraw) ([]*record.WithdrawRecordMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthWithdrawStatusFailed", req)
	ret0, _ := ret[0].([]*record.WithdrawRecordMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthWithdrawStatusFailed indicates an expected call of GetMonthWithdrawStatusFailed.
func (mr *MockWithdrawRepositoryMockRecorder) GetMonthWithdrawStatusFailed(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthWithdrawStatusFailed", reflect.TypeOf((*MockWithdrawRepository)(nil).GetMonthWithdrawStatusFailed), req)
}

// GetMonthWithdrawStatusFailedByCardNumber mocks base method.
func (m *MockWithdrawRepository) GetMonthWithdrawStatusFailedByCardNumber(req *requests.MonthStatusWithdrawCardNumber) ([]*record.WithdrawRecordMonthStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthWithdrawStatusFailedByCardNumber", req)
	ret0, _ := ret[0].([]*record.WithdrawRecordMonthStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthWithdrawStatusFailedByCardNumber indicates an expected call of GetMonthWithdrawStatusFailedByCardNumber.
func (mr *MockWithdrawRepositoryMockRecorder) GetMonthWithdrawStatusFailedByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthWithdrawStatusFailedByCardNumber", reflect.TypeOf((*MockWithdrawRepository)(nil).GetMonthWithdrawStatusFailedByCardNumber), req)
}

// GetMonthWithdrawStatusSuccess mocks base method.
func (m *MockWithdrawRepository) GetMonthWithdrawStatusSuccess(req *requests.MonthStatusWithdraw) ([]*record.WithdrawRecordMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthWithdrawStatusSuccess", req)
	ret0, _ := ret[0].([]*record.WithdrawRecordMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthWithdrawStatusSuccess indicates an expected call of GetMonthWithdrawStatusSuccess.
func (mr *MockWithdrawRepositoryMockRecorder) GetMonthWithdrawStatusSuccess(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthWithdrawStatusSuccess", reflect.TypeOf((*MockWithdrawRepository)(nil).GetMonthWithdrawStatusSuccess), req)
}

// GetMonthWithdrawStatusSuccessByCardNumber mocks base method.
func (m *MockWithdrawRepository) GetMonthWithdrawStatusSuccessByCardNumber(req *requests.MonthStatusWithdrawCardNumber) ([]*record.WithdrawRecordMonthStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthWithdrawStatusSuccessByCardNumber", req)
	ret0, _ := ret[0].([]*record.WithdrawRecordMonthStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthWithdrawStatusSuccessByCardNumber indicates an expected call of GetMonthWithdrawStatusSuccessByCardNumber.
func (mr *MockWithdrawRepositoryMockRecorder) GetMonthWithdrawStatusSuccessByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthWithdrawStatusSuccessByCardNumber", reflect.TypeOf((*MockWithdrawRepository)(nil).GetMonthWithdrawStatusSuccessByCardNumber), req)
}

// GetMonthlyWithdraws mocks base method.
func (m *MockWithdrawRepository) GetMonthlyWithdraws(year int) ([]*record.WithdrawMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyWithdraws", year)
	ret0, _ := ret[0].([]*record.WithdrawMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyWithdraws indicates an expected call of GetMonthlyWithdraws.
func (mr *MockWithdrawRepositoryMockRecorder) GetMonthlyWithdraws(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyWithdraws", reflect.TypeOf((*MockWithdrawRepository)(nil).GetMonthlyWithdraws), year)
}

// GetMonthlyWithdrawsByCardNumber mocks base method.
func (m *MockWithdrawRepository) GetMonthlyWithdrawsByCardNumber(req *requests.YearMonthCardNumber) ([]*record.WithdrawMonthlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyWithdrawsByCardNumber", req)
	ret0, _ := ret[0].([]*record.WithdrawMonthlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyWithdrawsByCardNumber indicates an expected call of GetMonthlyWithdrawsByCardNumber.
func (mr *MockWithdrawRepositoryMockRecorder) GetMonthlyWithdrawsByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyWithdrawsByCardNumber", reflect.TypeOf((*MockWithdrawRepository)(nil).GetMonthlyWithdrawsByCardNumber), req)
}

// GetYearlyWithdrawStatusFailed mocks base method.
func (m *MockWithdrawRepository) GetYearlyWithdrawStatusFailed(year int) ([]*record.WithdrawRecordYearStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyWithdrawStatusFailed", year)
	ret0, _ := ret[0].([]*record.WithdrawRecordYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyWithdrawStatusFailed indicates an expected call of GetYearlyWithdrawStatusFailed.
func (mr *MockWithdrawRepositoryMockRecorder) GetYearlyWithdrawStatusFailed(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyWithdrawStatusFailed", reflect.TypeOf((*MockWithdrawRepository)(nil).GetYearlyWithdrawStatusFailed), year)
}

// GetYearlyWithdrawStatusFailedByCardNumber mocks base method.
func (m *MockWithdrawRepository) GetYearlyWithdrawStatusFailedByCardNumber(req *requests.YearStatusWithdrawCardNumber) ([]*record.WithdrawRecordYearStatusFailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyWithdrawStatusFailedByCardNumber", req)
	ret0, _ := ret[0].([]*record.WithdrawRecordYearStatusFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyWithdrawStatusFailedByCardNumber indicates an expected call of GetYearlyWithdrawStatusFailedByCardNumber.
func (mr *MockWithdrawRepositoryMockRecorder) GetYearlyWithdrawStatusFailedByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyWithdrawStatusFailedByCardNumber", reflect.TypeOf((*MockWithdrawRepository)(nil).GetYearlyWithdrawStatusFailedByCardNumber), req)
}

// GetYearlyWithdrawStatusSuccess mocks base method.
func (m *MockWithdrawRepository) GetYearlyWithdrawStatusSuccess(year int) ([]*record.WithdrawRecordYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyWithdrawStatusSuccess", year)
	ret0, _ := ret[0].([]*record.WithdrawRecordYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyWithdrawStatusSuccess indicates an expected call of GetYearlyWithdrawStatusSuccess.
func (mr *MockWithdrawRepositoryMockRecorder) GetYearlyWithdrawStatusSuccess(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyWithdrawStatusSuccess", reflect.TypeOf((*MockWithdrawRepository)(nil).GetYearlyWithdrawStatusSuccess), year)
}

// GetYearlyWithdrawStatusSuccessByCardNumber mocks base method.
func (m *MockWithdrawRepository) GetYearlyWithdrawStatusSuccessByCardNumber(req *requests.YearStatusWithdrawCardNumber) ([]*record.WithdrawRecordYearStatusSuccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyWithdrawStatusSuccessByCardNumber", req)
	ret0, _ := ret[0].([]*record.WithdrawRecordYearStatusSuccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyWithdrawStatusSuccessByCardNumber indicates an expected call of GetYearlyWithdrawStatusSuccessByCardNumber.
func (mr *MockWithdrawRepositoryMockRecorder) GetYearlyWithdrawStatusSuccessByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyWithdrawStatusSuccessByCardNumber", reflect.TypeOf((*MockWithdrawRepository)(nil).GetYearlyWithdrawStatusSuccessByCardNumber), req)
}

// GetYearlyWithdraws mocks base method.
func (m *MockWithdrawRepository) GetYearlyWithdraws(year int) ([]*record.WithdrawYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyWithdraws", year)
	ret0, _ := ret[0].([]*record.WithdrawYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyWithdraws indicates an expected call of GetYearlyWithdraws.
func (mr *MockWithdrawRepositoryMockRecorder) GetYearlyWithdraws(year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyWithdraws", reflect.TypeOf((*MockWithdrawRepository)(nil).GetYearlyWithdraws), year)
}

// GetYearlyWithdrawsByCardNumber mocks base method.
func (m *MockWithdrawRepository) GetYearlyWithdrawsByCardNumber(req *requests.YearMonthCardNumber) ([]*record.WithdrawYearlyAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearlyWithdrawsByCardNumber", req)
	ret0, _ := ret[0].([]*record.WithdrawYearlyAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYearlyWithdrawsByCardNumber indicates an expected call of GetYearlyWithdrawsByCardNumber.
func (mr *MockWithdrawRepositoryMockRecorder) GetYearlyWithdrawsByCardNumber(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearlyWithdrawsByCardNumber", reflect.TypeOf((*MockWithdrawRepository)(nil).GetYearlyWithdrawsByCardNumber), req)
}

// RestoreAllWithdraw mocks base method.
func (m *MockWithdrawRepository) RestoreAllWithdraw() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreAllWithdraw")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreAllWithdraw indicates an expected call of RestoreAllWithdraw.
func (mr *MockWithdrawRepositoryMockRecorder) RestoreAllWithdraw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreAllWithdraw", reflect.TypeOf((*MockWithdrawRepository)(nil).RestoreAllWithdraw))
}

// RestoreWithdraw mocks base method.
func (m *MockWithdrawRepository) RestoreWithdraw(WithdrawID int) (*record.WithdrawRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreWithdraw", WithdrawID)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreWithdraw indicates an expected call of RestoreWithdraw.
func (mr *MockWithdrawRepositoryMockRecorder) RestoreWithdraw(WithdrawID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreWithdraw", reflect.TypeOf((*MockWithdrawRepository)(nil).RestoreWithdraw), WithdrawID)
}

// TrashedWithdraw mocks base method.
func (m *MockWithdrawRepository) TrashedWithdraw(WithdrawID int) (*record.WithdrawRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedWithdraw", WithdrawID)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedWithdraw indicates an expected call of TrashedWithdraw.
func (mr *MockWithdrawRepositoryMockRecorder) TrashedWithdraw(WithdrawID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedWithdraw", reflect.TypeOf((*MockWithdrawRepository)(nil).TrashedWithdraw), WithdrawID)
}

// UpdateWithdraw mocks base method.
func (m *MockWithdrawRepository) UpdateWithdraw(request *requests.UpdateWithdrawRequest) (*record.WithdrawRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithdraw", request)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithdraw indicates an expected call of UpdateWithdraw.
func (mr *MockWithdrawRepositoryMockRecorder) UpdateWithdraw(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithdraw", reflect.TypeOf((*MockWithdrawRepository)(nil).UpdateWithdraw), request)
}

// UpdateWithdrawStatus mocks base method.
func (m *MockWithdrawRepository) UpdateWithdrawStatus(request *requests.UpdateWithdrawStatus) (*record.WithdrawRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithdrawStatus", request)
	ret0, _ := ret[0].(*record.WithdrawRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithdrawStatus indicates an expected call of UpdateWithdrawStatus.
func (mr *MockWithdrawRepositoryMockRecorder) UpdateWithdrawStatus(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithdrawStatus", reflect.TypeOf((*MockWithdrawRepository)(nil).UpdateWithdrawStatus), request)
}
